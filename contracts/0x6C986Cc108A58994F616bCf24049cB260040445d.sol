contract main {




// =====================  Runtime code  =====================


#
#  - sub_4d351686(?)
#  - getPower(address arg1)
#  - sub_a0915c01(?)
#
address sub_abc7e0dfAddress;
address sub_32d3539fAddress;
address usdcTokenAddress;
address wNativeAddress;
address sub_f5a45b5cAddress;
address sub_8ed8ea7eAddress;
address sub_d4384dbeAddress;

function usdcToken() payable {
    return usdcTokenAddress
}

function wNative() payable {
    return wNativeAddress
}

function sub_32d3539f(?) payable {
    return sub_32d3539fAddress
}

function sub_8ed8ea7e(?) payable {
    return sub_8ed8ea7eAddress
}

function sub_abc7e0df(?) payable {
    return sub_abc7e0dfAddress
}

function sub_d4384dbe(?) payable {
    return sub_d4384dbeAddress
}

function sub_f5a45b5c(?) payable {
    return sub_f5a45b5cAddress
}

function _fallback() payable {
    revert
}

function sub_59592396(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(arg1)
    staticcall arg1.getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _13 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _16 = mem[_13 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_13 + 96])] = mem[_13 + 128 len ceil32(mem[_13 + 96])]
    if not _16 % 32:
        mem[_16 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_16 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _136 = mem[_16 + ceil32(return_data.size) + 128]
        require mem[_16 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_16 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128] + mem[_16 + ceil32(return_data.size) + 128] + 32 and mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_16 + (2 * ceil32(return_data.size)) + 128] = mem[_16 + ceil32(return_data.size) + mem[_16 + ceil32(return_data.size) + 128] + 128]
        _142 = mem[_16 + ceil32(return_data.size) + _136 + 128]
        mem[_16 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_16 + ceil32(return_data.size) + _136 + 128])] = mem[_16 + ceil32(return_data.size) + _136 + 160 len ceil32(mem[_16 + ceil32(return_data.size) + _136 + 128])]
        if not _142 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_16 + (2 * ceil32(return_data.size)) + 160 len mem[_16 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_142 + _16 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_142 + _16 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
        else:
            mem[floor32(_142) + _16 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_142) + _16 + (2 * ceil32(return_data.size)) + -(_142 % 32) + 192 len _142 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_16 + (2 * ceil32(return_data.size)) + 160 len mem[_16 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_142) + _16 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_142) + _16 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
    else:
        mem[floor32(_16) + ceil32(return_data.size) + 128] = mem[floor32(_16) + ceil32(return_data.size) + -(_16 % 32) + 160 len _16 % 32]
        mem[floor32(_16) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_16) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _139 = mem[floor32(_16) + ceil32(return_data.size) + 160]
        require mem[floor32(_16) + ceil32(return_data.size) + 160] <= 4294967296
        require mem[floor32(_16) + ceil32(return_data.size) + 160] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_16) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160] <= 4294967296
        mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_16) + ceil32(return_data.size) + mem[floor32(_16) + ceil32(return_data.size) + 160] + 160]
        _144 = mem[floor32(_16) + ceil32(return_data.size) + _139 + 160]
        mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_16) + ceil32(return_data.size) + _139 + 160])] = mem[floor32(_16) + ceil32(return_data.size) + _139 + 192 len ceil32(mem[floor32(_16) + ceil32(return_data.size) + _139 + 160])]
        if not _144 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_144 + floor32(_16) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_144 + floor32(_16) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
        else:
            mem[floor32(_144) + floor32(_16) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_144) + floor32(_16) + (2 * ceil32(return_data.size)) + -(_144 % 32) + 224 len _144 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_16) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_16) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_144) + floor32(_16) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (0 / Mask(112, 0, ext_call.return_data[32]))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_144) + floor32(_16) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        return (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                ('iszero', ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))
    revert
}

function meowPrice() payable {
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, sub_abc7e0dfAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[12 len 20]:
        return 1112
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, sub_abc7e0dfAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _23 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _26 = mem[_23 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_23 + 96])] = mem[_23 + 128 len ceil32(mem[_23 + 96])]
    if not _26 % 32:
        mem[_26 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_26 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _4306 = mem[_26 + ceil32(return_data.size) + 128]
        require mem[_26 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_26 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_26 + ceil32(return_data.size) + mem[_26 + ceil32(return_data.size) + 128] + 128] + mem[_26 + ceil32(return_data.size) + 128] + 32 and mem[_26 + ceil32(return_data.size) + mem[_26 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_26 + (2 * ceil32(return_data.size)) + 128] = mem[_26 + ceil32(return_data.size) + mem[_26 + ceil32(return_data.size) + 128] + 128]
        _4312 = mem[_26 + ceil32(return_data.size) + _4306 + 128]
        mem[_26 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_26 + ceil32(return_data.size) + _4306 + 128])] = mem[_26 + ceil32(return_data.size) + _4306 + 160 len ceil32(mem[_26 + ceil32(return_data.size) + _4306 + 128])]
        if not _4312 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_26 + (2 * ceil32(return_data.size)) + 160 len mem[_26 + (2 * ceil32(return_data.size)) + 128]]):
                if Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + _26 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8895 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8941 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8895 + 160]
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8895 + 160])] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8895 + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8895 + 160])]
                        if not _8941 % 32:
                            mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12915 = mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192] = mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13011 = mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12915 + 192]
                            mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12915 + 192])] = mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12915 + 224 len ceil32(mem[_8941 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12915 + 192])]
                            if not _13011 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13011 + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13011 % 32) + 256 len _13011 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13011) + _8941 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + -(_8941 % 32) + 224 len _8941 % 32]
                            mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            _12963 = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13043 = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12963 + 224]
                            mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12963 + 224])] = mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12963 + 256 len ceil32(mem[floor32(_8941) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12963 + 224])]
                            if not _13043 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13043 + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13043 % 32) + 288 len _13043 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13043) + floor32(_8941) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + _26 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8880 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8930 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8880 + 160]
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8880 + 160])] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8880 + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8880 + 160])]
                        if not _8930 % 32:
                            mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192
                            require return_data.size >= 32
                            _12918 = mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192] = mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13013 = mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12918 + 192]
                            mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12918 + 192])] = mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12918 + 224 len ceil32(mem[_8930 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12918 + 192])]
                            if not _13013 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13013 + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13013 % 32) + 256 len _13013 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13013) + _8930 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + -(_8930 % 32) + 224 len _8930 % 32]
                            mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12965 = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13044 = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12965 + 224]
                            mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12965 + 224])] = mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12965 + 256 len ceil32(mem[floor32(_8930) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12965 + 224])]
                            if not _13044 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13044 + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13044 % 32) + 288 len _13044 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13044) + floor32(_8930) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + _26 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8898 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8943 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8898 + 160]
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8898 + 160])] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8898 + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8898 + 160])]
                        if not _8943 % 32:
                            mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            _12924 = mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192] = mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13017 = mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12924 + 192]
                            mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12924 + 192])] = mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12924 + 224 len ceil32(mem[_8943 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12924 + 192])]
                            if not _13017 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13017 + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13017 % 32) + 256 len _13017 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13017) + _8943 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + -(_8943 % 32) + 224 len _8943 % 32]
                            mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12969 = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13046 = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12969 + 224]
                            mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12969 + 224])] = mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12969 + 256 len ceil32(mem[floor32(_8943) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12969 + 224])]
                            if not _13046 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13046 + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13046 % 32) + 288 len _13046 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13046) + floor32(_8943) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 261 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _4312 + _26 + (4 * ceil32(return_data.size)) + 160
                        require return_data.size >= 32
                        _8914 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160]
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                        require mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                        require return_data.size >= mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + mem[_4312 + _26 + (2 * ceil32(return_data.size)) + 160] + 160]
                        _8954 = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8914 + 160]
                        mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8914 + 160])] = mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8914 + 192 len ceil32(mem[_4312 + _26 + (2 * ceil32(return_data.size)) + _8914 + 160])]
                        if not _8954 % 32:
                            mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            _12921 = mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192]
                            require mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                            require mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                            require return_data.size >= mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                            mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192] = mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] + 192]
                            _13015 = mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12921 + 192]
                            mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12921 + 192])] = mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12921 + 224 len ceil32(mem[_8954 + _4312 + _26 + (4 * ceil32(return_data.size)) + _12921 + 192])]
                            if not _13015 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13015 + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 325 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13015 % 32) + 256 len _13015 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 224 len mem[_8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 192]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13015) + _8954 + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + -(_8954 % 32) + 224 len _8954 % 32]
                            mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12967 = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13045 = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12967 + 224]
                            mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12967 + 224])] = mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12967 + 256 len ceil32(mem[floor32(_8954) + _4312 + _26 + (4 * ceil32(return_data.size)) + _12967 + 224])]
                            if not _13045 % 32:
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13045 + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + -(_13045 % 32) + 288 len _13045 % 32]
                                if sha3(mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 192 len mem[_4312 + _26 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13045) + floor32(_8954) + _4312 + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
        else:
            mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + -(_4312 % 32) + 192 len _4312 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_26 + (2 * ceil32(return_data.size)) + 160 len mem[_26 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8901 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8945 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8901 + 192]
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8901 + 192])] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8901 + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8901 + 192])]
                        if not _8945 % 32:
                            mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12930 = mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224] = mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13021 = mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12930 + 224]
                            mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12930 + 224])] = mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12930 + 256 len ceil32(mem[_8945 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12930 + 224])]
                            if not _13021 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13021 + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13021 % 32) + 288 len _13021 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13021) + _8945 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + -(_8945 % 32) + 256 len _8945 % 32]
                            mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            _12973 = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13048 = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12973 + 256]
                            mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12973 + 256])] = mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12973 + 288 len ceil32(mem[floor32(_8945) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12973 + 256])]
                            if not _13048 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13048 + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13048 % 32) + 320 len _13048 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13048) + floor32(_8945) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8916 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8955 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8916 + 192]
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8916 + 192])] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8916 + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8916 + 192])]
                        if not _8955 % 32:
                            mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12927 = mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224] = mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13019 = mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12927 + 224]
                            mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12927 + 224])] = mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12927 + 256 len ceil32(mem[_8955 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12927 + 224])]
                            if not _13019 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13019 + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13019 % 32) + 288 len _13019 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13019) + _8955 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + -(_8955 % 32) + 256 len _8955 % 32]
                            mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12971 = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13047 = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12971 + 256]
                            mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12971 + 256])] = mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12971 + 288 len ceil32(mem[floor32(_8955) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12971 + 256])]
                            if not _13047 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13047 + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13047 % 32) + 320 len _13047 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13047) + floor32(_8955) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8919 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8957 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8919 + 192]
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8919 + 192])] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8919 + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8919 + 192])]
                        if not _8957 % 32:
                            mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12936 = mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224] = mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13025 = mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12936 + 224]
                            mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12936 + 224])] = mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12936 + 256 len ceil32(mem[_8957 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12936 + 224])]
                            if not _13025 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13025 + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13025 % 32) + 288 len _13025 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13025) + _8957 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + -(_8957 % 32) + 256 len _8957 % 32]
                            mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12977 = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13050 = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12977 + 256]
                            mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12977 + 256])] = mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12977 + 288 len ceil32(mem[floor32(_8957) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12977 + 256])]
                            if not _13050 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13050 + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13050 % 32) + 320 len _13050 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13050) + floor32(_8957) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _8933 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192]
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8968 = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8933 + 192]
                        mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8933 + 192])] = mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8933 + 224 len ceil32(mem[floor32(_4312) + _26 + (2 * ceil32(return_data.size)) + _8933 + 192])]
                        if not _8968 % 32:
                            mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12933 = mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224] = mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13023 = mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12933 + 224]
                            mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12933 + 224])] = mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12933 + 256 len ceil32(mem[_8968 + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12933 + 224])]
                            if not _13023 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13023 + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13023 % 32) + 288 len _13023 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256 len mem[_8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13023) + _8968 + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + -(_8968 % 32) + 256 len _8968 % 32]
                            mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12975 = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13049 = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12975 + 256]
                            mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12975 + 256])] = mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12975 + 288 len ceil32(mem[floor32(_8968) + floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + _12975 + 256])]
                            if not _13049 % 32:
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13049 + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + -(_13049 % 32) + 320 len _13049 % 32]
                                if sha3(mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_4312) + _26 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13049) + floor32(_8968) + floor32(_4312) + _26 + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
    else:
        mem[floor32(_26) + ceil32(return_data.size) + 128] = mem[floor32(_26) + ceil32(return_data.size) + -(_26 % 32) + 160 len _26 % 32]
        mem[floor32(_26) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_26) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = floor32(_26) + (2 * ceil32(return_data.size)) + 160
        require return_data.size >= 32
        _4309 = mem[floor32(_26) + ceil32(return_data.size) + 160]
        require mem[floor32(_26) + ceil32(return_data.size) + 160] <= 4294967296
        require mem[floor32(_26) + ceil32(return_data.size) + 160] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_26) + ceil32(return_data.size) + mem[floor32(_26) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_26) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_26) + ceil32(return_data.size) + mem[floor32(_26) + ceil32(return_data.size) + 160] + 160] <= 4294967296
        mem[floor32(_26) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_26) + ceil32(return_data.size) + mem[floor32(_26) + ceil32(return_data.size) + 160] + 160]
        _4314 = mem[floor32(_26) + ceil32(return_data.size) + _4309 + 160]
        mem[floor32(_26) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_26) + ceil32(return_data.size) + _4309 + 160])] = mem[floor32(_26) + ceil32(return_data.size) + _4309 + 192 len ceil32(mem[floor32(_26) + ceil32(return_data.size) + _4309 + 160])]
        if not _4314 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_26) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_26) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _8888 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8936 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8888 + 192]
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8888 + 192])] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8888 + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8888 + 192])]
                        if not _8936 % 32:
                            mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            _12942 = mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224] = mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13029 = mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12942 + 224]
                            mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12942 + 224])] = mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12942 + 256 len ceil32(mem[_8936 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12942 + 224])]
                            if not _13029 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13029 + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13029 % 32) + 288 len _13029 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13029) + _8936 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8936 % 32) + 256 len _8936 % 32]
                            mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12981 = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13052 = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12981 + 256]
                            mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12981 + 256])] = mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12981 + 288 len ceil32(mem[floor32(_8936) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12981 + 256])]
                            if not _13052 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13052 + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13052 % 32) + 320 len _13052 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13052) + floor32(_8936) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _8904 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8947 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8904 + 192]
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8904 + 192])] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8904 + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8904 + 192])]
                        if not _8947 % 32:
                            mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12939 = mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224] = mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13027 = mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12939 + 224]
                            mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12939 + 224])] = mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12939 + 256 len ceil32(mem[_8947 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12939 + 224])]
                            if not _13027 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13027 + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13027 % 32) + 288 len _13027 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13027) + _8947 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8947 % 32) + 256 len _8947 % 32]
                            mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12979 = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13051 = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12979 + 256]
                            mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12979 + 256])] = mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12979 + 288 len ceil32(mem[floor32(_8947) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12979 + 256])]
                            if not _13051 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13051 + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13051 % 32) + 320 len _13051 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13051) + floor32(_8947) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _8907 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8949 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8907 + 192]
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8907 + 192])] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8907 + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8907 + 192])]
                        if not _8949 % 32:
                            mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12948 = mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224] = mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13033 = mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12948 + 224]
                            mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12948 + 224])] = mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12948 + 256 len ceil32(mem[_8949 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12948 + 224])]
                            if not _13033 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13033 + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13033 % 32) + 288 len _13033 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13033) + _8949 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8949 % 32) + 256 len _8949 % 32]
                            mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12985 = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13054 = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12985 + 256]
                            mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12985 + 256])] = mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12985 + 288 len ceil32(mem[floor32(_8949) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12985 + 256])]
                            if not _13054 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13054 + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13054 % 32) + 320 len _13054 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13054) + floor32(_8949) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 293 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _8922 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192]
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + 192] + 192]
                        _8959 = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8922 + 192]
                        mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8922 + 192])] = mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8922 + 224 len ceil32(mem[_4314 + floor32(_26) + (2 * ceil32(return_data.size)) + _8922 + 192])]
                        if not _8959 % 32:
                            mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224
                            require return_data.size >= 32
                            _12945 = mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224]
                            require mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                            require mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                            require return_data.size >= mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                            mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224] = mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] + 224]
                            _13031 = mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12945 + 224]
                            mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12945 + 224])] = mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12945 + 256 len ceil32(mem[_8959 + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12945 + 224])]
                            if not _13031 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13031 + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 357 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13031 % 32) + 288 len _13031 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256 len mem[_8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 224]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13031) + _8959 + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8959 % 32) + 256 len _8959 % 32]
                            mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12983 = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13053 = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12983 + 256]
                            mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12983 + 256])] = mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12983 + 288 len ceil32(mem[floor32(_8959) + _4314 + floor32(_26) + (4 * ceil32(return_data.size)) + _12983 + 256])]
                            if not _13053 % 32:
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13053 + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13053 % 32) + 320 len _13053 % 32]
                                if sha3(mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 224 len mem[_4314 + floor32(_26) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13053) + floor32(_8959) + _4314 + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
        else:
            mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + -(_4314 % 32) + 224 len _4314 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_26) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_26) + (2 * ceil32(return_data.size)) + 160]]):
                if Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _8924 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8960 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8924 + 224]
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8924 + 224])] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8924 + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8924 + 224])]
                        if not _8960 % 32:
                            mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            _12951 = mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13035 = mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12951 + 256]
                            mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12951 + 256])] = mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12951 + 288 len ceil32(mem[_8960 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12951 + 256])]
                            if not _13035 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13035 + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13035 % 32) + 320 len _13035 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13035) + _8960 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8960 % 32) + 288 len _8960 % 32]
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            _12987 = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13055 = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12987 + 288]
                            mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12987 + 288])] = mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12987 + 320 len ceil32(mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12987 + 288])]
                            if not _13055 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13055 + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13055 % 32) + 352 len _13055 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13055) + floor32(_8960) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                else:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[0]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _8910 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8951 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8910 + 224]
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8910 + 224])] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8910 + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8910 + 224])]
                        if not _8951 % 32:
                            mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12954 = mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13037 = mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12954 + 256]
                            mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12954 + 256])] = mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12954 + 288 len ceil32(mem[_8951 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12954 + 256])]
                            if not _13037 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13037 + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13037 % 32) + 320 len _13037 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13037) + _8951 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                        else:
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8951 % 32) + 288 len _8951 % 32]
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12989 = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13056 = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12989 + 288]
                            mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12989 + 288])] = mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12989 + 320 len ceil32(mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12989 + 288])]
                            if not _13056 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13056 + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                            else:
                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13056 % 32) + 352 len _13056 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13056) + floor32(_8951) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[0]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))
            else:
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _8927 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8962 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8927 + 224]
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8927 + 224])] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8927 + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8927 + 224])]
                        if not _8962 % 32:
                            mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12960 = mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13041 = mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12960 + 256]
                            mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12960 + 256])] = mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12960 + 288 len ceil32(mem[_8962 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12960 + 256])]
                            if not _13041 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13041 + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13041 % 32) + 320 len _13041 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13041) + _8962 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8962 % 32) + 288 len _8962 % 32]
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12993 = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13058 = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12993 + 288]
                            mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12993 + 288])] = mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12993 + 320 len ceil32(mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12993 + 288])]
                            if not _13058 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13058 + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13058 % 32) + 352 len _13058 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13058) + floor32(_8962) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 0 / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                else:
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if Mask(112, 0, ext_call.return_data[32]):
                        require ext_code.size(sub_d4384dbeAddress)
                        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args wNativeAddress, usdcTokenAddress
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _8939 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + 224] + 224]
                        _8974 = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8939 + 224]
                        mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8939 + 224])] = mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8939 + 256 len ceil32(mem[floor32(_4314) + floor32(_26) + (2 * ceil32(return_data.size)) + _8939 + 224])]
                        if not _8974 % 32:
                            mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256
                            require return_data.size >= 32
                            _12957 = mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256]
                            require mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                            require mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                            require return_data.size >= mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                            mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256] = mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] + 256]
                            _13039 = mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12957 + 256]
                            mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12957 + 256])] = mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12957 + 288 len ceil32(mem[_8974 + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12957 + 256])]
                            if not _13039 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13039 + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 389 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13039 % 32) + 320 len _13039 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288 len mem[_8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 256]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13039) + _8974 + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                        else:
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + -(_8974 % 32) + 288 len _8974 % 32]
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                            require ext_code.size(wNativeAddress)
                            staticcall wNativeAddress.0x95d89b41 with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288
                            require return_data.size >= 32
                            _12991 = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288]
                            require mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                            require mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                            require return_data.size >= mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 288] + 288]
                            _13057 = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12991 + 288]
                            mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12991 + 288])] = mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12991 + 320 len ceil32(mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + _12991 + 288])]
                            if not _13057 % 32:
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[_13057 + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 421 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                            else:
                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + -(_13057 % 32) + 352 len _13057 % 32]
                                if sha3(mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_4314) + floor32(_26) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 288]]):
                                    if not Mask(112, 0, ext_call.return_data[32]):
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[0]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                else:
                                    if not Mask(112, 0, ext_call.return_data[0]):
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
                                    else:
                                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if Mask(112, 0, ext_call.return_data[32]):
                                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            else:
                                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                                    revert with 0, 
                                                                32,
                                                                33,
                                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[floor32(_13057) + floor32(_8974) + floor32(_4314) + floor32(_26) + (6 * ceil32(return_data.size)) + 453 len 31]
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                                            ('iszero', ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))
    revert
}

function sub_84d1ad7c(?) payable {
    require ext_code.size(sub_f5a45b5cAddress)
    staticcall sub_f5a45b5cAddress.0x6d52697d with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_f5a45b5cAddress)
    staticcall sub_f5a45b5cAddress.0x49333f69 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if 2 * ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, sub_abc7e0dfAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[12 len 20]:
        if not 2 * ext_call.return_data[0]:
            return 0
        if 2224 * ext_call.return_data[0] / 2 * ext_call.return_data[0] != 1112:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        return (2224 * ext_call.return_data[0] / 20 / 10^18)
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, sub_abc7e0dfAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _33 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _38 = mem[_33 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_33 + 96])] = mem[_33 + 128 len ceil32(mem[_33 + 96])]
    if not _38 % 32:
        mem[_38 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_38 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _38 + (2 * ceil32(return_data.size)) + 128
        require return_data.size >= 32
        _6368 = mem[_38 + ceil32(return_data.size) + 128]
        require mem[_38 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_38 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_38 + ceil32(return_data.size) + mem[_38 + ceil32(return_data.size) + 128] + 128] + mem[_38 + ceil32(return_data.size) + 128] + 32 and mem[_38 + ceil32(return_data.size) + mem[_38 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_38 + (2 * ceil32(return_data.size)) + 128] = mem[_38 + ceil32(return_data.size) + mem[_38 + ceil32(return_data.size) + 128] + 128]
        _6374 = mem[_38 + ceil32(return_data.size) + _6368 + 128]
        mem[_38 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_38 + ceil32(return_data.size) + _6368 + 128])] = mem[_38 + ceil32(return_data.size) + _6368 + 160 len ceil32(mem[_38 + ceil32(return_data.size) + _6368 + 128])]
        if not _6374 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_38 + (2 * ceil32(return_data.size)) + 160 len mem[_38 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_d4384dbeAddress)
                    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args wNativeAddress, usdcTokenAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getReserves() with:
                            gas gas_remaining wei
                    mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _6374 + _38 + (4 * ceil32(return_data.size)) + 160
                    require return_data.size >= 32
                    _12990 = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160]
                    require mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                    require mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                    require return_data.size >= mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                    mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160] = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160]
                    _13040 = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _12990 + 160]
                    mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _12990 + 160])] = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _12990 + 192 len ceil32(mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _12990 + 160])]
                    if not _13040 % 32:
                        mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _19076 = mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192]
                        require mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192] = mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192]
                        _19171 = mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19076 + 192]
                        mem[_13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19076 + 192])] = mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19076 + 224 len ceil32(mem[_13040 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19076 + 192])]
                        if not _19171 % 32:
                            if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len mem[_13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19171 + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        else:
                            mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + -(_19171 % 32) + 256 len _19171 % 32]
                            if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len mem[_13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19171) + _13040 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + -(_13040 % 32) + 224 len _13040 % 32]
                        mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _19123 = mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224]
                        _19202 = mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19123 + 224]
                        mem[floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19123 + 224])] = mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19123 + 256 len ceil32(mem[floor32(_13040) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19123 + 224])]
                        if not _19202 % 32:
                            if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19202 + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        else:
                            mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + -(_19202 % 32) + 288 len _19202 % 32]
                            if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19202) + floor32(_13040) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                    return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 261 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _6374 + _38 + (4 * ceil32(return_data.size)) + 160
                require return_data.size >= 32
                _13005 = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160]
                require mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                require mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                require return_data.size >= mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160] = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160]
                _13051 = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13005 + 160]
                mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13005 + 160])] = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13005 + 192 len ceil32(mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13005 + 160])]
                if not _13051 % 32:
                    mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _19073 = mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192]
                    require mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                    require mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                    require return_data.size >= mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                    mem[_13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192] = mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192]
                    _19169 = mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19073 + 192]
                    mem[_13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19073 + 192])] = mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19073 + 224 len ceil32(mem[_13051 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19073 + 192])]
                    if not _19169 % 32:
                        if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len mem[_13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19169 + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                    else:
                        mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + -(_19169 % 32) + 256 len _19169 % 32]
                        if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len mem[_13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19169) + _13051 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + -(_13051 % 32) + 224 len _13051 % 32]
                    mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _19121 = mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224]
                    require mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224]
                    _19201 = mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19121 + 224]
                    mem[floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19121 + 224])] = mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19121 + 256 len ceil32(mem[floor32(_13051) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19121 + 224])]
                    if not _19201 % 32:
                        if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19201 + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + -(_19201 % 32) + 288 len _19201 % 32]
                        if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19201) + floor32(_13051) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
            if not Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _6374 + _38 + (4 * ceil32(return_data.size)) + 160
                require return_data.size >= 32
                _13008 = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160]
                require mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                require mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                require return_data.size >= mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160] = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160]
                _13053 = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13008 + 160]
                mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13008 + 160])] = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13008 + 192 len ceil32(mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13008 + 160])]
                if not _13053 % 32:
                    mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _19082 = mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192]
                    require mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                    require mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                    require return_data.size >= mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                    mem[_13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192] = mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192]
                    _19175 = mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19082 + 192]
                    mem[_13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19082 + 192])] = mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19082 + 224 len ceil32(mem[_13053 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19082 + 192])]
                    if not _19175 % 32:
                        if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len mem[_13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19175 + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                    else:
                        mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + -(_19175 % 32) + 256 len _19175 % 32]
                        if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len mem[_13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19175) + _13053 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + -(_13053 % 32) + 224 len _13053 % 32]
                    mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _19127 = mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224]
                    require mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224]
                    _19204 = mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19127 + 224]
                    mem[floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19127 + 224])] = mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19127 + 256 len ceil32(mem[floor32(_13053) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19127 + 224])]
                    if not _19204 % 32:
                        if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19204 + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + -(_19204 % 32) + 288 len _19204 % 32]
                        if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19204) + floor32(_13053) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                revert with 0, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 261 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = _6374 + _38 + (4 * ceil32(return_data.size)) + 160
            require return_data.size >= 32
            _13024 = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160]
            require mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
            require mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
            require return_data.size >= mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
            mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160] = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + mem[_6374 + _38 + (2 * ceil32(return_data.size)) + 160] + 160]
            _13064 = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13024 + 160]
            mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13024 + 160])] = mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13024 + 192 len ceil32(mem[_6374 + _38 + (2 * ceil32(return_data.size)) + _13024 + 160])]
            if not _13064 % 32:
                mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _19079 = mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192]
                require mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[_13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192] = mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] + 192]
                _19173 = mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19079 + 192]
                mem[_13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19079 + 192])] = mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19079 + 224 len ceil32(mem[_13064 + _6374 + _38 + (4 * ceil32(return_data.size)) + _19079 + 192])]
                if not _19173 % 32:
                    if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len mem[_13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19173 + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 325 len 31]
                else:
                    mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + -(_19173 % 32) + 256 len _19173 % 32]
                    if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 224 len mem[_13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 192]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19173) + _13064 + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
            else:
                mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + -(_13064 % 32) + 224 len _13064 % 32]
                mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _19125 = mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224]
                require mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + 224] + 224]
                _19203 = mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19125 + 224]
                mem[floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19125 + 224])] = mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19125 + 256 len ceil32(mem[floor32(_13064) + _6374 + _38 + (4 * ceil32(return_data.size)) + _19125 + 224])]
                if not _19203 % 32:
                    if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19203 + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + -(_19203 % 32) + 288 len _19203 % 32]
                    if sha3(mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 192 len mem[_6374 + _38 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19203) + floor32(_13064) + _6374 + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
        else:
            mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + -(_6374 % 32) + 192 len _6374 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_38 + (2 * ceil32(return_data.size)) + 160 len mem[_38 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_d4384dbeAddress)
                    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args wNativeAddress, usdcTokenAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getReserves() with:
                            gas gas_remaining wei
                    mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _13011 = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192]
                    require mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                    require mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                    mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192]
                    _13055 = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13011 + 192]
                    mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13011 + 192])] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13011 + 224 len ceil32(mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13011 + 192])]
                    if not _13055 % 32:
                        mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _19088 = mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224]
                        require mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[_13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224] = mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224]
                        _19179 = mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19088 + 224]
                        mem[_13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19088 + 224])] = mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19088 + 256 len ceil32(mem[_13055 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19088 + 224])]
                        if not _19179 % 32:
                            if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len mem[_13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19179 + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        else:
                            mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + -(_19179 % 32) + 288 len _19179 % 32]
                            if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len mem[_13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19179) + _13055 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + -(_13055 % 32) + 256 len _13055 % 32]
                        mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256
                        require return_data.size >= 32
                        _19131 = mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256]
                        require mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                        require mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                        mem[floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256]
                        _19206 = mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19131 + 256]
                        mem[floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19131 + 256])] = mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19131 + 288 len ceil32(mem[floor32(_13055) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19131 + 256])]
                        if not _19206 % 32:
                            if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19206 + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        else:
                            mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + -(_19206 % 32) + 320 len _19206 % 32]
                            if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19206) + floor32(_13055) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                    ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                    return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 293 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _13026 = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192]
                require mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192]
                _13065 = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13026 + 192]
                mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13026 + 192])] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13026 + 224 len ceil32(mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13026 + 192])]
                if not _13065 % 32:
                    mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _19085 = mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224]
                    require mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[_13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224] = mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224]
                    _19177 = mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19085 + 224]
                    mem[_13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19085 + 224])] = mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19085 + 256 len ceil32(mem[_13065 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19085 + 224])]
                    if not _19177 % 32:
                        if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len mem[_13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19177 + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + -(_19177 % 32) + 288 len _19177 % 32]
                        if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len mem[_13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19177) + _13065 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + -(_13065 % 32) + 256 len _13065 % 32]
                    mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256
                    require return_data.size >= 32
                    _19129 = mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256]
                    require mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256]
                    _19205 = mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19129 + 256]
                    mem[floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19129 + 256])] = mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19129 + 288 len ceil32(mem[floor32(_13065) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19129 + 256])]
                    if not _19205 % 32:
                        if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19205 + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + -(_19205 % 32) + 320 len _19205 % 32]
                        if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19205) + floor32(_13065) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
            if not Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _13029 = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192]
                require mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192]
                _13067 = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13029 + 192]
                mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13029 + 192])] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13029 + 224 len ceil32(mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13029 + 192])]
                if not _13067 % 32:
                    mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _19094 = mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224]
                    require mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[_13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224] = mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224]
                    _19183 = mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19094 + 224]
                    mem[_13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19094 + 224])] = mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19094 + 256 len ceil32(mem[_13067 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19094 + 224])]
                    if not _19183 % 32:
                        if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len mem[_13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19183 + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + -(_19183 % 32) + 288 len _19183 % 32]
                        if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len mem[_13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19183) + _13067 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + -(_13067 % 32) + 256 len _13067 % 32]
                    mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256
                    require return_data.size >= 32
                    _19135 = mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256]
                    require mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256]
                    _19208 = mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19135 + 256]
                    mem[floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19135 + 256])] = mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19135 + 288 len ceil32(mem[floor32(_13067) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19135 + 256])]
                    if not _19208 % 32:
                        if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19208 + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + -(_19208 % 32) + 320 len _19208 % 32]
                        if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19208) + floor32(_13067) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                revert with 0, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 293 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _13043 = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192]
            require mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
            require mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
            require return_data.size >= mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
            mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + 192] + 192]
            _13078 = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13043 + 192]
            mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13043 + 192])] = mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13043 + 224 len ceil32(mem[floor32(_6374) + _38 + (2 * ceil32(return_data.size)) + _13043 + 192])]
            if not _13078 % 32:
                mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _19091 = mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224]
                require mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[_13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224] = mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] + 224]
                _19181 = mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19091 + 224]
                mem[_13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19091 + 224])] = mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19091 + 256 len ceil32(mem[_13078 + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19091 + 224])]
                if not _19181 % 32:
                    if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len mem[_13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19181 + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + -(_19181 % 32) + 288 len _19181 % 32]
                    if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256 len mem[_13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19181) + _13078 + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
            else:
                mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + -(_13078 % 32) + 256 len _13078 % 32]
                mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                _19133 = mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256]
                require mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                require mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                mem[floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 256] + 256]
                _19207 = mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19133 + 256]
                mem[floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19133 + 256])] = mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19133 + 288 len ceil32(mem[floor32(_13078) + floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + _19133 + 256])]
                if not _19207 % 32:
                    if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19207 + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + -(_19207 % 32) + 320 len _19207 % 32]
                    if sha3(mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_6374) + _38 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19207) + floor32(_13078) + floor32(_6374) + _38 + (6 * ceil32(return_data.size)) + 421 len 31]
    else:
        mem[floor32(_38) + ceil32(return_data.size) + 128] = mem[floor32(_38) + ceil32(return_data.size) + -(_38 % 32) + 160 len _38 % 32]
        mem[floor32(_38) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_38) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        _6371 = mem[floor32(_38) + ceil32(return_data.size) + 160]
        require mem[floor32(_38) + ceil32(return_data.size) + 160] <= 4294967296
        require mem[floor32(_38) + ceil32(return_data.size) + 160] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_38) + ceil32(return_data.size) + mem[floor32(_38) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_38) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_38) + ceil32(return_data.size) + mem[floor32(_38) + ceil32(return_data.size) + 160] + 160] <= 4294967296
        mem[floor32(_38) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_38) + ceil32(return_data.size) + mem[floor32(_38) + ceil32(return_data.size) + 160] + 160]
        _6376 = mem[floor32(_38) + ceil32(return_data.size) + _6371 + 160]
        mem[floor32(_38) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_38) + ceil32(return_data.size) + _6371 + 160])] = mem[floor32(_38) + ceil32(return_data.size) + _6371 + 192 len ceil32(mem[floor32(_38) + ceil32(return_data.size) + _6371 + 160])]
        if not _6376 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_38) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_38) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_d4384dbeAddress)
                    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args wNativeAddress, usdcTokenAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getReserves() with:
                            gas gas_remaining wei
                    mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _12998 = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192]
                    require mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                    require mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                    require return_data.size >= mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                    mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192] = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192]
                    _13046 = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _12998 + 192]
                    mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _12998 + 192])] = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _12998 + 224 len ceil32(mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _12998 + 192])]
                    if not _13046 % 32:
                        mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _19100 = mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224]
                        require mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[_13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224] = mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224]
                        _19187 = mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19100 + 224]
                        mem[_13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19100 + 224])] = mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19100 + 256 len ceil32(mem[_13046 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19100 + 224])]
                        if not _19187 % 32:
                            if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len mem[_13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19187 + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        else:
                            mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19187 % 32) + 288 len _19187 % 32]
                            if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len mem[_13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19187) + _13046 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + -(_13046 % 32) + 256 len _13046 % 32]
                        mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256
                        require return_data.size >= 32
                        _19139 = mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256]
                        require mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                        require mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                        mem[floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256]
                        _19210 = mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19139 + 256]
                        mem[floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19139 + 256])] = mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19139 + 288 len ceil32(mem[floor32(_13046) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19139 + 256])]
                        if not _19210 % 32:
                            if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19210 + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        else:
                            mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19210 % 32) + 320 len _19210 % 32]
                            if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19210) + floor32(_13046) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                    return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 293 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _13014 = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192]
                require mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192] = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192]
                _13057 = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13014 + 192]
                mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13014 + 192])] = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13014 + 224 len ceil32(mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13014 + 192])]
                if not _13057 % 32:
                    mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _19097 = mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224]
                    require mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[_13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224] = mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224]
                    _19185 = mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19097 + 224]
                    mem[_13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19097 + 224])] = mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19097 + 256 len ceil32(mem[_13057 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19097 + 224])]
                    if not _19185 % 32:
                        if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len mem[_13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19185 + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19185 % 32) + 288 len _19185 % 32]
                        if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len mem[_13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19185) + _13057 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + -(_13057 % 32) + 256 len _13057 % 32]
                    mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256
                    require return_data.size >= 32
                    _19137 = mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256]
                    require mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256]
                    _19209 = mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19137 + 256]
                    mem[floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19137 + 256])] = mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19137 + 288 len ceil32(mem[floor32(_13057) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19137 + 256])]
                    if not _19209 % 32:
                        if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19209 + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19209 % 32) + 320 len _19209 % 32]
                        if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19209) + floor32(_13057) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
            if not Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _13017 = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192]
                require mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192] = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192]
                _13059 = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13017 + 192]
                mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13017 + 192])] = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13017 + 224 len ceil32(mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13017 + 192])]
                if not _13059 % 32:
                    mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _19106 = mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224]
                    require mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[_13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224] = mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224]
                    _19191 = mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19106 + 224]
                    mem[_13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19106 + 224])] = mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19106 + 256 len ceil32(mem[_13059 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19106 + 224])]
                    if not _19191 % 32:
                        if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len mem[_13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19191 + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19191 % 32) + 288 len _19191 % 32]
                        if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len mem[_13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19191) + _13059 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + -(_13059 % 32) + 256 len _13059 % 32]
                    mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256
                    require return_data.size >= 32
                    _19143 = mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256]
                    require mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256]
                    _19212 = mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19143 + 256]
                    mem[floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19143 + 256])] = mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19143 + 288 len ceil32(mem[floor32(_13059) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19143 + 256])]
                    if not _19212 % 32:
                        if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19212 + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19212 % 32) + 320 len _19212 % 32]
                        if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19212) + floor32(_13059) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                revert with 0, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 293 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            _13032 = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192]
            require mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
            require mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
            require return_data.size >= mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
            mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192] = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + 192] + 192]
            _13069 = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13032 + 192]
            mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13032 + 192])] = mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13032 + 224 len ceil32(mem[_6376 + floor32(_38) + (2 * ceil32(return_data.size)) + _13032 + 192])]
            if not _13069 % 32:
                mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _19103 = mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224]
                require mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[_13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224] = mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] + 224]
                _19189 = mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19103 + 224]
                mem[_13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19103 + 224])] = mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19103 + 256 len ceil32(mem[_13069 + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19103 + 224])]
                if not _19189 % 32:
                    if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len mem[_13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19189 + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19189 % 32) + 288 len _19189 % 32]
                    if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256 len mem[_13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19189) + _13069 + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
            else:
                mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + -(_13069 % 32) + 256 len _13069 % 32]
                mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                _19141 = mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256]
                require mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                require mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                mem[floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256]
                _19211 = mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19141 + 256]
                mem[floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19141 + 256])] = mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19141 + 288 len ceil32(mem[floor32(_13069) + _6376 + floor32(_38) + (4 * ceil32(return_data.size)) + _19141 + 256])]
                if not _19211 % 32:
                    if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19211 + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19211 % 32) + 320 len _19211 % 32]
                    if sha3(mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 224 len mem[_6376 + floor32(_38) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19211) + floor32(_13069) + _6376 + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
        else:
            mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + -(_6376 % 32) + 224 len _6376 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[floor32(_38) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_38) + (2 * ceil32(return_data.size)) + 160]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_d4384dbeAddress)
                    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args wNativeAddress, usdcTokenAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getReserves() with:
                            gas gas_remaining wei
                    mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _13020 = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224]
                    require mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224]
                    _13061 = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13020 + 224]
                    mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13020 + 224])] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13020 + 256 len ceil32(mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13020 + 224])]
                    if not _13061 % 32:
                        mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256
                        require return_data.size >= 32
                        _19112 = mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256]
                        require mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                        require mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                        require return_data.size >= mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                        mem[_13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256]
                        _19195 = mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19112 + 256]
                        mem[_13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19112 + 256])] = mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19112 + 288 len ceil32(mem[_13061 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19112 + 256])]
                        if not _19195 % 32:
                            if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[_13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19195 + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        else:
                            mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19195 % 32) + 320 len _19195 % 32]
                            if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[_13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19195) + _13061 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    else:
                        mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + -(_13061 % 32) + 288 len _13061 % 32]
                        mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288
                        require return_data.size >= 32
                        _19147 = mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288]
                        require mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                        require mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                        mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288]
                        _19214 = mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19147 + 288]
                        mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19147 + 288])] = mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19147 + 320 len ceil32(mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19147 + 288])]
                        if not _19214 % 32:
                            if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19214 + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        else:
                            mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19214 % 32) + 352 len _19214 % 32]
                            if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        if not 2 * ext_call.return_data[0]:
                                            return 0
                                        if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                        return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                    return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19214) + floor32(_13061) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                    ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                    return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 325 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _13034 = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224]
                require mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224]
                _13070 = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13034 + 224]
                mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13034 + 224])] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13034 + 256 len ceil32(mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13034 + 224])]
                if not _13070 % 32:
                    mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256
                    require return_data.size >= 32
                    _19109 = mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256]
                    require mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[_13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256]
                    _19193 = mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19109 + 256]
                    mem[_13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19109 + 256])] = mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19109 + 288 len ceil32(mem[_13070 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19109 + 256])]
                    if not _19193 % 32:
                        if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[_13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19193 + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19193 % 32) + 320 len _19193 % 32]
                        if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[_13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19193) + _13070 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                else:
                    mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + -(_13070 % 32) + 288 len _13070 % 32]
                    mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288
                    require return_data.size >= 32
                    _19145 = mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288]
                    require mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                    require mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                    mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288]
                    _19213 = mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19145 + 288]
                    mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19145 + 288])] = mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19145 + 320 len ceil32(mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19145 + 288])]
                    if not _19213 % 32:
                        if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19213 + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    else:
                        mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19213 % 32) + 352 len _19213 % 32]
                        if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                    return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19213) + floor32(_13070) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) / 20 / 10^18)
            if not Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _13037 = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224]
                require mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224]
                _13072 = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13037 + 224]
                mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13037 + 224])] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13037 + 256 len ceil32(mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13037 + 224])]
                if not _13072 % 32:
                    mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256
                    require return_data.size >= 32
                    _19118 = mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256]
                    require mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[_13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256]
                    _19199 = mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19118 + 256]
                    mem[_13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19118 + 256])] = mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19118 + 288 len ceil32(mem[_13072 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19118 + 256])]
                    if not _19199 % 32:
                        if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[_13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19199 + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19199 % 32) + 320 len _19199 % 32]
                        if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[_13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19199) + _13072 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                else:
                    mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + -(_13072 % 32) + 288 len _13072 % 32]
                    mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288
                    require return_data.size >= 32
                    _19151 = mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288]
                    require mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                    require mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                    mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288]
                    _19216 = mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19151 + 288]
                    mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19151 + 288])] = mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19151 + 320 len ceil32(mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19151 + 288])]
                    if not _19216 % 32:
                        if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19216 + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    else:
                        mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19216 % 32) + 352 len _19216 % 32]
                        if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    if not 2 * ext_call.return_data[0]:
                                        return 0
                                    if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                    return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19216) + floor32(_13072) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
                return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                revert with 0, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 325 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224
            require return_data.size >= 32
            _13049 = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224]
            require mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
            require mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
            require return_data.size >= mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
            mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + 224] + 224]
            _13084 = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13049 + 224]
            mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13049 + 224])] = mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13049 + 256 len ceil32(mem[floor32(_6376) + floor32(_38) + (2 * ceil32(return_data.size)) + _13049 + 224])]
            if not _13084 % 32:
                mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                _19115 = mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256]
                require mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                require mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                require return_data.size >= mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                mem[_13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256] = mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] + 256]
                _19197 = mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19115 + 256]
                mem[_13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19115 + 256])] = mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19115 + 288 len ceil32(mem[_13084 + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19115 + 256])]
                if not _19197 % 32:
                    if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[_13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19197 + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19197 % 32) + 320 len _19197 % 32]
                    if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288 len mem[_13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19197) + _13084 + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
            else:
                mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + -(_13084 % 32) + 288 len _13084 % 32]
                mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288
                require return_data.size >= 32
                _19149 = mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288]
                require mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                require mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 288] + 288]
                _19215 = mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19149 + 288]
                mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19149 + 288])] = mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19149 + 320 len ceil32(mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + _19149 + 288])]
                if not _19215 % 32:
                    if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_19215 + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 421 len 31]
                else:
                    mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + -(_19215 % 32) + 352 len _19215 % 32]
                    if sha3(mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_6376) + floor32(_38) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 288]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                if not 2 * ext_call.return_data[0]:
                                    return 0
                                if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            if not 2 * ext_call.return_data[0]:
                                return 0
                            if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return ((ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        if not 2 * ext_call.return_data[0]:
                            return 0
                        if (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return ((ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    if not 2 * ext_call.return_data[0]:
                        return 0
                    if (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 2 * ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_19215) + floor32(_13084) + floor32(_6376) + floor32(_38) + (6 * ceil32(return_data.size)) + 453 len 31]
    ('eq', ('div', ('add', ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))))), ('mul', ('ext_call.return_data', 0, 32), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))), ('mask_shl', 255, 0, 1, ('ext_call.return_data', 0, 32))), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
    return ((ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + (ext_call.return_data[0] * 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) / 20 / 10^18)
}

function sub_b51b805b(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, sub_abc7e0dfAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[12 len 20]:
        require ext_code.size(sub_abc7e0dfAddress)
        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                gas gas_remaining wei
               args arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            return 0
        if 1112 * ext_call.return_data[0] / ext_call.return_data[0] != 1112:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        return (1112 * ext_call.return_data[0] / 10^18)
    require ext_code.size(sub_d4384dbeAddress)
    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args wNativeAddress, sub_abc7e0dfAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _27 = mem[96]
    require mem[96] <= 4294967296
    require mem[96] + 32 <= return_data.size
    require return_data.size >= mem[mem[96] + 96] + mem[96] + 32 and mem[mem[96] + 96] <= 4294967296
    mem[ceil32(return_data.size) + 96] = mem[mem[96] + 96]
    _34 = mem[_27 + 96]
    mem[ceil32(return_data.size) + 128 len ceil32(mem[_27 + 96])] = mem[_27 + 128 len ceil32(mem[_27 + 96])]
    if not _34 % 32:
        mem[_34 + ceil32(return_data.size) + 128] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(wNativeAddress)
        staticcall wNativeAddress.0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_34 + ceil32(return_data.size) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _34 + (2 * ceil32(return_data.size)) + 128
        require return_data.size >= 32
        _8410 = mem[_34 + ceil32(return_data.size) + 128]
        require mem[_34 + ceil32(return_data.size) + 128] <= 4294967296
        require mem[_34 + ceil32(return_data.size) + 128] + 32 <= return_data.size
        require return_data.size >= mem[_34 + ceil32(return_data.size) + mem[_34 + ceil32(return_data.size) + 128] + 128] + mem[_34 + ceil32(return_data.size) + 128] + 32 and mem[_34 + ceil32(return_data.size) + mem[_34 + ceil32(return_data.size) + 128] + 128] <= 4294967296
        mem[_34 + (2 * ceil32(return_data.size)) + 128] = mem[_34 + ceil32(return_data.size) + mem[_34 + ceil32(return_data.size) + 128] + 128]
        _8416 = mem[_34 + ceil32(return_data.size) + _8410 + 128]
        mem[_34 + (2 * ceil32(return_data.size)) + 160 len ceil32(mem[_34 + ceil32(return_data.size) + _8410 + 128])] = mem[_34 + ceil32(return_data.size) + _8410 + 160 len ceil32(mem[_34 + ceil32(return_data.size) + _8410 + 128])]
        if not _8416 % 32:
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_34 + (2 * ceil32(return_data.size)) + 160 len mem[_34 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_d4384dbeAddress)
                    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args wNativeAddress, usdcTokenAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getReserves() with:
                            gas gas_remaining wei
                    mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _8416 + _34 + (4 * ceil32(return_data.size)) + 160
                    require return_data.size >= 32
                    _17080 = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160]
                    require mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                    require mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                    require return_data.size >= mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                    mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160] = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160]
                    _17130 = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17080 + 160]
                    mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17080 + 160])] = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17080 + 192 len ceil32(mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17080 + 160])]
                    if not _17130 % 32:
                        mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        _25214 = mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192]
                        require mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                        require mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                        require return_data.size >= mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                        mem[_17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192] = mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192]
                        _25309 = mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25214 + 192]
                        mem[_17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25214 + 192])] = mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25214 + 224 len ceil32(mem[_17130 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25214 + 192])]
                        if not _25309 % 32:
                            if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len mem[_17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        require ext_code.size(sub_abc7e0dfAddress)
                                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            return 0
                                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25309 + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        else:
                            mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + -(_25309 % 32) + 256 len _25309 % 32]
                            if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len mem[_17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        require ext_code.size(sub_abc7e0dfAddress)
                                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            return 0
                                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25309) + _17130 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + -(_17130 % 32) + 224 len _17130 % 32]
                        mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224
                        require return_data.size >= 32
                        _25261 = mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224]
                        require mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224]
                        _25340 = mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25261 + 224]
                        mem[floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25261 + 224])] = mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25261 + 256 len ceil32(mem[floor32(_17130) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25261 + 224])]
                        if not _25340 % 32:
                            if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        require ext_code.size(sub_abc7e0dfAddress)
                                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            return 0
                                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25340 + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        else:
                            mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + -(_25340 % 32) + 288 len _25340 % 32]
                            if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        require ext_code.size(sub_abc7e0dfAddress)
                                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            return 0
                                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25340) + floor32(_17130) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 261 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _8416 + _34 + (4 * ceil32(return_data.size)) + 160
                require return_data.size >= 32
                _17095 = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160]
                require mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                require mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                require return_data.size >= mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160] = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160]
                _17141 = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17095 + 160]
                mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17095 + 160])] = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17095 + 192 len ceil32(mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17095 + 160])]
                if not _17141 % 32:
                    mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _25211 = mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192]
                    require mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                    require mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                    require return_data.size >= mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                    mem[_17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192] = mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192]
                    _25307 = mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25211 + 192]
                    mem[_17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25211 + 192])] = mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25211 + 224 len ceil32(mem[_17141 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25211 + 192])]
                    if not _25307 % 32:
                        if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len mem[_17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25307 + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                    else:
                        mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + -(_25307 % 32) + 256 len _25307 % 32]
                        if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len mem[_17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25307) + _17141 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + -(_17141 % 32) + 224 len _17141 % 32]
                    mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _25259 = mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224]
                    require mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224]
                    _25339 = mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25259 + 224]
                    mem[floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25259 + 224])] = mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25259 + 256 len ceil32(mem[floor32(_17141) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25259 + 224])]
                    if not _25339 % 32:
                        if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25339 + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + -(_25339 % 32) + 288 len _25339 % 32]
                        if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25339) + floor32(_17141) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
            if not Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _8416 + _34 + (4 * ceil32(return_data.size)) + 160
                require return_data.size >= 32
                _17098 = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160]
                require mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
                require mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
                require return_data.size >= mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
                mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160] = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160]
                _17143 = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17098 + 160]
                mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17098 + 160])] = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17098 + 192 len ceil32(mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17098 + 160])]
                if not _17143 % 32:
                    mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _25220 = mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192]
                    require mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                    require mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                    require return_data.size >= mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                    mem[_17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192] = mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192]
                    _25313 = mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25220 + 192]
                    mem[_17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25220 + 192])] = mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25220 + 224 len ceil32(mem[_17143 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25220 + 192])]
                    if not _25313 % 32:
                        if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len mem[_17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25313 + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                    else:
                        mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + -(_25313 % 32) + 256 len _25313 % 32]
                        if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len mem[_17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25313) + _17143 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + -(_17143 % 32) + 224 len _17143 % 32]
                    mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _25265 = mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224]
                    require mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224]
                    _25342 = mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25265 + 224]
                    mem[floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25265 + 224])] = mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25265 + 256 len ceil32(mem[floor32(_17143) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25265 + 224])]
                    if not _25342 % 32:
                        if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25342 + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + -(_25342 % 32) + 288 len _25342 % 32]
                        if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25342) + floor32(_17143) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                revert with 0, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 261 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = _8416 + _34 + (4 * ceil32(return_data.size)) + 160
            require return_data.size >= 32
            _17114 = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160]
            require mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] <= 4294967296
            require mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 32 <= return_data.size
            require return_data.size >= mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160] + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 32 and mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160] <= 4294967296
            mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160] = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + mem[_8416 + _34 + (2 * ceil32(return_data.size)) + 160] + 160]
            _17154 = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17114 + 160]
            mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len ceil32(mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17114 + 160])] = mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17114 + 192 len ceil32(mem[_8416 + _34 + (2 * ceil32(return_data.size)) + _17114 + 160])]
            if not _17154 % 32:
                mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _25217 = mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192]
                require mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192] + mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 32 and mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[_17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192] = mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] + 192]
                _25311 = mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25217 + 192]
                mem[_17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len ceil32(mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25217 + 192])] = mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25217 + 224 len ceil32(mem[_17154 + _8416 + _34 + (4 * ceil32(return_data.size)) + _25217 + 192])]
                if not _25311 % 32:
                    if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len mem[_17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25311 + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 325 len 31]
                else:
                    mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + -(_25311 % 32) + 256 len _25311 % 32]
                    if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[_17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 224 len mem[_17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 192]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25311) + _17154 + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
            else:
                mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + -(_17154 % 32) + 224 len _17154 % 32]
                mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _25263 = mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224]
                require mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224] = mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + 224] + 224]
                _25341 = mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25263 + 224]
                mem[floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25263 + 224])] = mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25263 + 256 len ceil32(mem[floor32(_17154) + _8416 + _34 + (4 * ceil32(return_data.size)) + _25263 + 224])]
                if not _25341 % 32:
                    if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25341 + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + -(_25341 % 32) + 288 len _25341 % 32]
                    if sha3(mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 192 len mem[_8416 + _34 + (4 * ceil32(return_data.size)) + 160]]) == sha3(mem[floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 256 len mem[floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25341) + floor32(_17154) + _8416 + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
        else:
            mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + -(_8416 % 32) + 192 len _8416 % 32]
            if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) == sha3(mem[_34 + (2 * ceil32(return_data.size)) + 160 len mem[_34 + (2 * ceil32(return_data.size)) + 128]]):
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_d4384dbeAddress)
                    staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                            gas gas_remaining wei
                           args wNativeAddress, usdcTokenAddress
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getReserves() with:
                            gas gas_remaining wei
                    mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _17101 = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192]
                    require mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                    require mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                    mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192]
                    _17145 = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17101 + 192]
                    mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17101 + 192])] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17101 + 224 len ceil32(mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17101 + 192])]
                    if not _17145 % 32:
                        mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _25226 = mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224]
                        require mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                        require mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                        require return_data.size >= mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                        mem[_17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224] = mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224]
                        _25317 = mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25226 + 224]
                        mem[_17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25226 + 224])] = mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25226 + 256 len ceil32(mem[_17145 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25226 + 224])]
                        if not _25317 % 32:
                            if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len mem[_17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        require ext_code.size(sub_abc7e0dfAddress)
                                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            return 0
                                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25317 + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        else:
                            mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + -(_25317 % 32) + 288 len _25317 % 32]
                            if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len mem[_17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        require ext_code.size(sub_abc7e0dfAddress)
                                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            return 0
                                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25317) + _17145 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + -(_17145 % 32) + 256 len _17145 % 32]
                        mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                        require ext_code.size(wNativeAddress)
                        staticcall wNativeAddress.0x95d89b41 with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        _25269 = mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256]
                        require mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                        require mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                        require return_data.size >= mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                        mem[floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256]
                        _25344 = mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25269 + 256]
                        mem[floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25269 + 256])] = mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25269 + 288 len ceil32(mem[floor32(_17145) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25269 + 256])]
                        if not _25344 % 32:
                            if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        require ext_code.size(sub_abc7e0dfAddress)
                                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            return 0
                                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25344 + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        else:
                            mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + -(_25344 % 32) + 320 len _25344 % 32]
                            if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256]]):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require 0 / Mask(112, 0, ext_call.return_data[0])
                                        require ext_code.size(sub_abc7e0dfAddress)
                                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                                gas gas_remaining wei
                                               args arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            return 0
                                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[32])
                                if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25344) + floor32(_17145) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                    ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 293 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _17116 = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192]
                require mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192]
                _17155 = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17116 + 192]
                mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17116 + 192])] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17116 + 224 len ceil32(mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17116 + 192])]
                if not _17155 % 32:
                    mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224
                    require return_data.size >= 32
                    _25223 = mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224]
                    require mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[_17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224] = mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224]
                    _25315 = mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25223 + 224]
                    mem[_17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25223 + 224])] = mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25223 + 256 len ceil32(mem[_17155 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25223 + 224])]
                    if not _25315 % 32:
                        if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len mem[_17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25315 + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + -(_25315 % 32) + 288 len _25315 % 32]
                        if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len mem[_17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25315) + _17155 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + -(_17155 % 32) + 256 len _17155 % 32]
                    mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256
                    require return_data.size >= 32
                    _25267 = mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256]
                    require mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256]
                    _25343 = mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25267 + 256]
                    mem[floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25267 + 256])] = mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25267 + 288 len ceil32(mem[floor32(_17155) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25267 + 256])]
                    if not _25343 % 32:
                        if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25343 + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + -(_25343 % 32) + 320 len _25343 % 32]
                        if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25343) + floor32(_17155) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
            if not Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _17119 = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192]
                require mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192]
                _17157 = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17119 + 192]
                mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17119 + 192])] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17119 + 224 len ceil32(mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17119 + 192])]
                if not _17157 % 32:
                    mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _25232 = mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224]
                    require mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[_17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224] = mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224]
                    _25321 = mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25232 + 224]
                    mem[_17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25232 + 224])] = mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25232 + 256 len ceil32(mem[_17157 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25232 + 224])]
                    if not _25321 % 32:
                        if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len mem[_17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25321 + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + -(_25321 % 32) + 288 len _25321 % 32]
                        if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len mem[_17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25321) + _17157 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + -(_17157 % 32) + 256 len _17157 % 32]
                    mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _25273 = mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256]
                    require mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256]
                    _25346 = mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25273 + 256]
                    mem[floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25273 + 256])] = mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25273 + 288 len ceil32(mem[floor32(_17157) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25273 + 256])]
                    if not _25346 % 32:
                        if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25346 + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + -(_25346 % 32) + 320 len _25346 % 32]
                        if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25346) + floor32(_17157) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                revert with 0, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 293 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _17133 = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192]
            require mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] <= 4294967296
            require mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
            require return_data.size >= mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192] + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 32 and mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
            mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + 192] + 192]
            _17168 = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17133 + 192]
            mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17133 + 192])] = mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17133 + 224 len ceil32(mem[floor32(_8416) + _34 + (2 * ceil32(return_data.size)) + _17133 + 192])]
            if not _17168 % 32:
                mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _25229 = mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224]
                require mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[_17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224] = mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] + 224]
                _25319 = mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25229 + 224]
                mem[_17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25229 + 224])] = mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25229 + 256 len ceil32(mem[_17168 + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25229 + 224])]
                if not _25319 % 32:
                    if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len mem[_17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25319 + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + -(_25319 % 32) + 288 len _25319 % 32]
                    if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256 len mem[_17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25319) + _17168 + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
            else:
                mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + -(_17168 % 32) + 256 len _17168 % 32]
                mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                _25271 = mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256]
                require mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                require mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                mem[floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 256] + 256]
                _25345 = mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25271 + 256]
                mem[floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25271 + 256])] = mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25271 + 288 len ceil32(mem[floor32(_17168) + floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + _25271 + 256])]
                if not _25345 % 32:
                    if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25345 + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + -(_25345 % 32) + 320 len _25345 % 32]
                    if sha3(mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 224 len mem[floor32(_8416) + _34 + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25345) + floor32(_17168) + floor32(_8416) + _34 + (6 * ceil32(return_data.size)) + 421 len 31]
        ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
    mem[floor32(_34) + ceil32(return_data.size) + 128] = mem[floor32(_34) + ceil32(return_data.size) + -(_34 % 32) + 160 len _34 % 32]
    mem[floor32(_34) + ceil32(return_data.size) + 160] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
    require ext_code.size(wNativeAddress)
    staticcall wNativeAddress.0x95d89b41 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[floor32(_34) + ceil32(return_data.size) + 160 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = floor32(_34) + (2 * ceil32(return_data.size)) + 160
    require return_data.size >= 32
    _8413 = mem[floor32(_34) + ceil32(return_data.size) + 160]
    require mem[floor32(_34) + ceil32(return_data.size) + 160] <= 4294967296
    require mem[floor32(_34) + ceil32(return_data.size) + 160] + 32 <= return_data.size
    require return_data.size >= mem[floor32(_34) + ceil32(return_data.size) + mem[floor32(_34) + ceil32(return_data.size) + 160] + 160] + mem[floor32(_34) + ceil32(return_data.size) + 160] + 32 and mem[floor32(_34) + ceil32(return_data.size) + mem[floor32(_34) + ceil32(return_data.size) + 160] + 160] <= 4294967296
    mem[floor32(_34) + (2 * ceil32(return_data.size)) + 160] = mem[floor32(_34) + ceil32(return_data.size) + mem[floor32(_34) + ceil32(return_data.size) + 160] + 160]
    _8418 = mem[floor32(_34) + ceil32(return_data.size) + _8413 + 160]
    mem[floor32(_34) + (2 * ceil32(return_data.size)) + 192 len ceil32(mem[floor32(_34) + ceil32(return_data.size) + _8413 + 160])] = mem[floor32(_34) + ceil32(return_data.size) + _8413 + 192 len ceil32(mem[floor32(_34) + ceil32(return_data.size) + _8413 + 160])]
    if not _8418 % 32:
        if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) != sha3(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 160]]):
            if not Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _17107 = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192]
                require mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
                require mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
                require return_data.size >= mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
                mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192] = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192]
                _17149 = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17107 + 192]
                mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17107 + 192])] = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17107 + 224 len ceil32(mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17107 + 192])]
                if not _17149 % 32:
                    mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _25244 = mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224]
                    require mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                    require mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                    require return_data.size >= mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                    mem[_17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224] = mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224]
                    _25329 = mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25244 + 224]
                    mem[_17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25244 + 224])] = mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25244 + 256 len ceil32(mem[_17149 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25244 + 224])]
                    if not _25329 % 32:
                        if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len mem[_17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25329 + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    else:
                        mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25329 % 32) + 288 len _25329 % 32]
                        if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len mem[_17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25329) + _17149 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + -(_17149 % 32) + 256 len _17149 % 32]
                    mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _25281 = mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256]
                    require mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256]
                    _25350 = mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25281 + 256]
                    mem[floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25281 + 256])] = mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25281 + 288 len ceil32(mem[floor32(_17149) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25281 + 256])]
                    if not _25350 % 32:
                        if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25350 + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25350 % 32) + 320 len _25350 % 32]
                        if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 0 / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25350) + floor32(_17149) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                revert with 0, 
                            32,
                            33,
                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 293 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _17122 = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192]
            require mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
            require mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
            require return_data.size >= mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
            mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192] = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192]
            _17159 = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17122 + 192]
            mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17122 + 192])] = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17122 + 224 len ceil32(mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17122 + 192])]
            if not _17159 % 32:
                mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _25241 = mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224]
                require mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[_17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224] = mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224]
                _25327 = mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25241 + 224]
                mem[_17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25241 + 224])] = mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25241 + 256 len ceil32(mem[_17159 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25241 + 224])]
                if not _25327 % 32:
                    if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len mem[_17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25327 + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25327 % 32) + 288 len _25327 % 32]
                    if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len mem[_17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25327) + _17159 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
            else:
                mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + -(_17159 % 32) + 256 len _17159 % 32]
                mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _25279 = mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256]
                require mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                require mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                mem[floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256]
                _25349 = mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25279 + 256]
                mem[floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25279 + 256])] = mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25279 + 288 len ceil32(mem[floor32(_17159) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25279 + 256])]
                if not _25349 % 32:
                    if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25349 + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25349 % 32) + 320 len _25349 % 32]
                    if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25349) + floor32(_17159) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
            ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
        if not Mask(112, 0, ext_call.return_data[32]):
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _17088 = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192]
            require mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
            require mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
            require return_data.size >= mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
            mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192] = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192]
            _17136 = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17088 + 192]
            mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17088 + 192])] = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17088 + 224 len ceil32(mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17088 + 192])]
            if not _17136 % 32:
                mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                _25238 = mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224]
                require mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[_17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224] = mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224]
                _25325 = mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25238 + 224]
                mem[_17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25238 + 224])] = mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25238 + 256 len ceil32(mem[_17136 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25238 + 224])]
                if not _25325 % 32:
                    if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len mem[_17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25325 + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                else:
                    mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25325 % 32) + 288 len _25325 % 32]
                    if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len mem[_17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25325) + _17136 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
            else:
                mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + -(_17136 % 32) + 256 len _17136 % 32]
                mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                _25277 = mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256]
                require mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                require mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                mem[floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256]
                _25348 = mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25277 + 256]
                mem[floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25277 + 256])] = mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25277 + 288 len ceil32(mem[floor32(_17136) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25277 + 256])]
                if not _25348 % 32:
                    if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25348 + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25348 % 32) + 320 len _25348 % 32]
                    if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25348) + floor32(_17136) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
            ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
            revert with 0, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 293 len 31]
        if Mask(112, 0, ext_call.return_data[0]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[0])
        require ext_code.size(sub_d4384dbeAddress)
        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                gas gas_remaining wei
               args wNativeAddress, usdcTokenAddress
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getReserves() with:
                gas gas_remaining wei
        mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192 len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192
        require return_data.size >= 32
        _17104 = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192]
        require mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] <= 4294967296
        require mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 32 <= return_data.size
        require return_data.size >= mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192] + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 32 and mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192] <= 4294967296
        mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192] = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + 192] + 192]
        _17147 = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17104 + 192]
        mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len ceil32(mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17104 + 192])] = mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17104 + 224 len ceil32(mem[_8418 + floor32(_34) + (2 * ceil32(return_data.size)) + _17104 + 192])]
        if not _17147 % 32:
            mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(wNativeAddress)
            staticcall wNativeAddress.0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224
            require return_data.size >= 32
            _25235 = mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224]
            require mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] <= 4294967296
            require mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
            require return_data.size >= mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224] + mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 32 and mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
            mem[_17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224] = mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] + 224]
            _25323 = mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25235 + 224]
            mem[_17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len ceil32(mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25235 + 224])] = mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25235 + 256 len ceil32(mem[_17147 + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25235 + 224])]
            if not _25323 % 32:
                if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len mem[_17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224]]):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_abc7e0dfAddress)
                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    return 0
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25323 + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 357 len 31]
            else:
                mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25323 % 32) + 288 len _25323 % 32]
                if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[_17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256 len mem[_17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 224]]):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_abc7e0dfAddress)
                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    return 0
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25323) + _17147 + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
        else:
            mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + -(_17147 % 32) + 256 len _17147 % 32]
            mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(wNativeAddress)
            staticcall wNativeAddress.0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256
            require return_data.size >= 32
            _25275 = mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256]
            require mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
            require mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
            require return_data.size >= mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
            mem[floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256]
            _25347 = mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25275 + 256]
            mem[floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25275 + 256])] = mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25275 + 288 len ceil32(mem[floor32(_17147) + _8418 + floor32(_34) + (4 * ceil32(return_data.size)) + _25275 + 256])]
            if not _25347 % 32:
                if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_abc7e0dfAddress)
                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    return 0
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25347 + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
            else:
                mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25347 % 32) + 320 len _25347 % 32]
                if sha3(mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 224 len mem[_8418 + floor32(_34) + (4 * ceil32(return_data.size)) + 192]]) == sha3(mem[floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_abc7e0dfAddress)
                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    return 0
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25347) + floor32(_17147) + _8418 + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
    else:
        mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 192] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + -(_8418 % 32) + 224 len _8418 % 32]
        if sha3(mem[ceil32(return_data.size) + 128 len mem[ceil32(return_data.size) + 96]]) != sha3(mem[floor32(_34) + (2 * ceil32(return_data.size)) + 192 len mem[floor32(_34) + (2 * ceil32(return_data.size)) + 160]]):
            if Mask(112, 0, ext_call.return_data[0]):
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 325 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                require ext_code.size(sub_d4384dbeAddress)
                staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                        gas gas_remaining wei
                       args wNativeAddress, usdcTokenAddress
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getReserves() with:
                        gas gas_remaining wei
                mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224
                require return_data.size >= 32
                _17139 = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224]
                require mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
                require mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
                mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224]
                _17174 = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17139 + 224]
                mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17139 + 224])] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17139 + 256 len ceil32(mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17139 + 224])]
                if not _17174 % 32:
                    mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256
                    require return_data.size >= 32
                    _25253 = mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256]
                    require mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                    require mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                    require return_data.size >= mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                    mem[_17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256]
                    _25335 = mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25253 + 256]
                    mem[_17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25253 + 256])] = mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25253 + 288 len ceil32(mem[_17174 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25253 + 256])]
                    if not _25335 % 32:
                        if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[_17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25335 + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    else:
                        mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25335 % 32) + 320 len _25335 % 32]
                        if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[_17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25335) + _17174 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                else:
                    mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + -(_17174 % 32) + 288 len _17174 % 32]
                    mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                    require ext_code.size(wNativeAddress)
                    staticcall wNativeAddress.0x95d89b41 with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    _25287 = mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288]
                    require mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                    require mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                    require return_data.size >= mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                    mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288]
                    _25353 = mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25287 + 288]
                    mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25287 + 288])] = mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25287 + 320 len ceil32(mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25287 + 288])]
                    if not _25353 % 32:
                        if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25353 + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    else:
                        mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25353 % 32) + 352 len _25353 % 32]
                        if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288]]):
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require Mask(112, 0, ext_call.return_data[0])
                                if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                    require ext_code.size(sub_abc7e0dfAddress)
                                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                            gas gas_remaining wei
                                           args arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        return 0
                                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if not Mask(112, 0, ext_call.return_data[0]):
                            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[32])
                            if not 0 / Mask(112, 0, ext_call.return_data[32]):
                                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25353) + floor32(_17174) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
                return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224
            require return_data.size >= 32
            _17127 = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224]
            require mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
            require mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
            require return_data.size >= mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
            mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224]
            _17162 = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17127 + 224]
            mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17127 + 224])] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17127 + 256 len ceil32(mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17127 + 224])]
            if not _17162 % 32:
                mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                _25256 = mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256]
                require mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                require mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                require return_data.size >= mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                mem[_17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256]
                _25337 = mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25256 + 256]
                mem[_17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25256 + 256])] = mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25256 + 288 len ceil32(mem[_17162 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25256 + 256])]
                if not _25337 % 32:
                    if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[_17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25337 + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25337 % 32) + 320 len _25337 % 32]
                    if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[_17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25337) + _17162 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
            else:
                mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + -(_17162 % 32) + 288 len _17162 % 32]
                mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288
                require return_data.size >= 32
                _25289 = mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288]
                require mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                require mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288]
                _25354 = mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25289 + 288]
                mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25289 + 288])] = mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25289 + 320 len ceil32(mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25289 + 288])]
                if not _25354 % 32:
                    if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25354 + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                else:
                    mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25354 % 32) + 352 len _25354 % 32]
                    if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[32])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[32])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[32])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[32])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25354) + floor32(_17162) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
            ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))))
            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) * ext_call.return_data[0] / 10^18)
        if not Mask(112, 0, ext_call.return_data[32]):
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            require ext_code.size(sub_d4384dbeAddress)
            staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args wNativeAddress, usdcTokenAddress
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224
            require return_data.size >= 32
            _17110 = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224]
            require mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
            require mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
            require return_data.size >= mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
            mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224]
            _17151 = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17110 + 224]
            mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17110 + 224])] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17110 + 256 len ceil32(mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17110 + 224])]
            if not _17151 % 32:
                mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256
                require return_data.size >= 32
                _25250 = mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256]
                require mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
                require mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
                require return_data.size >= mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
                mem[_17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256]
                _25333 = mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25250 + 256]
                mem[_17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25250 + 256])] = mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25250 + 288 len ceil32(mem[_17151 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25250 + 256])]
                if not _25333 % 32:
                    if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[_17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25333 + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                else:
                    mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25333 % 32) + 320 len _25333 % 32]
                    if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[_17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25333) + _17151 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
            else:
                mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + -(_17151 % 32) + 288 len _17151 % 32]
                mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
                require ext_code.size(wNativeAddress)
                staticcall wNativeAddress.0x95d89b41 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288
                require return_data.size >= 32
                _25285 = mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288]
                require mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
                require mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
                require return_data.size >= mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
                mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288]
                _25352 = mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25285 + 288]
                mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25285 + 288])] = mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25285 + 320 len ceil32(mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25285 + 288])]
                if not _25352 % 32:
                    if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25352 + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                else:
                    mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25352 % 32) + 352 len _25352 % 32]
                    if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288]]):
                        if not Mask(112, 0, ext_call.return_data[32]):
                            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require Mask(112, 0, ext_call.return_data[0])
                            if not 0 / Mask(112, 0, ext_call.return_data[0]):
                                if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require 0 / Mask(112, 0, ext_call.return_data[0])
                                require ext_code.size(sub_abc7e0dfAddress)
                                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                        gas gas_remaining wei
                                       args arg1
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    return 0
                                if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 
                                                32,
                                                33,
                                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                                return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if not Mask(112, 0, ext_call.return_data[0]):
                        if Mask(112, 0, ext_call.return_data[32]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[32])
                        if not 0 / Mask(112, 0, ext_call.return_data[32]):
                            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 0 / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 0 / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 0 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (0 / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 0 / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25352) + floor32(_17151) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
            ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', 0, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
            return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
            revert with 0, 
                        32,
                        33,
                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 325 len 31]
        if Mask(112, 0, ext_call.return_data[0]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[0])
        require ext_code.size(sub_d4384dbeAddress)
        staticcall sub_d4384dbeAddress.getPair(address arg1, address arg2) with:
                gas gas_remaining wei
               args wNativeAddress, usdcTokenAddress
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getReserves() with:
                gas gas_remaining wei
        mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224 len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x95d89b41 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224
        require return_data.size >= 32
        _17124 = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224]
        require mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] <= 4294967296
        require mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 32 <= return_data.size
        require return_data.size >= mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224] + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 32 and mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224] <= 4294967296
        mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + 224] + 224]
        _17160 = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17124 + 224]
        mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len ceil32(mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17124 + 224])] = mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17124 + 256 len ceil32(mem[floor32(_8418) + floor32(_34) + (2 * ceil32(return_data.size)) + _17124 + 224])]
        if not _17160 % 32:
            mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(wNativeAddress)
            staticcall wNativeAddress.0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256
            require return_data.size >= 32
            _25247 = mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256]
            require mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] <= 4294967296
            require mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 <= return_data.size
            require return_data.size >= mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] + mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 32 and mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256] <= 4294967296
            mem[_17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256] = mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] + 256]
            _25331 = mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25247 + 256]
            mem[_17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len ceil32(mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25247 + 256])] = mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25247 + 288 len ceil32(mem[_17160 + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25247 + 256])]
            if not _25331 % 32:
                if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[_17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_abc7e0dfAddress)
                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    return 0
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25331 + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 389 len 31]
            else:
                mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25331 % 32) + 320 len _25331 % 32]
                if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[_17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288 len mem[_17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 256]]):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_abc7e0dfAddress)
                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    return 0
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25331) + _17160 + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
        else:
            mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256] = mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + -(_17160 % 32) + 288 len _17160 % 32]
            mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] = 0x95d89b4100000000000000000000000000000000000000000000000000000000
            require ext_code.size(wNativeAddress)
            staticcall wNativeAddress.0x95d89b41 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288
            require return_data.size >= 32
            _25283 = mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288]
            require mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] <= 4294967296
            require mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 32 <= return_data.size
            require return_data.size >= mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288] + mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 32 and mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288] <= 4294967296
            mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288] = mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 288] + 288]
            _25351 = mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25283 + 288]
            mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len ceil32(mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25283 + 288])] = mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25283 + 320 len ceil32(mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + _25283 + 288])]
            if not _25351 % 32:
                if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288]]):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_abc7e0dfAddress)
                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    return 0
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[_25351 + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 421 len 31]
            else:
                mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320] = mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + -(_25351 % 32) + 352 len _25351 % 32]
                if sha3(mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 256 len mem[floor32(_8418) + floor32(_34) + (4 * ceil32(return_data.size)) + 224]]) == sha3(mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 320 len mem[floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 288]]):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if not 0 / Mask(112, 0, ext_call.return_data[0]):
                            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                            require ext_code.size(sub_abc7e0dfAddress)
                            staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                return 0
                            if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 
                                            32,
                                            33,
                                            0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                            return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 0 / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (10^18 * 0 / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if not 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if not 0 / Mask(112, 0, ext_call.return_data[32]):
                        if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                        require ext_code.size(sub_abc7e0dfAddress)
                        staticcall sub_abc7e0dfAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            return 0
                        if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 
                                        32,
                                        33,
                                        0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                        return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 0 / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    return (10^18 * 0 / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if not 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                    require ext_code.size(sub_abc7e0dfAddress)
                    staticcall sub_abc7e0dfAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args arg1
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        return 0
                    if 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 0, 
                                    32,
                                    33,
                                    0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                    return (0 / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
                if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
                require ext_code.size(sub_abc7e0dfAddress)
                staticcall sub_abc7e0dfAddress.0x70a08231 with:
                        gas gas_remaining wei
                       args arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    return 0
                if 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / ext_call.return_data[0] != 10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 
                                32,
                                33,
                                0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[floor32(_25351) + floor32(_17160) + floor32(_8418) + floor32(_34) + (6 * ceil32(return_data.size)) + 453 len 31]
    ('eq', ('div', ('mul', ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))), ('ext_call.return_data', 0, 32)), ('ext_call.return_data', 0, 32)), ('div', ('mul', 1000000000000000000, ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32)))), ('div', ('mul', 1000000000000000000, ('mask_shl', 112, 0, 0, ('ext_call.return_data', 32, 32))), ('mask_shl', 112, 0, 0, ('ext_call.return_data', 0, 32)))))
    return (10^18 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * ext_call.return_data[0] / 10^18)
}



}
