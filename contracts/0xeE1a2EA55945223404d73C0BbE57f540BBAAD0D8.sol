contract main {




// =====================  Runtime code  =====================


const club = 32, 6, 10^17, 1, 3, 1, 3, 6, 2, 0, 0, 384, 448, 4, 0, 0, 0, None

const ranseur = 32, 42, 10 * 10^18, 2, 4, 2, 12, 8, 3, 0, 0, 384, 448, 7, 0, 0, 112, 0x2e412072616e73657572206861732072656163682e20596f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f65, mem[688 len 16] >> 640, 0

const rapier = 32, 29, 20 * 10^18, 2, 3, 2, 2, 6, 2, -2, 0, 384, 448, 6, 0, 0, 287, 0x2e596f752063616e207573652074686520576561706f6e2046696e65737365206665617420746f206170706c7920796f757220446578746572697479206d6f64696669657220696e7374656164206f6620796f757220537472656e677468206d6f64696669657220746f2061747461636b20726f6c6c7320776974682061207261706965722073697a656420666f7220796f752c206576656e2074686f7567682069742069736e742061206c6967687420776561706f6e20666f7220796f752e20596f752063616e74207769656c6420612072617069657220696e2074776f2068616e647320696e206f7264657220746f206170706c7920312e352074696d657320796f757220537472656e67746820626f6e757320746f2064616d616765, mem[863 len 1] >> 2040, 0

const chain_spiked = 32, 55, 25 * 10^18, 3, 4, 2, 10, 8, 2, 0, 0, 384, 448, 13, 0, 0, 166, 0x2e41207370696b656420636861696e206861732072656163682c20736f20796f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742e20496e206164646974696f6e2c20756e6c696b65206d6f7374206f7468657220776561706f6e7320776974682072656163682c2069742063616e206265207573656420616761696e737420616e2061646a6163656e7420666f65, mem[742 len 26] >> 1072, 0

const sickle = 32, 5, 6 * 10^18, 1, 2, 3, 2, 6, 2, 0, 0, 384, 448, 6, 0, 0, 139, 0x2e41207369636b6c652063616e206265207573656420746f206d616b6520747269702061747461636b732e20496620796f7520617265207472697070656420647572696e6720796f7572206f776e207472697020617474656d70742c20796f752063616e2064726f7020746865207369636b6c6520746f2061766f6964206265696e672074726970706564, mem[715 len 21] >> 856, 0

const index = '', 0

const javelin = 32, 16, 10^18, 1, 5, 2, 2, 6, 2, 0, 30, 384, 448, 7, 0, 0, 154, 0x2e53696e6365206974206973206e6f742064657369676e656420666f72206d656c65652c20796f75206172652074726561746564206173206e6f6e70726f66696369656e74207769746820697420616e642074616b652061202d342070656e616c7479206f6e2061747461636b20726f6c6c7320696620796f75207573652061206a6176656c696e2061732061206d656c656520776561706f6e, mem[730 len 6] >> 976, 0

const kukri = 32, 21, 8 * 10^18, 2, 2, 3, 2, 4, 2, -2, 0, 384, 448, 5, 0, 0, 0, None

const crossbow_heavy = 32, 13, 50 * 10^18, 1, 5, 2, 8, 10, 2, -1, 120, 384, 448, 15, Mask(120, 136, 'Crossbow, heavy') >> 136, 0, 142, 0x2e596f75206472617720612068656176792063726f7373626f77206261636b206279207475726e696e67206120736d616c6c2077696e63682e204c6f6164696e6720612068656176792063726f7373626f7720697320612066756c6c2d726f756e6420616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[718 len 18] >> 880, 0

const sword_short = 32, 24, 10 * 10^18, 2, 2, 2, 2, 6, 2, -1, 0, 384, 448, 12, 0, 0, 0, None

const crossbow_repeating_heavy = 32, 58, 400 * 10^18, 3, 5, 2, 12, 10, 2, -1, 120, 384, 448, 25, Mask(200, 56, 'Crossbow, repeating heavy') >> 56, 0, 255, 0x2e54686520726570656174696e672063726f7373626f77202877686574686572206865617679206f72206c696768742920686f6c647320352063726f7373626f7720626f6c74732e204173206c6f6e6720617320697420686f6c647320626f6c74732c20796f752063616e2072656c6f61642069742062792070756c6c696e67207468652072656c6f6164696e67206c65766572202861206672656520616374696f6e292e204c6f6164696e672061206e65772063617365206f66203520626f6c747320697320612066756c6c2d726f756e6420616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[831 len 1] >> 1784, 0

const shortbow_composite = 32, 47, 75 * 10^18, 2, 5, 2, 2, 6, 3, 0, 70, 384, 448, 19, Mask(152, 104, 'Shortbow, composite') >> 104, 0, 803, 0x2e596f75206e656564206174206c656173742074776f2068616e647320746f20757365206120626f772c207265676172646c657373206f66206974732073697a652e20596f752063616e20757365206120636f6d706f736974652073686f7274626f77207768696c65206d6f756e7465642e20416c6c20636f6d706f7369746520626f777320617265206d6164652077697468206120706172746963756c617220737472656e67746820726174696e672028746861742069732c20656163682072657175697265732061206d696e696d756d20537472656e677468206d6f64696669657220746f2075736520776974682070726f66696369656e6379292e20496620796f757220537472656e67746820626f6e7573206973206c6f776572207468616e2074686520737472656e67746820726174696e67206f662074686520636f6d706f7369746520626f772c20796f752063616e74206566666563746976656c79207573652069742c20736f20796f752074616b652061202d322070656e616c7479206f6e2061747461636b7320776974682069742e205468652064656661756c7420636f6d706f736974652073686f7274626f77207265717569726573206120537472656e677468206d6f646966696572206f66202b30206f722068696768657220746f2075736520776974682070726f66696369656e63792e204120636f6d706f736974652073686f7274626f772063616e206265206d61646520776974682061206869676820737472656e67746820726174696e6720746f2074616b6520616476616e74616765206f6620616e2061626f76652d6176657261676520537472656e6774682073636f72653b2074686973206665617475726520616c6c6f777320796f7520746f2061646420796f757220537472656e67746820626f6e757320746f2064616d6167652c20757020746f20746865206d6178696d756d20626f6e757320696e6469636174656420666f722074686520626f772e204561636820706f696e74206f6620537472656e67746820626f6e7573206772616e7465642062792074686520626f77206164647320373520677020746f2069747320636f7374, mem[1379 len 29] >> 6168, 0

const longbow = 32, 44, 75 * 10^18, 2, 5, 2, 3, 8, 3, 0, 100, 384, 448, 7, Mask(56, 200, 'Longbow') >> 200, 0, 354, 0x2e596f75206e656564206174206c656173742074776f2068616e647320746f20757365206120626f772c207265676172646c657373206f66206974732073697a652e2041206c6f6e67626f7720697320746f6f20756e7769656c647920746f20757365207768696c6520796f7520617265206d6f756e7465642e20496620796f75206861766520612070656e616c747920666f72206c6f7720537472656e6774682c206170706c7920697420746f2064616d61676520726f6c6c73207768656e20796f75207573652061206c6f6e67626f772e20496620796f752068617665206120626f6e757320666f72206869676820537472656e6774682c20796f752063616e206170706c7920697420746f2064616d61676520726f6c6c73207768656e20796f7520757365206120636f6d706f73697465206c6f6e67626f7720287365652062656c6f772920627574206e6f74206120726567756c6172206c6f6e67626f77, mem[930 len 30] >> 2576, 0

const waraxe_dwarven = 32, 53, 30 * 10^18, 3, 3, 3, 8, 10, 3, 0, 0, 384, 448, 15, 0, 0, 323, 0x2e41206477617276656e2077617261786520697320746f6f206c6172676520746f2075736520696e206f6e652068616e6420776974686f7574207370656369616c20747261696e696e673b20746875732c20697420697320616e2065786f74696320776561706f6e2e2041204d656469756d206368617261637465722063616e207573652061206477617276656e207761726178652074776f2d68616e6465642061732061206d61727469616c20776561706f6e2c206f722061204c617267652063726561747572652063616e20757365206974206f6e652d68616e64656420696e207468652073616d65207761792e2041206477617266207472656174732061206477617276656e207761726178652061732061206d61727469616c20776561706f6e206576656e207768656e207573696e6720697420696e206f6e652068616e64, mem[899 len 29] >> 2328, 0

const pick_light = 32, 22, 4 * 10^18, 2, 2, 2, 3, 4, 4, 0, 0, 384, 448, 11, 0, 0, 0, None

const guisarme = 32, 39, 25 * 10^14 * 3600, 2, 4, 3, 12, 8, 3, 0, 0, 384, 448, 8, Mask(64, 192, 'Guisarme') >> 192, 0, 113, 0x2e41206775697361726d65206861732072656163682e20596f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f65, mem[689 len 15] >> 648, 0

const axe = 32, 18, 8 * 10^18, 2, 2, 3, 2, 6, 2, 0, 0, 384, 448, 3, 0, 0, 0, None

const kama = 32, 48, 2 * 10^18, 3, 2, 3, 2, 6, 2, 0, 0, 384, 448, 4, 0, 0, 97, 0x2e546865206b616d612069732061207370656369616c206d6f6e6b20776561706f6e2e20546869732064657369676e6174696f6e2067697665732061206d6f6e6b207769656c64696e672061206b616d61207370656369616c206f7074696f6e73, mem[673 len 31] >> 520, 0

const crossbow_hand = 32, 57, 100 * 10^18, 3, 5, 2, 2, 4, 2, -1, 30, 384, 448, 14, 0, 0, 121, 0x2e596f752063616e206472617720612068616e642063726f7373626f77206261636b2062792068616e642e204c6f6164696e6720612068616e642063726f7373626f772069732061206d6f766520616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[697 len 7] >> 712, 0

const sling = 32, 17, 10^17, 1, 5, 1, 0, 4, 2, 0, 50, 384, 448, 5, 0, 0, 249, 0x2e596f757220537472656e677468206d6f646966696572206170706c69657320746f2064616d61676520726f6c6c73207768656e20796f7520757365206120736c696e672c206a75737420617320697420646f657320666f72207468726f776e20776561706f6e732e20596f752063616e20666972652c20627574206e6f74206c6f61642c206120736c696e672077697468206f6e652068616e642e204c6f6164696e67206120736c696e672069732061206d6f766520616374696f6e20746861742072657175697265732074776f2068616e647320616e642070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[825 len 7] >> 1736, 0

const battleaxe = 32, 25, 10 * 10^18, 2, 3, 3, 6, 8, 3, 0, 0, 384, 448, 9, Mask(72, 184, 'Battleaxe') >> 184, 0, 0, None

const crossbow_repeating_light = 32, 59, 250 * 10^18, 3, 5, 2, 6, 8, 2, -1, 80, 384, 448, 25, Mask(200, 56, 'Crossbow, repeating light') >> 56, 0, 255, 0x2e54686520726570656174696e672063726f7373626f77202877686574686572206865617679206f72206c696768742920686f6c647320352063726f7373626f7720626f6c74732e204173206c6f6e6720617320697420686f6c647320626f6c74732c20796f752063616e2072656c6f61642069742062792070756c6c696e67207468652072656c6f6164696e67206c65766572202861206672656520616374696f6e292e204c6f6164696e672061206e65772063617365206f66203520626f6c747320697320612066756c6c2d726f756e6420616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[831 len 1] >> 1784, 0

const longbow_composite = 32, 45, 100 * 10^18, 2, 5, 2, 3, 8, 3, 0, 110, 384, 448, 18, Mask(144, 112, 'Longbow, composite') >> 112, 0, 800, 0x2e596f75206e656564206174206c656173742074776f2068616e647320746f20757365206120626f772c207265676172646c657373206f66206974732073697a652e20596f752063616e20757365206120636f6d706f73697465206c6f6e67626f77207768696c65206d6f756e7465642e20416c6c20636f6d706f7369746520626f777320617265206d6164652077697468206120706172746963756c617220737472656e67746820726174696e672028746861742069732c20656163682072657175697265732061206d696e696d756d20537472656e677468206d6f64696669657220746f2075736520776974682070726f66696369656e6379292e20496620796f757220537472656e67746820626f6e7573206973206c657373207468616e2074686520737472656e67746820726174696e67206f662074686520636f6d706f7369746520626f772c20796f752063616e74206566666563746976656c79207573652069742c20736f20796f752074616b652061202d322070656e616c7479206f6e2061747461636b7320776974682069742e205468652064656661756c7420636f6d706f73697465206c6f6e67626f77207265717569726573206120537472656e677468206d6f646966696572206f66202b30206f722068696768657220746f2075736520776974682070726f66696369656e63792e204120636f6d706f73697465206c6f6e67626f772063616e206265206d61646520776974682061206869676820737472656e67746820726174696e6720746f2074616b6520616476616e74616765206f6620616e2061626f76652d6176657261676520537472656e6774682073636f72653b2074686973206665617475726520616c6c6f777320796f7520746f2061646420796f757220537472656e67746820626f6e757320746f2064616d6167652c20757020746f20746865206d6178696d756d20626f6e757320696e6469636174656420666f722074686520626f772e204561636820706f696e74206f6620537472656e67746820626f6e7573206772616e7465642062792074686520626f7720616464732031303020677020746f2069747320636f7374

const quarterstaff = 32, 11, 10^17, 1, 4, 1, 4, 6, 2, 0, 0, 384, 448, 12, 0, 0, 392, 0x2e4120717561727465727374616666206973206120646f75626c6520776561706f6e2e20596f752063616e2066696768742077697468206974206173206966206669676874696e6720776974682074776f20776561706f6e732c2062757420696620796f7520646f2c20796f7520696e63757220616c6c20746865206e6f726d616c2061747461636b2070656e616c74696573206173736f6369617465642077697468206669676874696e6720776974682074776f20776561706f6e732c206a75737420617320696620796f752077657265207573696e672061206f6e652d68616e64656420776561706f6e20616e642061206c6967687420776561706f6e2e2041206372656174757265207769656c64696e6720612071756172746572737461666620696e206f6e652068616e642063616e7420757365206974206173206120646f75626c6520776561706f6e2d6f6e6c79206f6e6520656e64206f662074686520776561706f6e2063616e206265207573656420696e20616e7920676976656e20726f756e64, mem[968 len 24] >> 2880, 0

const sap = 32, 23, 10^18, 2, 2, 1, 2, 6, 2, 0, 0, 384, 448, 3, 0, 0, 0, None

const dagger = 32, 2, 2 * 10^18, 1, 2, 2, 1, 4, 2, -1, 0, 384, 448, 6, 0, 0, 115, 0x2e596f75206765742061202b3220626f6e7573206f6e20536c6569676874206f662048616e6420636865636b73206d61646520746f20636f6e6365616c206120646167676572206f6e20796f757220626f647920287365652074686520536c6569676874206f662048616e6420736b696c6c29, mem[691 len 13] >> 664, 0

const greatsword = 32, 38, 50 * 10^18, 2, 4, 3, 8, 12, 2, -1, 0, 384, 448, 10, 0, 0, 0, None

const falchion = 32, 33, 75 * 10^18, 2, 4, 3, 8, 8, 2, -2, 0, 384, 448, 8, 0, 0, 0, None

const flail = 32, 26, 8 * 10^18, 2, 3, 1, 5, 8, 2, 0, 0, 384, 448, 5, 0, 0, 151, 0x2e57697468206120666c61696c2c20796f75206765742061202b3220626f6e7573206f6e206f70706f7365642061747461636b20726f6c6c73206d61646520746f2064697361726d20616e20656e656d792028696e636c7564696e672074686520726f6c6c20746f2061766f6964206265696e672064697361726d6564206966207375636820616e20617474656d7074206661696c7329, mem[727 len 9] >> 952, 0

const siangham = 32, 51, 3 * 10^18, 3, 2, 2, 1, 6, 2, 0, 0, 384, 448, 8, Mask(64, 192, 'Siangham') >> 192, 0, 105, 0x2e546865207369616e6768616d2069732061207370656369616c206d6f6e6b20776561706f6e2e20546869732064657369676e6174696f6e2067697665732061206d6f6e6b207769656c64696e672061207369616e6768616d207370656369616c206f7074696f6e73, mem[681 len 23] >> 584, 0

const mace_light = 32, 4, 5 * 10^18, 1, 2, 1, 4, 6, 2, 0, 0, 384, 448, 11, 0, 0, 0, None

const sword_bastard = 32, 52, 35 * 10^18, 3, 3, 3, 6, 10, 2, -1, 0, 384, 448, 14, 0, 0, 171, 0x2e4120626173746172642073776f726420697320746f6f206c6172676520746f2075736520696e206f6e652068616e6420776974686f7574207370656369616c20747261696e696e673b20746875732c20697420697320616e2065786f74696320776561706f6e2e2041206368617261637465722063616e20757365206120626173746172642073776f72642074776f2d68616e6465642061732061206d61727469616c20776561706f6e, mem[747 len 21] >> 1112, 0

const flail_heavy = 32, 37, 15 * 10^18, 2, 4, 1, 10, 10, 2, -1, 0, 384, 448, 12, Mask(96, 160, 'Flail, heavy') >> 160, 0, 151, 0x2e57697468206120666c61696c2c20796f75206765742061202b3220626f6e7573206f6e206f70706f7365642061747461636b20726f6c6c73206d61646520746f2064697361726d20616e20656e656d792028696e636c7564696e672074686520726f6c6c20746f2061766f6964206265696e672064697361726d6564206966207375636820616e20617474656d7074206661696c7329, mem[727 len 9] >> 952, 0

const gauntlet_spiked = 32, 3, 5 * 10^18, 1, 2, 2, 1, 4, 2, 0, 0, 384, 448, 16, 0, 0, 192, 0x2e596f7572206f70706f6e656e742063616e6e6f742075736520612064697361726d20616374696f6e20746f2064697361726d20796f75206f66207370696b6564206761756e746c6574732e2054686520636f737420616e642077656967687420676976656e2061726520666f7220612073696e676c65206761756e746c65742e20416e2061747461636b20776974682061207370696b6564206761756e746c657420697320636f6e7369646572656420616e2061726d65642061747461636b

const sai = 32, 50, 10^18, 3, 2, 1, 1, 4, 2, 0, 0, 384, 448, 3, 0, 0, 149, 0x2e576974682061207361692c20796f75206765742061202b3420626f6e7573206f6e206f70706f7365642061747461636b20726f6c6c73206d61646520746f2064697361726d20616e20656e656d792028696e636c7564696e672074686520726f6c6c20746f2061766f6964206265696e672064697361726d6564206966207375636820616e20617474656d7074206661696c7329, mem[725 len 11] >> 936, 0

const warhammer = 32, 32, 12 * 10^18, 2, 3, 1, 5, 8, 3, 0, 0, 384, 448, 9, 0, 0, 0, None

const flail_dire = 32, 56, 25 * 10^15 * 3600, 3, 4, 1, 10, 8, 2, 0, 0, 384, 448, 11, Mask(88, 168, 'Flail, dire') >> 168, 0, 389, 0x2e41206469726520666c61696c206973206120646f75626c6520776561706f6e2e20596f752063616e2066696768742077697468206974206173206966206669676874696e6720776974682074776f20776561706f6e732c2062757420696620796f7520646f2c20796f7520696e63757220616c6c20746865206e6f726d616c2061747461636b2070656e616c74696573206173736f6369617465642077697468206669676874696e6720776974682074776f20776561706f6e732c206a75737420617320696620796f752077657265207573696e672061206f6e652d68616e64656420776561706f6e20616e642061206c6967687420776561706f6e2e2041206372656174757265207769656c64696e672061206469726520666c61696c20696e206f6e652068616e642063616e7420757365206974206173206120646f75626c6520776561706f6e2d206f6e6c79206f6e6520656e64206f662074686520776561706f6e2063616e206265207573656420696e20616e7920676976656e20726f756e64, mem[965 len 27] >> 2856, 0

const spear = 32, 12, 2 * 10^18, 1, 4, 2, 6, 8, 3, 0, 0, 384, 448, 5, 0, 0, 0, None

const pick_heavy = 32, 28, 8 * 10^18, 2, 3, 2, 6, 6, 4, 0, 0, 384, 448, 11, Mask(88, 168, 'Pick, heavy') >> 168, 0, 0, None

const scimitar = 32, 30, 15 * 10^18, 2, 3, 3, 4, 6, 2, -2, 0, 384, 448, 8, 0, 0, 0, None

const glaive = 32, 34, 8 * 10^18, 2, 4, 3, 10, 10, 3, 0, 0, 384, 448, 6, 0, 0, 111, 0x2e4120676c61697665206861732072656163682e20596f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f65, mem[687 len 17] >> 632, 0

const longspear = 32, 10, 5 * 10^18, 1, 4, 2, 9, 8, 3, 0, 0, 384, 448, 9, 0, 0, 250, 0x2e41206c6f6e677370656172206861732072656163682e20596f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f652e20496620796f7520757365206120726561647920616374696f6e20746f207365742061206c6f6e67737065617220616761696e73742061206368617267652c20796f75206465616c20646f75626c652064616d616765206f6e2061207375636365737366756c2068697420616761696e73742061206368617267696e6720636861726163746572, mem[826 len 6] >> 1744, 0

const handaxe = 32, 20, 6 * 10^18, 2, 2, 3, 3, 6, 3, 0, 0, 384, 448, 7, Mask(56, 200, 'Handaxe') >> 200, 0, 0, None

const nunchaku = 32, 49, 2 * 10^18, 3, 2, 1, 2, 6, 2, 0, 0, 384, 448, 8, Mask(64, 192, 'Nunchaku') >> 192, 0, 260, 0x2e546865206e756e6368616b752069732061207370656369616c206d6f6e6b20776561706f6e2e20546869732064657369676e6174696f6e2067697665732061206d6f6e6b207769656c64696e672061206e756e6368616b75207370656369616c206f7074696f6e732e20576974682061206e756e6368616b752c20796f75206765742061202b3220626f6e7573206f6e206f70706f7365642061747461636b20726f6c6c73206d61646520746f2064697361726d20616e20656e656d792028696e636c7564696e672074686520726f6c6c20746f2061766f6964206265696e672064697361726d6564206966207375636820616e20617474656d7074206661696c7329, mem[836 len 28] >> 1824, 0

const crossbow_light = 32, 14, 35 * 10^18, 1, 5, 2, 4, 8, 2, -1, 80, 384, 448, 15, 0, 0, 130, 0x2e596f7520647261772061206c696768742063726f7373626f77206261636b2062792070756c6c696e672061206c657665722e204c6f6164696e672061206c696768742063726f7373626f772069732061206d6f766520616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[706 len 30] >> 784, 0

const shortbow = 32, 46, 30 * 10^18, 2, 5, 2, 2, 6, 3, 0, 60, 384, 448, 8, Mask(64, 192, 'Shortbow') >> 192, 0, 339, 0x2e596f75206e656564206174206c656173742074776f2068616e647320746f20757365206120626f772c207265676172646c657373206f66206974732073697a652e20596f752063616e2075736520612073686f7274626f77207768696c65206d6f756e7465642e20496620796f75206861766520612070656e616c747920666f72206c6f7720537472656e6774682c206170706c7920697420746f2064616d61676520726f6c6c73207768656e20796f752075736520612073686f7274626f772e20496620796f752068617665206120626f6e757320666f72206869676820537472656e6774682c20796f752063616e206170706c7920697420746f2064616d61676520726f6c6c73207768656e20796f7520757365206120636f6d706f736974652073686f7274626f7720287365652062656c6f772920627574206e6f74206120726567756c61722073686f7274626f77, mem[915 len 13] >> 2456, 0

const class = 'Weapons', 0

const hammer_light = 32, 19, 10^18, 2, 2, 1, 2, 4, 2, 0, 0, 384, 448, 13, 0, 0, 0, None

const shortspear = 32, 9, 10^18, 1, 3, 2, 3, 6, 2, 0, 0, 384, 448, 10, 0, 0, 72, 0x2e412073686f7274737065617220697320736d616c6c20656e6f75676820746f207769656c64206f6e652d68616e6465642e204974206d617920616c736f206265207468726f776e, mem[648 len 24] >> 320, 0

const greataxe = 32, 35, 20 * 10^18, 2, 4, 3, 12, 12, 3, 0, 0, 384, 448, 8, Mask(64, 192, 'Greataxe') >> 192, 0, 0, None

const gauntlet = 32, 1, 2 * 10^18, 1, 1, 1, 1, 3, 2, 0, 0, 384, 448, 8, 0, 0, 282, 0x2e54686973206d6574616c20676c6f7665206c65747320796f75206465616c206c657468616c2064616d61676520726174686572207468616e206e6f6e6c657468616c2064616d616765207769746820756e61726d656420737472696b65732e204120737472696b6520776974682061206761756e746c6574206973206f746865727769736520636f6e7369646572656420616e20756e61726d65642061747461636b2e2054686520636f737420616e642077656967687420676976656e2061726520666f7220612073696e676c65206761756e746c65742e204d656469756d20616e642068656176792061726d6f7273202865786365707420627265617374706c6174652920636f6d652077697468206761756e746c657473, mem[858 len 6] >> 2000, 0

const lance = 32, 41, 10 * 10^18, 2, 4, 2, 10, 8, 3, 0, 0, 384, 448, 5, 0, 0, 181, 0x2e41206c616e6365206465616c7320646f75626c652064616d616765207768656e20757365642066726f6d20746865206261636b206f662061206368617267696e67206d6f756e742e204974206861732072656163682c20736f20796f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f65, mem[757 len 11] >> 1192, 0

const trident = 32, 31, 15 * 10^18, 2, 3, 2, 4, 8, 2, 0, 0, 384, 448, 7, 0, 0, 160, 0xfe5468697320776561706f6e2063616e206265207468726f776e2e20496620796f7520757365206120726561647920616374696f6e20746f2073657420612074726964656e7420616761696e73742061206368617267652c20796f75206465616c20646f75626c652064616d616765206f6e2061207375636365737366756c2068697420616761696e73742061206368617267696e6720636861726163746572

const scythe = 32, 43, 5 * 10^15 * 3600, 2, 4, 3, 10, 8, 4, 0, 0, 384, 448, 6, 0, 0, 139, 0x2e41207363797468652063616e206265207573656420746f206d616b6520747269702061747461636b732e20496620796f7520617265207472697070656420647572696e6720796f7572206f776e207472697020617474656d70742c20796f752063616e2064726f70207468652073637974686520746f2061766f6964206265696e672074726970706564, mem[715 len 21] >> 856, 0

const greatclub = 32, 36, 5 * 10^18, 2, 4, 1, 8, 10, 2, 0, 0, 384, 448, 9, 0, 0, 0, None

const morningstar = 32, 8, 8 * 10^18, 1, 3, 1, 6, 8, 2, 0, 0, 384, 448, 11, 0, 0, 0, None

const axe_orc_double = 32, 54, 60 * 10^18, 3, 4, 3, 15, 8, 3, 0, 0, 384, 448, 15, Mask(120, 136, 'Axe, orc double') >> 136, 0, 258, 0x2e416e206f726320646f75626c6520617865206973206120646f75626c6520776561706f6e2e20596f752063616e2066696768742077697468206974206173206966206669676874696e6720776974682074776f20776561706f6e732c2062757420696620796f7520646f2c20796f7520696e63757220616c6c20746865206e6f726d616c2061747461636b2070656e616c74696573206173736f6369617465642077697468206669676874696e6720776974682074776f20776561706f6e732c206a75737420617320696620796f752077657265207573696e672061206f6e652d68616e64656420776561706f6e20616e642061206c6967687420776561706f6e, mem[834 len 30] >> 1808, 0

const dart = 32, 15, 5 * 10^17, 1, 5, 2, 1, 4, 2, 0, 20, 384, 448, 4, 0, 0, 0, None

const longsword = 32, 27, 15 * 10^18, 2, 3, 3, 4, 8, 2, -1, 0, 384, 448, 9, 0, 0, 0, None

const mace_heavy = 32, 7, 12 * 10^18, 1, 3, 1, 8, 8, 2, 0, 0, 384, 448, 11, Mask(88, 168, 'Mace, heavy') >> 168, 0, 0, None

const halberd = 32, 40, 10 * 10^18, 2, 4, 2, 12, 10, 3, 0, 0, 384, 448, 7, 0, 0, 133, 0x2e496620796f7520757365206120726561647920616374696f6e20746f2073657420612068616c6265726420616761696e73742061206368617267652c20796f75206465616c20646f75626c652064616d616765206f6e2061207375636365737366756c2068697420616761696e73742061206368617267696e6720636861726163746572, mem[709 len 27] >> 808, 0


function _fallback() payable {
    revert
}

function get_proficiency_by_id(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 != 1:
        if 2 == arg1:
            return '', 0
        if arg1 != 3:
            return ' '
    return '', 0
}

function get_damage_type_by_id(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if 1 == arg1:
        return 'Bludgeoning', 0
    if 2 == arg1:
        return 'Piercing', 0
    if arg1 != 3:
        return ' '
    return 'Slashing', 0
}

function get_encumbrance_by_id(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if 1 == arg1:
        return '', 0
    if 2 == arg1:
        return 'Light Melee Weapons', 0
    if 3 == arg1:
        return 'One-Handed Melee Weapons', 0
    if 4 == arg1:
        return 'Two-Handed Melee Weapons', 0
    if arg1 != 5:
        return ' '
    return 'Ranged Weapons', 0
}

function item_by_id(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if 1 == arg1:
        return 32, 1, 
               2 * 10^18,
               1,
               1,
               1,
               1,
               3,
               2,
               0,
               0,
               384,
               448,
               8,
               0,
               0,
               282,
               0x2e54686973206d6574616c20676c6f7665206c65747320796f75206465616c206c657468616c2064616d61676520726174686572207468616e206e6f6e6c657468616c2064616d616765207769746820756e61726d656420737472696b65732e204120737472696b6520776974682061206761756e746c6574206973206f746865727769736520636f6e7369646572656420616e20756e61726d65642061747461636b2e2054686520636f737420616e642077656967687420676976656e2061726520666f7220612073696e676c65206761756e746c65742e204d656469756d20616e642068656176792061726d6f7273202865786365707420627265617374706c6174652920636f6d652077697468206761756e746c657473, mem[1242 len 6] >> 2000,
               0
    if 2 == arg1:
        return 32, 2, 
               2 * 10^18,
               1,
               2,
               2,
               1,
               4,
               2,
               -1,
               0,
               384,
               448,
               6,
               0,
               0,
               115,
               0x2e596f75206765742061202b3220626f6e7573206f6e20536c6569676874206f662048616e6420636865636b73206d61646520746f20636f6e6365616c206120646167676572206f6e20796f757220626f647920287365652074686520536c6569676874206f662048616e6420736b696c6c29, mem[1075 len 13] >> 664,
               0
    if 3 == arg1:
        return 32, 3, 
               5 * 10^18,
               1,
               2,
               2,
               1,
               4,
               2,
               0,
               0,
               384,
               448,
               16,
               0,
               0,
               192,
               0x2e596f7572206f70706f6e656e742063616e6e6f742075736520612064697361726d20616374696f6e20746f2064697361726d20796f75206f66207370696b6564206761756e746c6574732e2054686520636f737420616e642077656967687420676976656e2061726520666f7220612073696e676c65206761756e746c65742e20416e2061747461636b20776974682061207370696b6564206761756e746c657420697320636f6e7369646572656420616e2061726d65642061747461636b
    if 4 == arg1:
        return 32, 4, 5 * 10^18, 1, 2, 1, 4, 6, 2, 0, 0, 384, 448, 11, 0, 0, 0, None
    if 5 == arg1:
        return 32, 5, 
               6 * 10^18,
               1,
               2,
               3,
               2,
               6,
               2,
               0,
               0,
               384,
               448,
               6,
               0,
               0,
               139,
               0x2e41207369636b6c652063616e206265207573656420746f206d616b6520747269702061747461636b732e20496620796f7520617265207472697070656420647572696e6720796f7572206f776e207472697020617474656d70742c20796f752063616e2064726f7020746865207369636b6c6520746f2061766f6964206265696e672074726970706564, mem[1099 len 21] >> 856,
               0
    if 6 == arg1:
        return 32, 6, 10^17, 1, 3, 1, 3, 6, 2, 0, 0, 384, 448, 4, 0, 0, 0, None
    if 7 == arg1:
        return 32, 7, 12 * 10^18, 1, 3, 1, 8, 8, 2, 0, 0, 384, 448, 11, 'Mace, heavy', 0, 0, None
    if 8 == arg1:
        return 32, 8, 8 * 10^18, 1, 3, 1, 6, 8, 2, 0, 0, 384, 448, 11, 0, 0, 0, None
    if 9 == arg1:
        return 32, 9, 
               10^18,
               1,
               3,
               2,
               3,
               6,
               2,
               0,
               0,
               384,
               448,
               10,
               0,
               0,
               72,
               0x2e412073686f7274737065617220697320736d616c6c20656e6f75676820746f207769656c64206f6e652d68616e6465642e204974206d617920616c736f206265207468726f776e, mem[1032 len 24] >> 320,
               0
    if 10 == arg1:
        return 32, 10, 
               5 * 10^18,
               1,
               4,
               2,
               9,
               8,
               3,
               0,
               0,
               384,
               448,
               9,
               0,
               0,
               250,
               0x2e41206c6f6e677370656172206861732072656163682e20596f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f652e20496620796f7520757365206120726561647920616374696f6e20746f207365742061206c6f6e67737065617220616761696e73742061206368617267652c20796f75206465616c20646f75626c652064616d616765206f6e2061207375636365737366756c2068697420616761696e73742061206368617267696e6720636861726163746572, mem[1210 len 6] >> 1744,
               0
    if 11 == arg1:
        return 32, 11, 
               10^17,
               1,
               4,
               1,
               4,
               6,
               2,
               0,
               0,
               384,
               448,
               12,
               0,
               0,
               392,
               0x2e4120717561727465727374616666206973206120646f75626c6520776561706f6e2e20596f752063616e2066696768742077697468206974206173206966206669676874696e6720776974682074776f20776561706f6e732c2062757420696620796f7520646f2c20796f7520696e63757220616c6c20746865206e6f726d616c2061747461636b2070656e616c74696573206173736f6369617465642077697468206669676874696e6720776974682074776f20776561706f6e732c206a75737420617320696620796f752077657265207573696e672061206f6e652d68616e64656420776561706f6e20616e642061206c6967687420776561706f6e2e2041206372656174757265207769656c64696e6720612071756172746572737461666620696e206f6e652068616e642063616e7420757365206974206173206120646f75626c6520776561706f6e2d6f6e6c79206f6e6520656e64206f662074686520776561706f6e2063616e206265207573656420696e20616e7920676976656e20726f756e64, mem[1352 len 24] >> 2880,
               0
    if 12 == arg1:
        return 32, 12, 2 * 10^18, 1, 4, 2, 6, 8, 3, 0, 0, 384, 448, 5, 0, 0, 0, None
    if 13 == arg1:
        return 32, 13, 
               50 * 10^18,
               1,
               5,
               2,
               8,
               10,
               2,
               -1,
               120,
               384,
               448,
               15,
               'Crossbow, heavy',
               0,
               142,
               0x2e596f75206472617720612068656176792063726f7373626f77206261636b206279207475726e696e67206120736d616c6c2077696e63682e204c6f6164696e6720612068656176792063726f7373626f7720697320612066756c6c2d726f756e6420616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[1102 len 18] >> 880,
               0
    if 14 == arg1:
        return 32, 14, 
               35 * 10^18,
               1,
               5,
               2,
               4,
               8,
               2,
               -1,
               80,
               384,
               448,
               15,
               0,
               0,
               130,
               0x2e596f7520647261772061206c696768742063726f7373626f77206261636b2062792070756c6c696e672061206c657665722e204c6f6164696e672061206c696768742063726f7373626f772069732061206d6f766520616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[1090 len 30] >> 784,
               0
    if 15 == arg1:
        return 32, 15, 5 * 10^17, 1, 5, 2, 1, 4, 2, 0, 20, 384, 448, 4, 0, 0, 0, None
    if 16 == arg1:
        return 32, 16, 
               10^18,
               1,
               5,
               2,
               2,
               6,
               2,
               0,
               30,
               384,
               448,
               7,
               0,
               0,
               154,
               0x2e53696e6365206974206973206e6f742064657369676e656420666f72206d656c65652c20796f75206172652074726561746564206173206e6f6e70726f66696369656e74207769746820697420616e642074616b652061202d342070656e616c7479206f6e2061747461636b20726f6c6c7320696620796f75207573652061206a6176656c696e2061732061206d656c656520776561706f6e, mem[1114 len 6] >> 976,
               0
    if 17 == arg1:
        return 32, 17, 
               10^17,
               1,
               5,
               1,
               0,
               4,
               2,
               0,
               50,
               384,
               448,
               5,
               0,
               0,
               249,
               0x2e596f757220537472656e677468206d6f646966696572206170706c69657320746f2064616d61676520726f6c6c73207768656e20796f7520757365206120736c696e672c206a75737420617320697420646f657320666f72207468726f776e20776561706f6e732e20596f752063616e20666972652c20627574206e6f74206c6f61642c206120736c696e672077697468206f6e652068616e642e204c6f6164696e67206120736c696e672069732061206d6f766520616374696f6e20746861742072657175697265732074776f2068616e647320616e642070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[1209 len 7] >> 1736,
               0
    if 18 == arg1:
        return 32, 18, 8 * 10^18, 2, 2, 3, 2, 6, 2, 0, 0, 384, 448, 3, 0, 0, 0, None
    if 19 == arg1:
        return 32, 19, 10^18, 2, 2, 1, 2, 4, 2, 0, 0, 384, 448, 13, 0, 0, 0, None
    if 20 == arg1:
        return 32, 20, 6 * 10^18, 2, 2, 3, 3, 6, 3, 0, 0, 384, 448, 7, 'Handaxe', 0, 0, None
    if 21 == arg1:
        return 32, 21, 8 * 10^18, 2, 2, 3, 2, 4, 2, -2, 0, 384, 448, 5, 0, 0, 0, None
    if 22 == arg1:
        return 32, 22, 4 * 10^18, 2, 2, 2, 3, 4, 4, 0, 0, 384, 448, 11, 0, 0, 0, None
    if 23 == arg1:
        return 32, 23, 10^18, 2, 2, 1, 2, 6, 2, 0, 0, 384, 448, 3, 0, 0, 0, None
    if 24 == arg1:
        return 32, 24, 10 * 10^18, 2, 2, 2, 2, 6, 2, -1, 0, 384, 448, 12, 0, 0, 0, None
    if 25 == arg1:
        return 32, 25, 10 * 10^18, 2, 3, 3, 6, 8, 3, 0, 0, 384, 448, 9, 'Battleaxe', 0, 0, None
    if 26 == arg1:
        return 32, 26, 
               8 * 10^18,
               2,
               3,
               1,
               5,
               8,
               2,
               0,
               0,
               384,
               448,
               5,
               0,
               0,
               151,
               0x2e57697468206120666c61696c2c20796f75206765742061202b3220626f6e7573206f6e206f70706f7365642061747461636b20726f6c6c73206d61646520746f2064697361726d20616e20656e656d792028696e636c7564696e672074686520726f6c6c20746f2061766f6964206265696e672064697361726d6564206966207375636820616e20617474656d7074206661696c7329, mem[1111 len 9] >> 952,
               0
    if 27 == arg1:
        return 32, 27, 15 * 10^18, 2, 3, 3, 4, 8, 2, -1, 0, 384, 448, 9, 0, 0, 0, None
    if 28 == arg1:
        return 32, 28, 8 * 10^18, 2, 3, 2, 6, 6, 4, 0, 0, 384, 448, 11, 'Pick, heavy', 0, 0, None
    if 29 == arg1:
        return 32, 29, 
               20 * 10^18,
               2,
               3,
               2,
               2,
               6,
               2,
               -2,
               0,
               384,
               448,
               6,
               0,
               0,
               287,
               0x2e596f752063616e207573652074686520576561706f6e2046696e65737365206665617420746f206170706c7920796f757220446578746572697479206d6f64696669657220696e7374656164206f6620796f757220537472656e677468206d6f64696669657220746f2061747461636b20726f6c6c7320776974682061207261706965722073697a656420666f7220796f752c206576656e2074686f7567682069742069736e742061206c6967687420776561706f6e20666f7220796f752e20596f752063616e74207769656c6420612072617069657220696e2074776f2068616e647320696e206f7264657220746f206170706c7920312e352074696d657320796f757220537472656e67746820626f6e757320746f2064616d616765, mem[1247 len 1] >> 2040,
               0
    if 30 == arg1:
        return 32, 30, 15 * 10^18, 2, 3, 3, 4, 6, 2, -2, 0, 384, 448, 8, 0, 0, 0, None
    if 31 == arg1:
        return 32, 31, 
               15 * 10^18,
               2,
               3,
               2,
               4,
               8,
               2,
               0,
               0,
               384,
               448,
               7,
               0,
               0,
               160,
               0xfe5468697320776561706f6e2063616e206265207468726f776e2e20496620796f7520757365206120726561647920616374696f6e20746f2073657420612074726964656e7420616761696e73742061206368617267652c20796f75206465616c20646f75626c652064616d616765206f6e2061207375636365737366756c2068697420616761696e73742061206368617267696e6720636861726163746572
    if 32 == arg1:
        return 32, 32, 12 * 10^18, 2, 3, 1, 5, 8, 3, 0, 0, 384, 448, 9, 0, 0, 0, None
    if 33 == arg1:
        return 32, 33, 75 * 10^18, 2, 4, 3, 8, 8, 2, -2, 0, 384, 448, 8, 0, 0, 0, None
    if 34 == arg1:
        return 32, 34, 
               8 * 10^18,
               2,
               4,
               3,
               10,
               10,
               3,
               0,
               0,
               384,
               448,
               6,
               0,
               0,
               111,
               0x2e4120676c61697665206861732072656163682e20596f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f65, mem[1071 len 17] >> 632,
               0
    if 35 == arg1:
        return 32, 35, 20 * 10^18, 2, 4, 3, 12, 12, 3, 0, 0, 384, 448, 8, 'Greataxe', 0, 0, None
    if 36 == arg1:
        return 32, 36, 5 * 10^18, 2, 4, 1, 8, 10, 2, 0, 0, 384, 448, 9, 0, 0, 0, None
    if 37 == arg1:
        return 32, 37, 
               15 * 10^18,
               2,
               4,
               1,
               10,
               10,
               2,
               -1,
               0,
               384,
               448,
               12,
               'Flail, heavy',
               0,
               151,
               0x2e57697468206120666c61696c2c20796f75206765742061202b3220626f6e7573206f6e206f70706f7365642061747461636b20726f6c6c73206d61646520746f2064697361726d20616e20656e656d792028696e636c7564696e672074686520726f6c6c20746f2061766f6964206265696e672064697361726d6564206966207375636820616e20617474656d7074206661696c7329, mem[1111 len 9] >> 952,
               0
    if 38 == arg1:
        return 32, 38, 50 * 10^18, 2, 4, 3, 8, 12, 2, -1, 0, 384, 448, 10, 0, 0, 0, None
    if 39 == arg1:
        return 32, 39, 
               25 * 10^14 * 3600,
               2,
               4,
               3,
               12,
               8,
               3,
               0,
               0,
               384,
               448,
               8,
               'Guisarme',
               0,
               113,
               0x2e41206775697361726d65206861732072656163682e20596f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f65, mem[1073 len 15] >> 648,
               0
    if 40 == arg1:
        return 32, 40, 
               10 * 10^18,
               2,
               4,
               2,
               12,
               10,
               3,
               0,
               0,
               384,
               448,
               7,
               0,
               0,
               133,
               0x2e496620796f7520757365206120726561647920616374696f6e20746f2073657420612068616c6265726420616761696e73742061206368617267652c20796f75206465616c20646f75626c652064616d616765206f6e2061207375636365737366756c2068697420616761696e73742061206368617267696e6720636861726163746572, mem[1093 len 27] >> 808,
               0
    if 41 == arg1:
        return 32, 41, 
               10 * 10^18,
               2,
               4,
               2,
               10,
               8,
               3,
               0,
               0,
               384,
               448,
               5,
               0,
               0,
               181,
               0x2e41206c616e6365206465616c7320646f75626c652064616d616765207768656e20757365642066726f6d20746865206261636b206f662061206368617267696e67206d6f756e742e204974206861732072656163682c20736f20796f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f65, mem[1141 len 11] >> 1192,
               0
    if 42 == arg1:
        return 32, 42, 
               10 * 10^18,
               2,
               4,
               2,
               12,
               8,
               3,
               0,
               0,
               384,
               448,
               7,
               0,
               0,
               112,
               0x2e412072616e73657572206861732072656163682e20596f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742c2062757420796f752063616e742075736520697420616761696e737420616e2061646a6163656e7420666f65, mem[1072 len 16] >> 640,
               0
    if 43 == arg1:
        return 32, 43, 
               5 * 10^15 * 3600,
               2,
               4,
               3,
               10,
               8,
               4,
               0,
               0,
               384,
               448,
               6,
               0,
               0,
               139,
               0x2e41207363797468652063616e206265207573656420746f206d616b6520747269702061747461636b732e20496620796f7520617265207472697070656420647572696e6720796f7572206f776e207472697020617474656d70742c20796f752063616e2064726f70207468652073637974686520746f2061766f6964206265696e672074726970706564, mem[1099 len 21] >> 856,
               0
    if 44 == arg1:
        return 32, 44, 
               75 * 10^18,
               2,
               5,
               2,
               3,
               8,
               3,
               0,
               100,
               384,
               448,
               7,
               'Longbow',
               0,
               354,
               0x2e596f75206e656564206174206c656173742074776f2068616e647320746f20757365206120626f772c207265676172646c657373206f66206974732073697a652e2041206c6f6e67626f7720697320746f6f20756e7769656c647920746f20757365207768696c6520796f7520617265206d6f756e7465642e20496620796f75206861766520612070656e616c747920666f72206c6f7720537472656e6774682c206170706c7920697420746f2064616d61676520726f6c6c73207768656e20796f75207573652061206c6f6e67626f772e20496620796f752068617665206120626f6e757320666f72206869676820537472656e6774682c20796f752063616e206170706c7920697420746f2064616d61676520726f6c6c73207768656e20796f7520757365206120636f6d706f73697465206c6f6e67626f7720287365652062656c6f772920627574206e6f74206120726567756c6172206c6f6e67626f77, mem[1314 len 30] >> 2576,
               0
    if 45 == arg1:
        return 32, 45, 
               100 * 10^18,
               2,
               5,
               2,
               3,
               8,
               3,
               0,
               110,
               384,
               448,
               18,
               'Longbow, composite',
               0,
               800,
               0x2e596f75206e656564206174206c656173742074776f2068616e647320746f20757365206120626f772c207265676172646c657373206f66206974732073697a652e20596f752063616e20757365206120636f6d706f73697465206c6f6e67626f77207768696c65206d6f756e7465642e20416c6c20636f6d706f7369746520626f777320617265206d6164652077697468206120706172746963756c617220737472656e67746820726174696e672028746861742069732c20656163682072657175697265732061206d696e696d756d20537472656e677468206d6f64696669657220746f2075736520776974682070726f66696369656e6379292e20496620796f757220537472656e67746820626f6e7573206973206c657373207468616e2074686520737472656e67746820726174696e67206f662074686520636f6d706f7369746520626f772c20796f752063616e74206566666563746976656c79207573652069742c20736f20796f752074616b652061202d322070656e616c7479206f6e2061747461636b7320776974682069742e205468652064656661756c7420636f6d706f73697465206c6f6e67626f77207265717569726573206120537472656e677468206d6f646966696572206f66202b30206f722068696768657220746f2075736520776974682070726f66696369656e63792e204120636f6d706f73697465206c6f6e67626f772063616e206265206d61646520776974682061206869676820737472656e67746820726174696e6720746f2074616b6520616476616e74616765206f6620616e2061626f76652d6176657261676520537472656e6774682073636f72653b2074686973206665617475726520616c6c6f777320796f7520746f2061646420796f757220537472656e67746820626f6e757320746f2064616d6167652c20757020746f20746865206d6178696d756d20626f6e757320696e6469636174656420666f722074686520626f772e204561636820706f696e74206f6620537472656e67746820626f6e7573206772616e7465642062792074686520626f7720616464732031303020677020746f2069747320636f7374
    if 46 == arg1:
        return 32, 46, 
               30 * 10^18,
               2,
               5,
               2,
               2,
               6,
               3,
               0,
               60,
               384,
               448,
               8,
               'Shortbow',
               0,
               339,
               0x2e596f75206e656564206174206c656173742074776f2068616e647320746f20757365206120626f772c207265676172646c657373206f66206974732073697a652e20596f752063616e2075736520612073686f7274626f77207768696c65206d6f756e7465642e20496620796f75206861766520612070656e616c747920666f72206c6f7720537472656e6774682c206170706c7920697420746f2064616d61676520726f6c6c73207768656e20796f752075736520612073686f7274626f772e20496620796f752068617665206120626f6e757320666f72206869676820537472656e6774682c20796f752063616e206170706c7920697420746f2064616d61676520726f6c6c73207768656e20796f7520757365206120636f6d706f736974652073686f7274626f7720287365652062656c6f772920627574206e6f74206120726567756c61722073686f7274626f77, mem[1299 len 13] >> 2456,
               0
    if 47 == arg1:
        return 32, 47, 
               75 * 10^18,
               2,
               5,
               2,
               2,
               6,
               3,
               0,
               70,
               384,
               448,
               19,
               'Shortbow, composite',
               0,
               803,
               0x2e596f75206e656564206174206c656173742074776f2068616e647320746f20757365206120626f772c207265676172646c657373206f66206974732073697a652e20596f752063616e20757365206120636f6d706f736974652073686f7274626f77207768696c65206d6f756e7465642e20416c6c20636f6d706f7369746520626f777320617265206d6164652077697468206120706172746963756c617220737472656e67746820726174696e672028746861742069732c20656163682072657175697265732061206d696e696d756d20537472656e677468206d6f64696669657220746f2075736520776974682070726f66696369656e6379292e20496620796f757220537472656e67746820626f6e7573206973206c6f776572207468616e2074686520737472656e67746820726174696e67206f662074686520636f6d706f7369746520626f772c20796f752063616e74206566666563746976656c79207573652069742c20736f20796f752074616b652061202d322070656e616c7479206f6e2061747461636b7320776974682069742e205468652064656661756c7420636f6d706f736974652073686f7274626f77207265717569726573206120537472656e677468206d6f646966696572206f66202b30206f722068696768657220746f2075736520776974682070726f66696369656e63792e204120636f6d706f736974652073686f7274626f772063616e206265206d61646520776974682061206869676820737472656e67746820726174696e6720746f2074616b6520616476616e74616765206f6620616e2061626f76652d6176657261676520537472656e6774682073636f72653b2074686973206665617475726520616c6c6f777320796f7520746f2061646420796f757220537472656e67746820626f6e757320746f2064616d6167652c20757020746f20746865206d6178696d756d20626f6e757320696e6469636174656420666f722074686520626f772e204561636820706f696e74206f6620537472656e67746820626f6e7573206772616e7465642062792074686520626f77206164647320373520677020746f2069747320636f7374, mem[1763 len 29] >> 6168,
               0
    if 48 == arg1:
        return 32, 48, 
               2 * 10^18,
               3,
               2,
               3,
               2,
               6,
               2,
               0,
               0,
               384,
               448,
               4,
               0,
               0,
               97,
               0x2e546865206b616d612069732061207370656369616c206d6f6e6b20776561706f6e2e20546869732064657369676e6174696f6e2067697665732061206d6f6e6b207769656c64696e672061206b616d61207370656369616c206f7074696f6e73, mem[1057 len 31] >> 520,
               0
    if 49 == arg1:
        return 32, 49, 
               2 * 10^18,
               3,
               2,
               1,
               2,
               6,
               2,
               0,
               0,
               384,
               448,
               8,
               'Nunchaku',
               0,
               260,
               0x2e546865206e756e6368616b752069732061207370656369616c206d6f6e6b20776561706f6e2e20546869732064657369676e6174696f6e2067697665732061206d6f6e6b207769656c64696e672061206e756e6368616b75207370656369616c206f7074696f6e732e20576974682061206e756e6368616b752c20796f75206765742061202b3220626f6e7573206f6e206f70706f7365642061747461636b20726f6c6c73206d61646520746f2064697361726d20616e20656e656d792028696e636c7564696e672074686520726f6c6c20746f2061766f6964206265696e672064697361726d6564206966207375636820616e20617474656d7074206661696c7329, mem[1220 len 28] >> 1824,
               0
    if 50 == arg1:
        return 32, 50, 
               10^18,
               3,
               2,
               1,
               1,
               4,
               2,
               0,
               0,
               384,
               448,
               3,
               0,
               0,
               149,
               0x2e576974682061207361692c20796f75206765742061202b3420626f6e7573206f6e206f70706f7365642061747461636b20726f6c6c73206d61646520746f2064697361726d20616e20656e656d792028696e636c7564696e672074686520726f6c6c20746f2061766f6964206265696e672064697361726d6564206966207375636820616e20617474656d7074206661696c7329, mem[1109 len 11] >> 936,
               0
    if 51 == arg1:
        return 32, 51, 
               3 * 10^18,
               3,
               2,
               2,
               1,
               6,
               2,
               0,
               0,
               384,
               448,
               8,
               'Siangham',
               0,
               105,
               0x2e546865207369616e6768616d2069732061207370656369616c206d6f6e6b20776561706f6e2e20546869732064657369676e6174696f6e2067697665732061206d6f6e6b207769656c64696e672061207369616e6768616d207370656369616c206f7074696f6e73, mem[1065 len 23] >> 584,
               0
    if 52 == arg1:
        return 32, 52, 
               35 * 10^18,
               3,
               3,
               3,
               6,
               10,
               2,
               -1,
               0,
               384,
               448,
               14,
               0,
               0,
               171,
               0x2e4120626173746172642073776f726420697320746f6f206c6172676520746f2075736520696e206f6e652068616e6420776974686f7574207370656369616c20747261696e696e673b20746875732c20697420697320616e2065786f74696320776561706f6e2e2041206368617261637465722063616e20757365206120626173746172642073776f72642074776f2d68616e6465642061732061206d61727469616c20776561706f6e, mem[1131 len 21] >> 1112,
               0
    if 53 == arg1:
        return 32, 53, 
               30 * 10^18,
               3,
               3,
               3,
               8,
               10,
               3,
               0,
               0,
               384,
               448,
               15,
               0,
               0,
               323,
               0x2e41206477617276656e2077617261786520697320746f6f206c6172676520746f2075736520696e206f6e652068616e6420776974686f7574207370656369616c20747261696e696e673b20746875732c20697420697320616e2065786f74696320776561706f6e2e2041204d656469756d206368617261637465722063616e207573652061206477617276656e207761726178652074776f2d68616e6465642061732061206d61727469616c20776561706f6e2c206f722061204c617267652063726561747572652063616e20757365206974206f6e652d68616e64656420696e207468652073616d65207761792e2041206477617266207472656174732061206477617276656e207761726178652061732061206d61727469616c20776561706f6e206576656e207768656e207573696e6720697420696e206f6e652068616e64, mem[1283 len 29] >> 2328,
               0
    if 54 == arg1:
        return 32, 54, 
               60 * 10^18,
               3,
               4,
               3,
               15,
               8,
               3,
               0,
               0,
               384,
               448,
               15,
               'Axe, orc double',
               0,
               258,
               0x2e416e206f726320646f75626c6520617865206973206120646f75626c6520776561706f6e2e20596f752063616e2066696768742077697468206974206173206966206669676874696e6720776974682074776f20776561706f6e732c2062757420696620796f7520646f2c20796f7520696e63757220616c6c20746865206e6f726d616c2061747461636b2070656e616c74696573206173736f6369617465642077697468206669676874696e6720776974682074776f20776561706f6e732c206a75737420617320696620796f752077657265207573696e672061206f6e652d68616e64656420776561706f6e20616e642061206c6967687420776561706f6e, mem[1218 len 30] >> 1808,
               0
    if 55 == arg1:
        return 32, 55, 
               25 * 10^18,
               3,
               4,
               2,
               10,
               8,
               2,
               0,
               0,
               384,
               448,
               13,
               0,
               0,
               166,
               0x2e41207370696b656420636861696e206861732072656163682c20736f20796f752063616e20737472696b65206f70706f6e656e74732031302066656574206177617920776974682069742e20496e206164646974696f6e2c20756e6c696b65206d6f7374206f7468657220776561706f6e7320776974682072656163682c2069742063616e206265207573656420616761696e737420616e2061646a6163656e7420666f65, mem[1126 len 26] >> 1072,
               0
    if 56 == arg1:
        return 32, 56, 
               25 * 10^15 * 3600,
               3,
               4,
               1,
               10,
               8,
               2,
               0,
               0,
               384,
               448,
               11,
               'Flail, dire',
               0,
               389,
               0x2e41206469726520666c61696c206973206120646f75626c6520776561706f6e2e20596f752063616e2066696768742077697468206974206173206966206669676874696e6720776974682074776f20776561706f6e732c2062757420696620796f7520646f2c20796f7520696e63757220616c6c20746865206e6f726d616c2061747461636b2070656e616c74696573206173736f6369617465642077697468206669676874696e6720776974682074776f20776561706f6e732c206a75737420617320696620796f752077657265207573696e672061206f6e652d68616e64656420776561706f6e20616e642061206c6967687420776561706f6e2e2041206372656174757265207769656c64696e672061206469726520666c61696c20696e206f6e652068616e642063616e7420757365206974206173206120646f75626c6520776561706f6e2d206f6e6c79206f6e6520656e64206f662074686520776561706f6e2063616e206265207573656420696e20616e7920676976656e20726f756e64, mem[1349 len 27] >> 2856,
               0
    if 57 == arg1:
        return 32, 57, 
               100 * 10^18,
               3,
               5,
               2,
               2,
               4,
               2,
               -1,
               30,
               384,
               448,
               14,
               0,
               0,
               121,
               0x2e596f752063616e206472617720612068616e642063726f7373626f77206261636b2062792068616e642e204c6f6164696e6720612068616e642063726f7373626f772069732061206d6f766520616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[1081 len 7] >> 712,
               0
    if 58 == arg1:
        return 32, 58, 
               400 * 10^18,
               3,
               5,
               2,
               12,
               10,
               2,
               -1,
               120,
               384,
               448,
               25,
               'Crossbow, repeating heavy',
               0,
               255,
               0x2e54686520726570656174696e672063726f7373626f77202877686574686572206865617679206f72206c696768742920686f6c647320352063726f7373626f7720626f6c74732e204173206c6f6e6720617320697420686f6c647320626f6c74732c20796f752063616e2072656c6f61642069742062792070756c6c696e67207468652072656c6f6164696e67206c65766572202861206672656520616374696f6e292e204c6f6164696e672061206e65772063617365206f66203520626f6c747320697320612066756c6c2d726f756e6420616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[1215 len 1] >> 1784,
               0
    if arg1 != 59:
        return '', 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 416, 0, 0, None
    return 32, 59, 
           250 * 10^18,
           3,
           5,
           2,
           6,
           8,
           2,
           -1,
           80,
           384,
           448,
           25,
           'Crossbow, repeating light',
           0,
           255,
           0x2e54686520726570656174696e672063726f7373626f77202877686574686572206865617679206f72206c696768742920686f6c647320352063726f7373626f7720626f6c74732e204173206c6f6e6720617320697420686f6c647320626f6c74732c20796f752063616e2072656c6f61642069742062792070756c6c696e67207468652072656c6f6164696e67206c65766572202861206672656520616374696f6e292e204c6f6164696e672061206e65772063617365206f66203520626f6c747320697320612066756c6c2d726f756e6420616374696f6e20746861742070726f766f6b65732061747461636b73206f66206f70706f7274756e697479, mem[1215 len 1] >> 1784,
           0
}



}
