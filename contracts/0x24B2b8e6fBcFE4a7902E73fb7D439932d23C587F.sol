contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#  - _fallback()
#
const decimals = 18


mapping of uint256 balanceOf;
array of address allowance;
uint256 totalSupply;
array of struct stor3;
array of struct stor4;
address owner;
address uniswapV2RouterAddress;
uint8 stor7; offset 160
address uniswapV2PairAddress;
address dividendTrackerAddress;
address deadWalletAddress;
array of address tokens;
mapping of address sub_00c02d21;
array of address sub_47f86dd2;
mapping of uint8 stor13;
mapping of uint256 sub_67a6acd1;
mapping of uint256 sub_fe4e4cc1;
uint256 swapTokensAtAmount;
mapping of uint8 stor17;
uint256 rewardsFee;
uint256 liquidityFee;
uint256 marketingFee;
uint256 sub_dee3d564;
uint256 totalFees;
address _marketingWalletAddress;
uint256 gasForProcessing;
mapping of uint8 stor25;
mapping of uint8 stor26;

function sub_00c02d21(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_00c02d21[arg1]
}

function sub_02dd2d57(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return bool(stor13[arg1])
}

function totalFees() {
    return totalFees
}

function uniswapV2Router() {
    return uniswapV2RouterAddress
}

function totalSupply() {
    return totalSupply
}

function _isBlacklisted(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor17[arg1])
}

function rewardsFee() {
    return rewardsFee
}

function dividendTracker() {
    return dividendTrackerAddress
}

function _marketingWalletAddress() {
    return _marketingWalletAddress
}

function sub_47f86dd2(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 < uint256(sub_47f86dd2[arg1])
    return address(sub_47f86dd2[arg1][arg2])
}

function uniswapV2Pair() {
    return uniswapV2PairAddress
}

function tokens(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 < tokens.length
    return tokens[arg1]
}

function isExcludedFromFees(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor25[address(arg1)])
}

function sub_67a6acd1(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_67a6acd1[arg1]
}

function marketingFee() {
    return marketingFee
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function deadWallet() {
    return deadWalletAddress
}

function owner() {
    return owner
}

function liquidityFee() {
    return liquidityFee
}

function gasForProcessing() {
    return gasForProcessing
}

function automatedMarketMakerPairs(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor26[arg1])
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return uint256(allowance[address(arg1)][address(arg2)])
}

function sub_dee3d564(?) {
    return sub_dee3d564
}

function swapTokensAtAmount() {
    return swapTokensAtAmount
}

function sub_fe4e4cc1(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return sub_fe4e4cc1[arg1]
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setMarketingWallet(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    _marketingWalletAddress = arg1
}

function blacklistAddress(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor17[address(arg1)] = uint8(arg2)
}

function getClaimWait() {
    require ext_code.size(dividendTrackerAddress)
    staticcall dividendTrackerAddress.claimWait() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getLastProcessedIndex() {
    require ext_code.size(dividendTrackerAddress)
    staticcall dividendTrackerAddress.0xe7841ec0 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function getNumberOfDividendTokenHolders() {
    require ext_code.size(dividendTrackerAddress)
    staticcall dividendTrackerAddress.getNumberOfTokenHolders() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function claim() {
    require ext_code.size(dividendTrackerAddress)
    call dividendTrackerAddress.processAccount(address arg1, bool arg2) with:
         gas gas_remaining wei
        args msg.sender, 0
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function updateClaimWait(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(dividendTrackerAddress)
    call dividendTrackerAddress.0xe98030c7 with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function dividendTokenBalanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(dividendTrackerAddress)
    staticcall dividendTrackerAddress.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function excludeFromDividends(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(dividendTrackerAddress)
    call dividendTrackerAddress.0x31e79db0 with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getTotalDividendsDistributed(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(dividendTrackerAddress)
    staticcall dividendTrackerAddress.0x4d6e5e02 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function withdrawableDividendOf(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    require ext_code.size(dividendTrackerAddress)
    staticcall dividendTrackerAddress.0x204f11a8 with:
            gas gas_remaining wei
           args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function processDividendTracker(uint256 arg1) {
    require calldata.size - 4 >= 32
    require ext_code.size(dividendTrackerAddress)
    call dividendTrackerAddress.process(uint256 arg1) with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], arg1, 0, tx.origin);
}

function excludeFromFees(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg2 == bool(stor25[address(arg1)]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'BabyDaniele: Account is already the value of 'excluded''
    stor25[address(arg1)] = uint8(arg2)
    emit ExcludeFromFees(arg2, arg1);
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    uint256(allowance[address(msg.sender)][address(arg1)]) = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function setMarketingFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    marketingFee = arg1
    if rewardsFee > !arg1:
        revert with 0, 17
    if rewardsFee + arg1 < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    sub_dee3d564 = rewardsFee + arg1
    if rewardsFee + arg1 > !liquidityFee:
        revert with 0, 17
    if liquidityFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + arg1 + liquidityFee
}

function setRewardsFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    rewardsFee = arg1
    if arg1 > !marketingFee:
        revert with 0, 17
    if arg1 + marketingFee < arg1:
        revert with 0, 'SafeMath: addition overflow'
    sub_dee3d564 = arg1 + marketingFee
    if arg1 + marketingFee > !liquidityFee:
        revert with 0, 17
    if liquidityFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = arg1 + marketingFee + liquidityFee
}

function sub_e7741137(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == bool(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor13[address(arg1)] = uint8(bool(arg2))
    require ext_code.size(dividendTrackerAddress)
    call dividendTrackerAddress.0xe7741137 with:
         gas gas_remaining wei
        args address(arg1), bool(arg2)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit 0xe633a6a2: address(arg1), bool(arg2)
}

function setLiquiditFee(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    liquidityFee = arg1
    if rewardsFee > !marketingFee:
        revert with 0, 17
    if rewardsFee + marketingFee < rewardsFee:
        revert with 0, 'SafeMath: addition overflow'
    sub_dee3d564 = rewardsFee + marketingFee
    if rewardsFee + marketingFee > !liquidityFee:
        revert with 0, 17
    if liquidityFee < 0:
        revert with 0, 'SafeMath: addition overflow'
    totalFees = rewardsFee + marketingFee + liquidityFee
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if arg2 > uint256(allowance[msg.sender][address(arg1)]):
        revert with 0, 32, 37, 0x6545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a6572, mem[165 len 27] >> 40, 0
    if uint256(allowance[msg.sender][address(arg1)]) < arg2:
        revert with 0, 17
    if not msg.sender:
        revert with 0, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0, 'ERC20: approve to the zero address'
    uint256(allowance[address(msg.sender)][address(arg1)]) = uint256(allowance[msg.sender][address(arg1)]) - arg2
    emit Approval((uint256(allowance[msg.sender][address(arg1)]) - arg2), msg.sender, arg1);
    return 1
}

function getAccountDividendsInfoAtIndex(uint256 arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg2 == arg2
    require ext_code.size(dividendTrackerAddress)
    staticcall dividendTrackerAddress.getAccountAtIndex(uint256 arg1, address arg2) with:
            gas gas_remaining wei
           args arg1, arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 256
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    return ext_call.return_data[12 len 20], 
           ext_call.return_data[32],
           ext_call.return_data[64],
           ext_call.return_data[96],
           ext_call.return_data[128],
           ext_call.return_data[160],
           ext_call.return_data[192],
           ext_call.return_data[224]
}

function updateGasForProcessing(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 < 200000:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'BabyDaniele: gasForProcessing must be between 200,000 and 500,000'
    if arg1 > 500000:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'BabyDaniele: gasForProcessing must be between 200,000 and 500,000'
    if arg1 == gasForProcessing:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'BabyDaniele: Cannot update gasForProcessing to same value'
    emit GasForProcessingUpdated(arg1, gasForProcessing);
    gasForProcessing = arg1
}

function getAccountDividendsInfo(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    require ext_code.size(dividendTrackerAddress)
    staticcall dividendTrackerAddress.getAccount(address arg1, address arg2) with:
            gas gas_remaining wei
           args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 256
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    return ext_call.return_data[12 len 20], 
           ext_call.return_data[32],
           ext_call.return_data[64],
           ext_call.return_data[96],
           ext_call.return_data[128],
           ext_call.return_data[160],
           ext_call.return_data[192],
           ext_call.return_data[224]
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if uint256(allowance[msg.sender][address(arg1)]) > !arg2:
        revert with 0, 17
    if uint256(allowance[msg.sender][address(arg1)]) + arg2 < uint256(allowance[msg.sender][address(arg1)]):
        revert with 0, 'SafeMath: addition overflow'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    uint256(allowance[address(msg.sender)][address(arg1)]) = uint256(allowance[msg.sender][address(arg1)]) + arg2
    emit Approval((uint256(allowance[msg.sender][address(arg1)]) + arg2), msg.sender, arg1);
    return 1
}

function setAutomatedMarketMakerPair(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2PairAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'BabyDaniele: The SpookySwap pair cannot be removed from automatedMarketMakerPairs'
    if arg2 == bool(stor26[address(arg1)]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'BabyDaniele: Automated market maker pair is already set to that value'
    stor26[address(arg1)] = uint8(arg2)
    if arg2:
        require ext_code.size(dividendTrackerAddress)
        call dividendTrackerAddress.0x31e79db0 with:
             gas gas_remaining wei
            args arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    emit SetAutomatedMarketMakerPair(arg1, arg2);
}

function excludeMultipleAccountsFromFees(address[] arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    require arg1.length <= test266151307()
    require arg1 + (32 * arg1.length) + 36 <= calldata.size
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    idx = 0
    while idx < arg1.length:
        require cd[((32 * idx) + arg1 + 36)] == address(cd[((32 * idx) + arg1 + 36)])
        mem[0] = address(cd[((32 * idx) + arg1 + 36)])
        mem[32] = 25
        stor25[address(cd[((32 * idx) + arg1 + 36)])] = uint8(arg2)
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    idx = 0
    s = 192
    t = arg1 + 36
    while idx < arg1.length:
        require cd[t] == address(cd[t])
        mem[s] = address(cd[t])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    emit ExcludeMultipleAccountsFromFees(Array(len=arg1.length, data=mem[192 len 32 * arg1.length]), arg2);
}

function updateDividendTracker(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if dividendTrackerAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'BabyDaniele: The dividend tracker already has that address'
    require ext_code.size(arg1)
    staticcall arg1.0x8da5cb5b with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != this.address:
        revert with 0, 'BabyDaniele: The new dividend tracker must be owned by the BabyDaniele token contract'
    require ext_code.size(arg1)
    call arg1.0x31e79db0 with:
         gas gas_remaining wei
        args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(arg1)
    call arg1.0x31e79db0 with:
         gas gas_remaining wei
        args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(arg1)
    call arg1.0x31e79db0 with:
         gas gas_remaining wei
        args owner
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(arg1)
    call arg1.0x31e79db0 with:
         gas gas_remaining wei
        args uniswapV2RouterAddress
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit UpdateDividendTracker(arg1, dividendTrackerAddress);
    dividendTrackerAddress = arg1
}

function updateUniswapV2Router(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if uniswapV2RouterAddress == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'BabyDaniele: The router already has that address'
    emit UpdateUniswapV2Router(arg1, uniswapV2RouterAddress);
    uniswapV2RouterAddress = arg1
    require ext_code.size(arg1)
    staticcall arg1.factory() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(uniswapV2RouterAddress)
    staticcall uniswapV2RouterAddress.WETH() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).createPair(address arg1, address arg2) with:
         gas gas_remaining wei
        args address(this.address), address(ext_call.return_data[0])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    uniswapV2PairAddress = ext_call.return_data[12 len 20]
    if not this.address:
        revert with 0, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0, 'ERC20: approve to the zero address'
    uint256(allowance[address(this.address)][address(arg1)]) = -1
    emit Approval(-1, this.address, arg1);
}

function sub_1d9c6a01(?) {
    require calldata.size - 4 >= 160
    require cd[4] == address(cd[4])
    require cd[36] == address(cd[36])
    require cd[68] <= test266151307()
    require cd[68] + 35 < calldata.size
    if ('cd', 68).length > test266151307():
        revert with 0, 65
    if ceil32(32 * ('cd', 68).length) + 97 > test266151307() or ceil32(32 * ('cd', 68).length) + 97 < 96:
        revert with 0, 65
    require (32 * ('cd', 68).length) + cd[68] + 36 <= calldata.size
    s = 128
    idx = cd[68] + 36
    while idx < (32 * ('cd', 68).length) + cd[68] + 36:
        require cd[idx] == address(cd[idx])
        mem[s] = cd[idx]
        s = s + 32
        idx = idx + 32
        continue 
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(cd[4]):
        revert with 0, 'BabyDaniele: Token address is 0'
    if not address(cd[36]):
        revert with 0, 'BabyDaniele: Router address is 0'
    if sub_00c02d21[address(cd[4])]:
        revert with 0, 'BabyDaniele: Already added token'
    sub_00c02d21[address(cd[4])] = address(cd[36])
    uint256(sub_47f86dd2[address(cd[4])]) = ('cd', 68).length
    if not ('cd', 68).length:
        idx = 0
        while uint256(sub_47f86dd2[address(cd[4])]) > idx:
            uint256(sub_47f86dd2[address(cd[4])][idx]) = 0
            idx = idx + 1
            continue 
    else:
        s = 0
        idx = 128
        while (32 * ('cd', 68).length) + 128 > idx:
            address(sub_47f86dd2[address(cd[4])][s]) = mem[idx + 12 len 20]
            s = s + 1
            idx = idx + 32
            continue 
        idx = Mask(251, 0, (32 * ('cd', 68).length) + 31) >> 5
        while uint256(sub_47f86dd2[address(cd[4])]) > idx:
            uint256(sub_47f86dd2[address(cd[4])][idx]) = 0
            idx = idx + 1
            continue 
    sub_67a6acd1[address(cd[4])] = cd[100]
    sub_fe4e4cc1[address(cd[4])] = cd[132]
    tokens.length++
    tokens[tokens.length] = address(cd[4])
    require ext_code.size(dividendTrackerAddress)
    call dividendTrackerAddress.addToken(address arg1) with:
         gas gas_remaining wei
        args address(cd[4])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit NewToken(address(cd[4]));
}

function name() {
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor3.length):
            if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor3.length):
                if 31 < uint255(stor3.length) * 0.5:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor3.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        else:
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 0, 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        mem[ceil32(uint255(stor3.length) * 0.5) + 192 len ceil32(uint255(stor3.length) * 0.5)] = mem[128 len ceil32(uint255(stor3.length) * 0.5)]
        if ceil32(uint255(stor3.length) * 0.5) > uint255(stor3.length) * 0.5:
            mem[ceil32(uint255(stor3.length) * 0.5) + (uint255(stor3.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)], mem[(2 * ceil32(uint255(stor3.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor3.length) * 0.5)]), 
    if bool(stor3.length) == stor3.length.field_1 < 32:
        revert with 0, 34
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor3.length):
            if 31 < uint255(stor3.length) * 0.5:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while (uint255(stor3.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    else:
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 0, 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
    if ceil32(stor3.length.field_1) > stor3.length.field_1:
        mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0
    return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
}

function symbol() {
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor4.length):
            if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor4.length):
                if 31 < uint255(stor4.length) * 0.5:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor4.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 0, 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(uint255(stor4.length) * 0.5) + 192 len ceil32(uint255(stor4.length) * 0.5)] = mem[128 len ceil32(uint255(stor4.length) * 0.5)]
        if ceil32(uint255(stor4.length) * 0.5) > uint255(stor4.length) * 0.5:
            mem[ceil32(uint255(stor4.length) * 0.5) + (uint255(stor4.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)], mem[(2 * ceil32(uint255(stor4.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor4.length) * 0.5)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 0, 34
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor4.length):
            if 31 < uint255(stor4.length) * 0.5:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while (uint255(stor4.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 0, 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if stor17[address(msg.sender)]:
        revert with 0, 'Blacklisted address'
    if stor17[address(arg1)]:
        revert with 0, 'Blacklisted address'
    if not arg2:
        if not msg.sender:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
        if not arg1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
        if 0 > balanceOf[address(msg.sender)]:
            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
        if balanceOf[address(msg.sender)] < 0:
            revert with 0, 17
        if balanceOf[arg1] > -1:
            revert with 0, 17
        if balanceOf[arg1] < balanceOf[arg1]:
            revert with 0, 'SafeMath: addition overflow'
        balanceOf[address(arg1)] = balanceOf[arg1]
        emit Transfer(0, msg.sender, arg1);
    else:
        if balanceOf[this.address] < swapTokensAtAmount:
            if stor25[address(msg.sender)]:
                if not msg.sender:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                if not arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                if arg2 > balanceOf[address(msg.sender)]:
                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                if balanceOf[address(msg.sender)] < arg2:
                    revert with 0, 17
                balanceOf[address(msg.sender)] -= arg2
                if balanceOf[arg1] > !arg2:
                    revert with 0, 17
                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                    revert with 0, 'SafeMath: addition overflow'
                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                emit Transfer(arg2, msg.sender, arg1);
            else:
                if stor25[address(arg1)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[arg1] > !arg2:
                        revert with 0, 17
                    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if stor7:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[arg1] > !arg2:
                            revert with 0, 17
                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if not arg2:
                            if not stor26[address(arg1)]:
                                if 0 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < 0:
                                    revert with 0, 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if 0 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < 0:
                                    revert with 0, 17
                                if balanceOf[this.address] > -1:
                                    revert with 0, 17
                                if balanceOf[this.address] < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address]
                                emit Transfer(0, msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 0, 17
                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 0, 17
                                    if balanceOf[this.address] > -1:
                                        revert with 0, 17
                                    if balanceOf[this.address] < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 0, 17
                                    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if arg2 and 1 > -1 / arg2:
                                        revert with 0, 17
                                    if not arg2:
                                        revert with 0, 18
                                    if arg2 / arg2 != 1:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if 0 > !(arg2 / 100):
                                        revert with 0, 17
                                    if arg2 / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 / 100:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 / 100:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2 / 100
                                    if balanceOf[this.address] > !(arg2 / 100):
                                        revert with 0, 17
                                    if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                    emit Transfer((arg2 / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                    if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                        revert with 0, 17
                                    if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                    emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                        else:
                            if arg2 and totalFees > -1 / arg2:
                                revert with 0, 17
                            if not arg2:
                                revert with 0, 18
                            if arg2 * totalFees / arg2 != totalFees:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                            if not stor26[address(arg1)]:
                                if arg2 * totalFees / 100 > arg2:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if arg2 < arg2 * totalFees / 100:
                                    revert with 0, 17
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not this.address:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                    revert with 0, 17
                                if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                if not msg.sender:
                                    revert with 0, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0, 'ERC20: transfer to the zero address'
                                if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                    revert with 0, 17
                                if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                            else:
                                if not arg2:
                                    if arg2 * totalFees / 100 > -1:
                                        revert with 0, 17
                                    if arg2 * totalFees / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * totalFees / 100:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                        revert with 0, 17
                                    if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                        revert with 0, 17
                                    if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and 1 > -1 / arg2:
                                        revert with 0, 17
                                    if not arg2:
                                        revert with 0, 18
                                    if arg2 / arg2 != 1:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    if arg2 * totalFees / 100 > !(arg2 / 100):
                                        revert with 0, 17
                                    if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                        revert with 0, 17
                                    if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                        revert with 0, 17
                                    if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
            require ext_code.size(dividendTrackerAddress)
            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args msg.sender, balanceOf[address(msg.sender)]
            require ext_code.size(dividendTrackerAddress)
            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args address(arg1), balanceOf[address(arg1)]
            if not stor7:
                require ext_code.size(dividendTrackerAddress)
                call dividendTrackerAddress.process(uint256 arg1) with:
                     gas gas_remaining wei
                    args gasForProcessing
                if ext_call.success:
                    require return_data.size >= 96
                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
        else:
            if stor7:
                if stor25[address(msg.sender)]:
                    if not msg.sender:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                    if not arg1:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                    if arg2 > balanceOf[address(msg.sender)]:
                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                    if balanceOf[address(msg.sender)] < arg2:
                        revert with 0, 17
                    balanceOf[address(msg.sender)] -= arg2
                    if balanceOf[arg1] > !arg2:
                        revert with 0, 17
                    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                        revert with 0, 'SafeMath: addition overflow'
                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                    emit Transfer(arg2, msg.sender, arg1);
                else:
                    if stor25[address(arg1)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[arg1] > !arg2:
                            revert with 0, 17
                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor7:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[arg1] > !arg2:
                                revert with 0, 17
                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if not arg2:
                                if not stor26[address(arg1)]:
                                    if 0 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < 0:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if 0 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < 0:
                                        revert with 0, 17
                                    if balanceOf[this.address] > -1:
                                        revert with 0, 17
                                    if balanceOf[this.address] < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                    emit Transfer(0, msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 0, 17
                                    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 0, 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 0, 17
                                        if balanceOf[this.address] > -1:
                                            revert with 0, 17
                                        if balanceOf[this.address] < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address]
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if arg2 and 1 > -1 / arg2:
                                            revert with 0, 17
                                        if not arg2:
                                            revert with 0, 18
                                        if arg2 / arg2 != 1:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if 0 > !(arg2 / 100):
                                            revert with 0, 17
                                        if arg2 / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 / 100:
                                            revert with 0, 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 / 100:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2 / 100
                                        if balanceOf[this.address] > !(arg2 / 100):
                                            revert with 0, 17
                                        if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                        emit Transfer((arg2 / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                        emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                            else:
                                if arg2 and totalFees > -1 / arg2:
                                    revert with 0, 17
                                if not arg2:
                                    revert with 0, 18
                                if arg2 * totalFees / arg2 != totalFees:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                if not stor26[address(arg1)]:
                                    if arg2 * totalFees / 100 > arg2:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if arg2 < arg2 * totalFees / 100:
                                        revert with 0, 17
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not this.address:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                        revert with 0, 17
                                    if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                    if not msg.sender:
                                        revert with 0, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0, 'ERC20: transfer to the zero address'
                                    if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                        revert with 0, 17
                                    if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if arg2 * totalFees / 100 > -1:
                                            revert with 0, 17
                                        if arg2 * totalFees / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * totalFees / 100:
                                            revert with 0, 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                            revert with 0, 17
                                        if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and 1 > -1 / arg2:
                                            revert with 0, 17
                                        if not arg2:
                                            revert with 0, 18
                                        if arg2 / arg2 != 1:
                                            revert with 0, 'SafeMath: multiplication overflow'
                                        if arg2 * totalFees / 100 > !(arg2 / 100):
                                            revert with 0, 17
                                        if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                            revert with 0, 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                        if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                            revert with 0, 17
                                        if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                        emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
                require ext_code.size(dividendTrackerAddress)
                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args msg.sender, balanceOf[address(msg.sender)]
                require ext_code.size(dividendTrackerAddress)
                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(arg1), balanceOf[address(arg1)]
                if not stor7:
                    require ext_code.size(dividendTrackerAddress)
                    call dividendTrackerAddress.process(uint256 arg1) with:
                         gas gas_remaining wei
                        args gasForProcessing
                    if ext_call.success:
                        require return_data.size >= 96
                        emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
            else:
                if stor26[address(msg.sender)]:
                    if stor25[address(msg.sender)]:
                        if not msg.sender:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                        if not arg1:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                        if arg2 > balanceOf[address(msg.sender)]:
                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                        if balanceOf[address(msg.sender)] < arg2:
                            revert with 0, 17
                        balanceOf[address(msg.sender)] -= arg2
                        if balanceOf[arg1] > !arg2:
                            revert with 0, 17
                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                            revert with 0, 'SafeMath: addition overflow'
                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                        emit Transfer(arg2, msg.sender, arg1);
                    else:
                        if stor25[address(arg1)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[arg1] > !arg2:
                                revert with 0, 17
                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor7:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 0, 17
                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if not arg2:
                                    if not stor26[address(arg1)]:
                                        if 0 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < 0:
                                            revert with 0, 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if 0 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < 0:
                                            revert with 0, 17
                                        if balanceOf[this.address] > -1:
                                            revert with 0, 17
                                        if balanceOf[this.address] < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address]
                                        emit Transfer(0, msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 0, 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if arg2 and 1 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if arg2 / arg2 != 1:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if 0 > !(arg2 / 100):
                                                revert with 0, 17
                                            if arg2 / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 / 100:
                                                revert with 0, 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 / 100:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2 / 100
                                            if balanceOf[this.address] > !(arg2 / 100):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                            emit Transfer((arg2 / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                            emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                                else:
                                    if arg2 and totalFees > -1 / arg2:
                                        revert with 0, 17
                                    if not arg2:
                                        revert with 0, 18
                                    if arg2 * totalFees / arg2 != totalFees:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                    if not stor26[address(arg1)]:
                                        if arg2 * totalFees / 100 > arg2:
                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                        if arg2 < arg2 * totalFees / 100:
                                            revert with 0, 17
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not this.address:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                            revert with 0, 17
                                        if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if arg2 * totalFees / 100 > -1:
                                                revert with 0, 17
                                            if arg2 * totalFees / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 0, 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and 1 > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if arg2 / arg2 != 1:
                                                revert with 0, 'SafeMath: multiplication overflow'
                                            if arg2 * totalFees / 100 > !(arg2 / 100):
                                                revert with 0, 17
                                            if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                                revert with 0, 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
                    require ext_code.size(dividendTrackerAddress)
                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, balanceOf[address(msg.sender)]
                    require ext_code.size(dividendTrackerAddress)
                    call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(arg1), balanceOf[address(arg1)]
                    if not stor7:
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.process(uint256 arg1) with:
                             gas gas_remaining wei
                            args gasForProcessing
                        if ext_call.success:
                            require return_data.size >= 96
                            emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                else:
                    if owner == msg.sender:
                        if stor25[address(msg.sender)]:
                            if not msg.sender:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                            if not arg1:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                            if arg2 > balanceOf[address(msg.sender)]:
                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                            if balanceOf[address(msg.sender)] < arg2:
                                revert with 0, 17
                            balanceOf[address(msg.sender)] -= arg2
                            if balanceOf[arg1] > !arg2:
                                revert with 0, 17
                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                revert with 0, 'SafeMath: addition overflow'
                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                            emit Transfer(arg2, msg.sender, arg1);
                        else:
                            if stor25[address(arg1)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 0, 17
                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor7:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 0, 17
                                    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if not arg2:
                                        if not stor26[address(arg1)]:
                                            if 0 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < 0:
                                                revert with 0, 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if 0 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < 0:
                                                revert with 0, 17
                                            if balanceOf[this.address] > -1:
                                                revert with 0, 17
                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                            emit Transfer(0, msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 0, 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if arg2 and 1 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if arg2 / arg2 != 1:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if 0 > !(arg2 / 100):
                                                    revert with 0, 17
                                                if arg2 / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 / 100:
                                                    revert with 0, 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 / 100:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2 / 100
                                                if balanceOf[this.address] > !(arg2 / 100):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                                emit Transfer((arg2 / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                                emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                                    else:
                                        if arg2 and totalFees > -1 / arg2:
                                            revert with 0, 17
                                        if not arg2:
                                            revert with 0, 18
                                        if arg2 * totalFees / arg2 != totalFees:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                        if not stor26[address(arg1)]:
                                            if arg2 * totalFees / 100 > arg2:
                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                            if arg2 < arg2 * totalFees / 100:
                                                revert with 0, 17
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not this.address:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                revert with 0, 17
                                            if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                        else:
                                            if not arg2:
                                                if arg2 * totalFees / 100 > -1:
                                                    revert with 0, 17
                                                if arg2 * totalFees / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 0, 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if arg2 and 1 > -1 / arg2:
                                                    revert with 0, 17
                                                if not arg2:
                                                    revert with 0, 18
                                                if arg2 / arg2 != 1:
                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                if arg2 * totalFees / 100 > !(arg2 / 100):
                                                    revert with 0, 17
                                                if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                                    revert with 0, 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                                if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                                emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, balanceOf[address(msg.sender)]
                        require ext_code.size(dividendTrackerAddress)
                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(arg1), balanceOf[address(arg1)]
                        if not stor7:
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.process(uint256 arg1) with:
                                 gas gas_remaining wei
                                args gasForProcessing
                            if ext_call.success:
                                require return_data.size >= 96
                                emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                    else:
                        if owner == arg1:
                            if stor25[address(msg.sender)]:
                                if not msg.sender:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                if not arg1:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                if arg2 > balanceOf[address(msg.sender)]:
                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                if balanceOf[address(msg.sender)] < arg2:
                                    revert with 0, 17
                                balanceOf[address(msg.sender)] -= arg2
                                if balanceOf[arg1] > !arg2:
                                    revert with 0, 17
                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                    revert with 0, 'SafeMath: addition overflow'
                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                emit Transfer(arg2, msg.sender, arg1);
                            else:
                                if stor25[address(arg1)]:
                                    if not msg.sender:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                    if not arg1:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                    if arg2 > balanceOf[address(msg.sender)]:
                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                    if balanceOf[address(msg.sender)] < arg2:
                                        revert with 0, 17
                                    balanceOf[address(msg.sender)] -= arg2
                                    if balanceOf[arg1] > !arg2:
                                        revert with 0, 17
                                    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                    emit Transfer(arg2, msg.sender, arg1);
                                else:
                                    if stor7:
                                        if not msg.sender:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[166 len 26] >> 48, 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                    else:
                                        if not arg2:
                                            if not stor26[address(arg1)]:
                                                if 0 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < 0:
                                                    revert with 0, 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if 0 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < 0:
                                                    revert with 0, 17
                                                if balanceOf[this.address] > -1:
                                                    revert with 0, 17
                                                if balanceOf[this.address] < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address]
                                                emit Transfer(0, msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if 0 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < 0:
                                                        revert with 0, 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if 0 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < 0:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] > -1:
                                                        revert with 0, 17
                                                    if balanceOf[this.address] < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address]
                                                    emit Transfer(0, msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] -= arg2
                                                    if balanceOf[arg1] > !arg2:
                                                        revert with 0, 17
                                                    if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                    emit Transfer(arg2, msg.sender, arg1);
                                                else:
                                                    if arg2 and 1 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if arg2 / arg2 != 1:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if 0 > !(arg2 / 100):
                                                        revert with 0, 17
                                                    if arg2 / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 / 100:
                                                        revert with 0, 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 / 100:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] -= arg2 / 100
                                                    if balanceOf[this.address] > !(arg2 / 100):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                                    emit Transfer((arg2 / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                                        revert with 0, 17
                                                    if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                                    emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                                        else:
                                            if arg2 and totalFees > -1 / arg2:
                                                revert with 0, 17
                                            if not arg2:
                                                revert with 0, 18
                                            if arg2 * totalFees / arg2 != totalFees:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                            if not stor26[address(arg1)]:
                                                if arg2 * totalFees / 100 > arg2:
                                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                                if arg2 < arg2 * totalFees / 100:
                                                    revert with 0, 17
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not this.address:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[294 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                    revert with 0, 17
                                                if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                    revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[390 len 26] >> 48, 0
                                                if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                            else:
                                                if not arg2:
                                                    if arg2 * totalFees / 100 > -1:
                                                        revert with 0, 17
                                                    if arg2 * totalFees / 100 > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < arg2 * totalFees / 100:
                                                        revert with 0, 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                    if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                        revert with 0, 17
                                                    if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                else:
                                                    if arg2 and 1 > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if arg2 / arg2 != 1:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    if arg2 * totalFees / 100 > !(arg2 / 100):
                                                        revert with 0, 17
                                                    if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                                    if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                                        revert with 0, 17
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not this.address:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[358 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                                    if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                                        revert with 0, 17
                                                    if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                                    emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                                    if not msg.sender:
                                                        revert with 0, 'ERC20: transfer from the zero address'
                                                    if not arg1:
                                                        revert with 0, 'ERC20: transfer to the zero address'
                                                    if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                        revert with 0, 32, 38, 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[454 len 26] >> 48, 0
                                                    if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                                        revert with 0, 17
                                                    balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                                    if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                                        revert with 0, 17
                                                    if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                                    emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args msg.sender, balanceOf[address(msg.sender)]
                            require ext_code.size(dividendTrackerAddress)
                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                 gas gas_remaining wei
                                args address(arg1), balanceOf[address(arg1)]
                            if not stor7:
                                require ext_code.size(dividendTrackerAddress)
                                call dividendTrackerAddress.process(uint256 arg1) with:
                                     gas gas_remaining wei
                                    args gasForProcessing
                                if ext_call.success:
                                    require return_data.size >= 96
                                    emit ProcessedDividendTracker(ext_call.return_data[0], ext_call.return_data[32], ext_call.return_data[64], gasForProcessing, 1, tx.origin);
                        else:
                            stor7 = 1
                            if not balanceOf[this.address]:
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                if not totalFees:
                                    revert with 0, 'SafeMath: division by zero', 0
                                mem[160] = 26
                                mem[192] = 'SafeMath: division by zero'
                                mem[224] = 30
                                mem[256] = 'SafeMath: subtraction overflow'
                                if 0 / totalFees / 2 > 0 / totalFees:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if 0 / totalFees < 0 / totalFees / 2:
                                    revert with 0, 17
                                mem[288] = 2
                                mem[320] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.WETH() with:
                                        gas gas_remaining wei
                                mem[384] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[352] = ext_call.return_data[12 len 20]
                                mem[ceil32(return_data.size) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + 388] = 0 / totalFees / 2
                                idx = 0
                                s = 320
                                t = ceil32(return_data.size) + 580
                                while idx < 2:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, 0 / totalFees), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 580 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + 384] = 30
                                mem[ceil32(return_data.size) + 416] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                mem[ceil32(return_data.size) + 516] = 0
                                mem[ceil32(return_data.size) + 548] = 0
                                mem[ceil32(return_data.size) + 580] = 0
                                mem[ceil32(return_data.size) + 612] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (0 / totalFees) - (0 / totalFees / 2), 0, 0, 0, block.timestamp
                                mem[ceil32(return_data.size) + 448 len 96] = ext_call.return_data[0 len 96]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, 0 / totalFees), 0, (0 / totalFees) - (0 / totalFees / 2));
                                mem[0] = this.address
                                mem[32] = 0
                                mem[(2 * ceil32(return_data.size)) + 448] = 2
                                mem[(2 * ceil32(return_data.size)) + 480] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.WETH() with:
                                        gas gas_remaining wei
                                mem[(2 * ceil32(return_data.size)) + 544] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = (4 * ceil32(return_data.size)) + 544
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[(2 * ceil32(return_data.size)) + 512] = ext_call.return_data[12 len 20]
                                mem[(4 * ceil32(return_data.size)) + 544] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                mem[(4 * ceil32(return_data.size)) + 548] = balanceOf[this.address]
                                mem[(4 * ceil32(return_data.size)) + 580] = 0
                                mem[(4 * ceil32(return_data.size)) + 612] = 160
                                mem[(4 * ceil32(return_data.size)) + 708] = 2
                                idx = 0
                                s = (2 * ceil32(return_data.size)) + 480
                                t = (4 * ceil32(return_data.size)) + 740
                                while idx < mem[(2 * ceil32(return_data.size)) + 448]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(4 * ceil32(return_data.size)) + 644] = this.address
                                mem[(4 * ceil32(return_data.size)) + 676] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                     gas gas_remaining wei
                                    args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 448]) + -mem[64] + 736]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5123 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5123] = 30
                                mem[_5123 + 32] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                idx = 0
                                s = 0
                                while idx < tokens.length:
                                    mem[0] = tokens[idx]
                                    mem[32] = 13
                                    if stor13[stor10[idx]]:
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s
                                        continue 
                                    if s == -1:
                                        revert with 0, 17
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + 1
                                    continue 
                                _5155 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5155] = 26
                                mem[_5155 + 32] = 'SafeMath: division by zero'
                                if not s:
                                    revert with 0, 'SafeMath: division by zero', 0
                                _5172 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5172] = 30
                                mem[_5172 + 32] = 'SafeMath: subtraction overflow'
                                if 1 > s:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if s < 1:
                                    revert with 0, 17
                                if not 0 / s:
                                    _5185 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5185] = 30
                                    mem[_5185 + 32] = 'SafeMath: subtraction overflow'
                                    idx = 0
                                    while idx < tokens.length:
                                        mem[0] = tokens[idx]
                                        mem[32] = 13
                                        if not stor13[stor10[idx]]:
                                            _10885 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10885] = 30
                                            mem[_10885 + 32] = 'SafeMath: subtraction overflow'
                                            if 1 > s:
                                                _10891 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _10891 + 68] = mem[idx + _10885 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10891 + 98] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10891 + -mem[64] + 100
                                            if s < 1:
                                                revert with 0, 17
                                            if 0 == s - 1:
                                                _11130 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11130] = 26
                                                mem[_11130 + 32] = 'SafeMath: division by zero'
                                                if not sub_dee3d564:
                                                    _11178 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 26
                                                    idx = 0
                                                    while idx < 26:
                                                        mem[idx + _11178 + 68] = mem[idx + _11130 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_11178 + 94] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _11178 + -mem[64] + 100
                                                mem[0] = tokens[idx]
                                                mem[32] = 12
                                                _11434 = mem[64]
                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                mem[_11434] = uint256(sub_47f86dd2[stor10[idx]])
                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 11
                                                    _11505 = mem[64]
                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 0
                                                    mem[mem[64] + 36] = 128
                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                    t = 0
                                                    u = _11434 + 32
                                                    v = mem[64] + 164
                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[v] = mem[u + 12 len 20]
                                                        t = t + 1
                                                        u = u + 32
                                                        v = v + 32
                                                        continue 
                                                    mem[_11505 + 68] = _marketingWalletAddress
                                                    mem[_11505 + 100] = block.timestamp
                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                       value 0 / sub_dee3d564 wei
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _11505 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if 0 == s - 1:
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 12
                                                        _16873 = mem[64]
                                                        mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                        mem[_16873] = uint256(sub_47f86dd2[stor10[idx]])
                                                        if not uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _16912 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _16873 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_16912 + 68] = this.address
                                                            mem[_16912 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value eth.balance(this.address) wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _16912 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18970 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _19010 = mem[_18970]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _19010
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _19010
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _19130 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_19130] == bool(mem[_19130])
                                                            if mem[_19130]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _19010:
                                                                    _19572 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_19572] = 26
                                                                    mem[_19572 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _19699 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _19699 + 68] = mem[idx + _19572 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_19699 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _19699 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _19010 and sub_67a6acd1[stor10[idx]] > -1 / _19010:
                                                                        revert with 0, 17
                                                                    if not _19010:
                                                                        revert with 0, 18
                                                                    if _19010 * sub_67a6acd1[stor10[idx]] / _19010 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _20012 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_20012] = 26
                                                                    mem[_20012 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _20286 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _20286 + 68] = mem[idx + _20012 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_20286 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _20286 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _19010 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _19010 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _19010 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_19010 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            mem[_16873 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                            s = _16873 + 32
                                                            t = sha3(sha3(tokens[idx], 12))
                                                            while _16873 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                mem[s + 32] = address(allowance[t])
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _21983 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _16873 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_21983 + 68] = this.address
                                                            mem[_21983 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value eth.balance(this.address) wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _21983 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _25908 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _25988 = mem[_25908]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _25988
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _25988
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _26228 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_26228] == bool(mem[_26228])
                                                            if mem[_26228]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _25988:
                                                                    _26548 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26548] = 26
                                                                    mem[_26548 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _26628 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _26628 + 68] = mem[idx + _26548 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_26628 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _26628 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _25988 and sub_67a6acd1[stor10[idx]] > -1 / _25988:
                                                                        revert with 0, 17
                                                                    if not _25988:
                                                                        revert with 0, 18
                                                                    if _25988 * sub_67a6acd1[stor10[idx]] / _25988 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _27028 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_27028] = 26
                                                                    mem[_27028 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _27412 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _27412 + 68] = mem[idx + _27028 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_27412 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _27412 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _25988 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _25988 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _25988 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_25988 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        _16931 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_16931] = 26
                                                        mem[_16931 + 32] = 'SafeMath: division by zero'
                                                        if not sub_dee3d564:
                                                            _16959 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 26
                                                            idx = 0
                                                            while idx < 26:
                                                                mem[idx + _16959 + 68] = mem[idx + _16931 + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_16959 + 94] = 0
                                                            revert with memory
                                                              from mem[64]
                                                               len _16959 + -mem[64] + 100
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 12
                                                        _17169 = mem[64]
                                                        mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                        mem[_17169] = uint256(sub_47f86dd2[stor10[idx]])
                                                        if not uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _17220 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _17169 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_17220 + 68] = this.address
                                                            mem[_17220 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value 0 / sub_dee3d564 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _17220 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18971 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _19011 = mem[_18971]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _19011
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _19011
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _19131 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_19131] == bool(mem[_19131])
                                                            if mem[_19131]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _19011:
                                                                    _19573 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_19573] = 26
                                                                    mem[_19573 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _19700 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _19700 + 68] = mem[idx + _19573 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_19700 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _19700 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _19011 and sub_67a6acd1[stor10[idx]] > -1 / _19011:
                                                                        revert with 0, 17
                                                                    if not _19011:
                                                                        revert with 0, 18
                                                                    if _19011 * sub_67a6acd1[stor10[idx]] / _19011 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _20013 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_20013] = 26
                                                                    mem[_20013 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _20288 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _20288 + 68] = mem[idx + _20013 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_20288 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _20288 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _19011 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _19011 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _19011 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_19011 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            mem[_17169 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                            s = _17169 + 32
                                                            t = sha3(sha3(tokens[idx], 12))
                                                            while _17169 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                mem[s + 32] = address(allowance[t])
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _21985 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _17169 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_21985 + 68] = this.address
                                                            mem[_21985 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value 0 / sub_dee3d564 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _21985 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _25909 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _25989 = mem[_25909]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _25989
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _25989
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _26229 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_26229] == bool(mem[_26229])
                                                            if mem[_26229]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _25989:
                                                                    _26549 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26549] = 26
                                                                    mem[_26549 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _26629 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _26629 + 68] = mem[idx + _26549 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_26629 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _26629 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _25989 and sub_67a6acd1[stor10[idx]] > -1 / _25989:
                                                                        revert with 0, 17
                                                                    if not _25989:
                                                                        revert with 0, 18
                                                                    if _25989 * sub_67a6acd1[stor10[idx]] / _25989 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _27029 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_27029] = 26
                                                                    mem[_27029 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _27414 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _27414 + 68] = mem[idx + _27029 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_27414 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _27414 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _25989 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _25989 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _25989 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_25989 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                else:
                                                    mem[_11434 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                    t = _11434 + 32
                                                    u = sha3(sha3(tokens[idx], 12))
                                                    while _11434 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                        mem[t + 32] = address(allowance[u])
                                                        t = t + 32
                                                        u = u + 1
                                                        continue 
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 11
                                                    _18653 = mem[64]
                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 0
                                                    mem[mem[64] + 36] = 128
                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                    t = 0
                                                    u = _11434 + 32
                                                    v = mem[64] + 164
                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[v] = mem[u + 12 len 20]
                                                        t = t + 1
                                                        u = u + 32
                                                        v = v + 32
                                                        continue 
                                                    mem[_18653 + 68] = _marketingWalletAddress
                                                    mem[_18653 + 100] = block.timestamp
                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                       value 0 / sub_dee3d564 wei
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _18653 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if 0 == s - 1:
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 12
                                                        _22523 = mem[64]
                                                        mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                        mem[_22523] = uint256(sub_47f86dd2[stor10[idx]])
                                                        if not uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _22568 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _22523 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_22568 + 68] = this.address
                                                            mem[_22568 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value eth.balance(this.address) wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _22568 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _25910 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _25990 = mem[_25910]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _25990
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _25990
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _26230 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_26230] == bool(mem[_26230])
                                                            if mem[_26230]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _25990:
                                                                    _26550 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26550] = 26
                                                                    mem[_26550 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _26630 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _26630 + 68] = mem[idx + _26550 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_26630 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _26630 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _25990 and sub_67a6acd1[stor10[idx]] > -1 / _25990:
                                                                        revert with 0, 17
                                                                    if not _25990:
                                                                        revert with 0, 18
                                                                    if _25990 * sub_67a6acd1[stor10[idx]] / _25990 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _27030 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_27030] = 26
                                                                    mem[_27030 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _27416 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _27416 + 68] = mem[idx + _27030 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_27416 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _27416 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _25990 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _25990 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _25990 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_25990 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            mem[_22523 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                            s = _22523 + 32
                                                            t = sha3(sha3(tokens[idx], 12))
                                                            while _22523 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                mem[s + 32] = address(allowance[t])
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _28309 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _22523 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_28309 + 68] = this.address
                                                            mem[_28309 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value eth.balance(this.address) wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _28309 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _30396 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _30436 = mem[_30396]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _30436
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _30436
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _30556 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_30556] == bool(mem[_30556])
                                                            if mem[_30556]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _30436:
                                                                    _30716 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_30716] = 26
                                                                    mem[_30716 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _30756 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _30756 + 68] = mem[idx + _30716 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_30756 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _30756 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _30436 and sub_67a6acd1[stor10[idx]] > -1 / _30436:
                                                                        revert with 0, 17
                                                                    if not _30436:
                                                                        revert with 0, 18
                                                                    if _30436 * sub_67a6acd1[stor10[idx]] / _30436 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _30956 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_30956] = 26
                                                                    mem[_30956 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _31148 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _31148 + 68] = mem[idx + _30956 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_31148 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _31148 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _30436 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _30436 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _30436 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_30436 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        _22621 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_22621] = 26
                                                        mem[_22621 + 32] = 'SafeMath: division by zero'
                                                        if not sub_dee3d564:
                                                            _22735 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 26
                                                            idx = 0
                                                            while idx < 26:
                                                                mem[idx + _22735 + 68] = mem[idx + _22621 + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_22735 + 94] = 0
                                                            revert with memory
                                                              from mem[64]
                                                               len _22735 + -mem[64] + 100
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 12
                                                        _23093 = mem[64]
                                                        mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                        mem[_23093] = uint256(sub_47f86dd2[stor10[idx]])
                                                        if not uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _23156 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _23093 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_23156 + 68] = this.address
                                                            mem[_23156 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value 0 / sub_dee3d564 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _23156 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _25911 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _25991 = mem[_25911]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _25991
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _25991
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _26231 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_26231] == bool(mem[_26231])
                                                            if mem[_26231]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _25991:
                                                                    _26551 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26551] = 26
                                                                    mem[_26551 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _26631 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _26631 + 68] = mem[idx + _26551 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_26631 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _26631 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _25991 and sub_67a6acd1[stor10[idx]] > -1 / _25991:
                                                                        revert with 0, 17
                                                                    if not _25991:
                                                                        revert with 0, 18
                                                                    if _25991 * sub_67a6acd1[stor10[idx]] / _25991 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _27031 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_27031] = 26
                                                                    mem[_27031 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _27418 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _27418 + 68] = mem[idx + _27031 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_27418 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _27418 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _25991 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _25991 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _25991 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_25991 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            mem[_23093 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                            s = _23093 + 32
                                                            t = sha3(sha3(tokens[idx], 12))
                                                            while _23093 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                mem[s + 32] = address(allowance[t])
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _28311 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _23093 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_28311 + 68] = this.address
                                                            mem[_28311 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value 0 / sub_dee3d564 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _28311 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _30397 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _30437 = mem[_30397]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _30437
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _30437
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _30557 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_30557] == bool(mem[_30557])
                                                            if mem[_30557]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _30437:
                                                                    _30717 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_30717] = 26
                                                                    mem[_30717 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _30757 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _30757 + 68] = mem[idx + _30717 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_30757 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _30757 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _30437 and sub_67a6acd1[stor10[idx]] > -1 / _30437:
                                                                        revert with 0, 17
                                                                    if not _30437:
                                                                        revert with 0, 18
                                                                    if _30437 * sub_67a6acd1[stor10[idx]] / _30437 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _30957 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_30957] = 26
                                                                    mem[_30957 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _31150 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _31150 + 68] = mem[idx + _30957 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_31150 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _31150 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _30437 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _30437 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _30437 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_30437 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                            else:
                                                if not 0 / s:
                                                    _11131 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11131] = 26
                                                    mem[_11131 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11179 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11179 + 68] = mem[idx + _11131 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11179 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11179 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11437 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11437] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11508 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11437 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11508 + 68] = _marketingWalletAddress
                                                        mem[_11508 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11508 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16877 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16877] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16918 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16877 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16918 + 68] = this.address
                                                                mem[_16918 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16918 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18975 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _19015 = mem[_18975]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _19015
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _19015
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19135 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19135] == bool(mem[_19135])
                                                                if mem[_19135]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _19015:
                                                                        _19578 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19578] = 26
                                                                        mem[_19578 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19711 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19711 + 68] = mem[idx + _19578 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19711 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19711 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _19015 and sub_67a6acd1[stor10[idx]] > -1 / _19015:
                                                                            revert with 0, 17
                                                                        if not _19015:
                                                                            revert with 0, 18
                                                                        if _19015 * sub_67a6acd1[stor10[idx]] / _19015 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _20021 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_20021] = 26
                                                                        mem[_20021 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20303 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20303 + 68] = mem[idx + _20021 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20303 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20303 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _19015 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _19015 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _19015 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_19015 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16877 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16877 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16877 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21993 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16877 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21993 + 68] = this.address
                                                                mem[_21993 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21993 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25918 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25998 = mem[_25918]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25998
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25998
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26238 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26238] == bool(mem[_26238])
                                                                if mem[_26238]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25998:
                                                                        _26558 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26558] = 26
                                                                        mem[_26558 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26638 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26638 + 68] = mem[idx + _26558 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26638 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26638 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25998 and sub_67a6acd1[stor10[idx]] > -1 / _25998:
                                                                            revert with 0, 17
                                                                        if not _25998:
                                                                            revert with 0, 18
                                                                        if _25998 * sub_67a6acd1[stor10[idx]] / _25998 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27038 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27038] = 26
                                                                        mem[_27038 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27432 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27432 + 68] = mem[idx + _27038 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27432 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27432 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25998 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25998 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25998 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25998 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _16933 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16933] = 26
                                                                mem[_16933 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16961 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16961 + 68] = mem[idx + _16933 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16961 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16961 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17175 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17175] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17228 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17175 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17228 + 68] = this.address
                                                                    mem[_17228 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17228 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18977 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19017 = mem[_18977]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19017
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19017
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19137 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19137] == bool(mem[_19137])
                                                                    if mem[_19137]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19017:
                                                                            _19580 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19580] = 26
                                                                            mem[_19580 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19713 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19713 + 68] = mem[idx + _19580 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19713 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19713 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19017 and sub_67a6acd1[stor10[idx]] > -1 / _19017:
                                                                                revert with 0, 17
                                                                            if not _19017:
                                                                                revert with 0, 18
                                                                            if _19017 * sub_67a6acd1[stor10[idx]] / _19017 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _20023 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_20023] = 26
                                                                            mem[_20023 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20307 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20307 + 68] = mem[idx + _20023 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20307 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20307 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19017 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19017 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19017 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19017 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17175 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17175 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17175 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21997 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17175 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21997 + 68] = this.address
                                                                    mem[_21997 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21997 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25920 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _26000 = mem[_25920]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _26000
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _26000
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26240 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26240] == bool(mem[_26240])
                                                                    if mem[_26240]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _26000:
                                                                            _26560 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26560] = 26
                                                                            mem[_26560 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26640 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26640 + 68] = mem[idx + _26560 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26640 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26640 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _26000 and sub_67a6acd1[stor10[idx]] > -1 / _26000:
                                                                                revert with 0, 17
                                                                            if not _26000:
                                                                                revert with 0, 18
                                                                            if _26000 * sub_67a6acd1[stor10[idx]] / _26000 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27040 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27040] = 26
                                                                            mem[_27040 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27436 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27436 + 68] = mem[idx + _27040 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27436 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27436 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _26000 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _26000 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _26000 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_26000 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17053 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17053] = 26
                                                                mem[_17053 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17120 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17120 + 68] = mem[idx + _17053 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17120 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17120 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17361 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17361] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17423 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17361 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17423 + 68] = this.address
                                                                    mem[_17423 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17423 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18976 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19016 = mem[_18976]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19016
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19016
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19136 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19136] == bool(mem[_19136])
                                                                    if mem[_19136]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19016:
                                                                            _19579 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19579] = 26
                                                                            mem[_19579 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19712 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19712 + 68] = mem[idx + _19579 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19712 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19712 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19016 and sub_67a6acd1[stor10[idx]] > -1 / _19016:
                                                                                revert with 0, 17
                                                                            if not _19016:
                                                                                revert with 0, 18
                                                                            if _19016 * sub_67a6acd1[stor10[idx]] / _19016 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _20022 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_20022] = 26
                                                                            mem[_20022 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20305 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20305 + 68] = mem[idx + _20022 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20305 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20305 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19016 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19016 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19016 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19016 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17361 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17361 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17361 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21995 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17361 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21995 + 68] = this.address
                                                                    mem[_21995 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21995 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25919 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25999 = mem[_25919]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25999
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25999
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26239 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26239] == bool(mem[_26239])
                                                                    if mem[_26239]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25999:
                                                                            _26559 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26559] = 26
                                                                            mem[_26559 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26639 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26639 + 68] = mem[idx + _26559 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26639 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26639 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25999 and sub_67a6acd1[stor10[idx]] > -1 / _25999:
                                                                                revert with 0, 17
                                                                            if not _25999:
                                                                                revert with 0, 18
                                                                            if _25999 * sub_67a6acd1[stor10[idx]] / _25999 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27039 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27039] = 26
                                                                            mem[_27039 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27434 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27434 + 68] = mem[idx + _27039 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27434 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27434 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25999 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25999 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25999 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25999 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11437 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11437 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11437 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18657 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11437 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18657 + 68] = _marketingWalletAddress
                                                        mem[_18657 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18657 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22533 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22533] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22574 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22533 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22574 + 68] = this.address
                                                                mem[_22574 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22574 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25921 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _26001 = mem[_25921]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _26001
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _26001
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26241 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26241] == bool(mem[_26241])
                                                                if mem[_26241]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _26001:
                                                                        _26561 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26561] = 26
                                                                        mem[_26561 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26641 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26641 + 68] = mem[idx + _26561 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26641 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26641 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _26001 and sub_67a6acd1[stor10[idx]] > -1 / _26001:
                                                                            revert with 0, 17
                                                                        if not _26001:
                                                                            revert with 0, 18
                                                                        if _26001 * sub_67a6acd1[stor10[idx]] / _26001 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27041 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27041] = 26
                                                                        mem[_27041 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27438 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27438 + 68] = mem[idx + _27041 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27438 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27438 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _26001 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _26001 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _26001 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_26001 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22533 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22533 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22533 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28319 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22533 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28319 + 68] = this.address
                                                                mem[_28319 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28319 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30401 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30441 = mem[_30401]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30441
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30441
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30561 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30561] == bool(mem[_30561])
                                                                if mem[_30561]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30441:
                                                                        _30721 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30721] = 26
                                                                        mem[_30721 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30761 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30761 + 68] = mem[idx + _30721 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30761 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30761 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30441 and sub_67a6acd1[stor10[idx]] > -1 / _30441:
                                                                            revert with 0, 17
                                                                        if not _30441:
                                                                            revert with 0, 18
                                                                        if _30441 * sub_67a6acd1[stor10[idx]] / _30441 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30961 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30961] = 26
                                                                        mem[_30961 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31158 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31158 + 68] = mem[idx + _30961 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31158 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31158 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30441 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30441 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30441 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30441 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _22629 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22629] = 26
                                                                mem[_22629 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22737 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22737 + 68] = mem[idx + _22629 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22737 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22737 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23111 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23111] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23164 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23111 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23164 + 68] = this.address
                                                                    mem[_23164 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23164 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25923 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _26003 = mem[_25923]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _26003
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _26003
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26243 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26243] == bool(mem[_26243])
                                                                    if mem[_26243]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _26003:
                                                                            _26563 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26563] = 26
                                                                            mem[_26563 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26643 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26643 + 68] = mem[idx + _26563 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26643 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26643 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _26003 and sub_67a6acd1[stor10[idx]] > -1 / _26003:
                                                                                revert with 0, 17
                                                                            if not _26003:
                                                                                revert with 0, 18
                                                                            if _26003 * sub_67a6acd1[stor10[idx]] / _26003 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27043 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27043] = 26
                                                                            mem[_27043 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27442 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27442 + 68] = mem[idx + _27043 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27442 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27442 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _26003 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _26003 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _26003 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_26003 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23111 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23111 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23111 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28323 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23111 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28323 + 68] = this.address
                                                                    mem[_28323 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28323 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30403 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30443 = mem[_30403]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30443
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30443
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30563 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30563] == bool(mem[_30563])
                                                                    if mem[_30563]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30443:
                                                                            _30723 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30723] = 26
                                                                            mem[_30723 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30763 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30763 + 68] = mem[idx + _30723 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30763 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30763 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30443 and sub_67a6acd1[stor10[idx]] > -1 / _30443:
                                                                                revert with 0, 17
                                                                            if not _30443:
                                                                                revert with 0, 18
                                                                            if _30443 * sub_67a6acd1[stor10[idx]] / _30443 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30963 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30963] = 26
                                                                            mem[_30963 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31162 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31162 + 68] = mem[idx + _30963 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31162 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31162 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30443 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30443 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30443 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30443 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22909 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22909] = 26
                                                                mem[_22909 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22976 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22976 + 68] = mem[idx + _22909 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22976 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22976 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23337 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23337] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23439 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23337 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23439 + 68] = this.address
                                                                    mem[_23439 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23439 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25922 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _26002 = mem[_25922]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _26002
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _26002
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26242 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26242] == bool(mem[_26242])
                                                                    if mem[_26242]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _26002:
                                                                            _26562 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26562] = 26
                                                                            mem[_26562 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26642 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26642 + 68] = mem[idx + _26562 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26642 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26642 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _26002 and sub_67a6acd1[stor10[idx]] > -1 / _26002:
                                                                                revert with 0, 17
                                                                            if not _26002:
                                                                                revert with 0, 18
                                                                            if _26002 * sub_67a6acd1[stor10[idx]] / _26002 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27042 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27042] = 26
                                                                            mem[_27042 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27440 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27440 + 68] = mem[idx + _27042 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27440 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27440 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _26002 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _26002 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _26002 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_26002 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23337 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23337 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23337 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28321 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23337 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28321 + 68] = this.address
                                                                    mem[_28321 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28321 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30402 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30442 = mem[_30402]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30442
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30442
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30562 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30562] == bool(mem[_30562])
                                                                    if mem[_30562]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30442:
                                                                            _30722 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30722] = 26
                                                                            mem[_30722 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30762 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30762 + 68] = mem[idx + _30722 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30762 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30762 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30442 and sub_67a6acd1[stor10[idx]] > -1 / _30442:
                                                                                revert with 0, 17
                                                                            if not _30442:
                                                                                revert with 0, 18
                                                                            if _30442 * sub_67a6acd1[stor10[idx]] / _30442 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30962 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30962] = 26
                                                                            mem[_30962 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31160 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31160 + 68] = mem[idx + _30962 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31160 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31160 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30442 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30442 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30442 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30442 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                else:
                                                    if 0 / s and marketingFee > -1 / 0 / s:
                                                        revert with 0, 17
                                                    if not 0 / s:
                                                        revert with 0, 18
                                                    if 0 / s * marketingFee / 0 / s != marketingFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11297 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11297] = 26
                                                    mem[_11297 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11378 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11378 + 68] = mem[idx + _11297 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11378 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11378 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11931 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11931] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11995 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11931 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11995 + 68] = _marketingWalletAddress
                                                        mem[_11995 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / s * marketingFee / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11995 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16875 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16875] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16915 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16875 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16915 + 68] = this.address
                                                                mem[_16915 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16915 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18972 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _19012 = mem[_18972]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _19012
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _19012
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19132 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19132] == bool(mem[_19132])
                                                                if mem[_19132]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _19012:
                                                                        _19574 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19574] = 26
                                                                        mem[_19574 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19704 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19704 + 68] = mem[idx + _19574 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19704 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19704 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _19012 and sub_67a6acd1[stor10[idx]] > -1 / _19012:
                                                                            revert with 0, 17
                                                                        if not _19012:
                                                                            revert with 0, 18
                                                                        if _19012 * sub_67a6acd1[stor10[idx]] / _19012 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _20016 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_20016] = 26
                                                                        mem[_20016 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20292 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20292 + 68] = mem[idx + _20016 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20292 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20292 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _19012 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _19012 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _19012 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_19012 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16875 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16875 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16875 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21987 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16875 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21987 + 68] = this.address
                                                                mem[_21987 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21987 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25912 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25992 = mem[_25912]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25992
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25992
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26232 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26232] == bool(mem[_26232])
                                                                if mem[_26232]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25992:
                                                                        _26552 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26552] = 26
                                                                        mem[_26552 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26632 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26632 + 68] = mem[idx + _26552 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26632 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26632 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25992 and sub_67a6acd1[stor10[idx]] > -1 / _25992:
                                                                            revert with 0, 17
                                                                        if not _25992:
                                                                            revert with 0, 18
                                                                        if _25992 * sub_67a6acd1[stor10[idx]] / _25992 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27032 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27032] = 26
                                                                        mem[_27032 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27420 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27420 + 68] = mem[idx + _27032 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27420 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27420 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25992 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25992 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25992 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25992 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _16932 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16932] = 26
                                                                mem[_16932 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16960 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16960 + 68] = mem[idx + _16932 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16960 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16960 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17172 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17172] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17224 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17172 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17224 + 68] = this.address
                                                                    mem[_17224 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17224 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18974 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19014 = mem[_18974]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19014
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19014
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19134 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19134] == bool(mem[_19134])
                                                                    if mem[_19134]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19014:
                                                                            _19576 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19576] = 26
                                                                            mem[_19576 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19706 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19706 + 68] = mem[idx + _19576 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19706 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19706 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19014 and sub_67a6acd1[stor10[idx]] > -1 / _19014:
                                                                                revert with 0, 17
                                                                            if not _19014:
                                                                                revert with 0, 18
                                                                            if _19014 * sub_67a6acd1[stor10[idx]] / _19014 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _20018 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_20018] = 26
                                                                            mem[_20018 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20296 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20296 + 68] = mem[idx + _20018 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20296 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20296 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19014 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19014 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19014 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19014 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17172 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17172 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17172 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21991 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17172 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21991 + 68] = this.address
                                                                    mem[_21991 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21991 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25914 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25994 = mem[_25914]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25994
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25994
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26234 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26234] == bool(mem[_26234])
                                                                    if mem[_26234]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25994:
                                                                            _26554 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26554] = 26
                                                                            mem[_26554 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26634 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26634 + 68] = mem[idx + _26554 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26634 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26634 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25994 and sub_67a6acd1[stor10[idx]] > -1 / _25994:
                                                                                revert with 0, 17
                                                                            if not _25994:
                                                                                revert with 0, 18
                                                                            if _25994 * sub_67a6acd1[stor10[idx]] / _25994 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27034 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27034] = 26
                                                                            mem[_27034 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27424 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27424 + 68] = mem[idx + _27034 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27424 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27424 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25994 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25994 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25994 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25994 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17052 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17052] = 26
                                                                mem[_17052 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17116 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17116 + 68] = mem[idx + _17052 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17116 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17116 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17359 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17359] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17418 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17359 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17418 + 68] = this.address
                                                                    mem[_17418 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17418 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18973 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19013 = mem[_18973]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19013
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19013
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19133 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19133] == bool(mem[_19133])
                                                                    if mem[_19133]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19013:
                                                                            _19575 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19575] = 26
                                                                            mem[_19575 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19705 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19705 + 68] = mem[idx + _19575 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19705 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19705 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19013 and sub_67a6acd1[stor10[idx]] > -1 / _19013:
                                                                                revert with 0, 17
                                                                            if not _19013:
                                                                                revert with 0, 18
                                                                            if _19013 * sub_67a6acd1[stor10[idx]] / _19013 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _20017 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_20017] = 26
                                                                            mem[_20017 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20294 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20294 + 68] = mem[idx + _20017 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20294 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20294 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19013 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19013 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19013 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19013 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17359 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17359 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17359 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21989 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17359 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21989 + 68] = this.address
                                                                    mem[_21989 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21989 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25913 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25993 = mem[_25913]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25993
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25993
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26233 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26233] == bool(mem[_26233])
                                                                    if mem[_26233]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25993:
                                                                            _26553 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26553] = 26
                                                                            mem[_26553 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26633 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26633 + 68] = mem[idx + _26553 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26633 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26633 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25993 and sub_67a6acd1[stor10[idx]] > -1 / _25993:
                                                                                revert with 0, 17
                                                                            if not _25993:
                                                                                revert with 0, 18
                                                                            if _25993 * sub_67a6acd1[stor10[idx]] / _25993 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27033 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27033] = 26
                                                                            mem[_27033 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27422 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27422 + 68] = mem[idx + _27033 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27422 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27422 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25993 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25993 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25993 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25993 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11931 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11931 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11931 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18655 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11931 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18655 + 68] = _marketingWalletAddress
                                                        mem[_18655 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / s * marketingFee / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18655 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22528 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22528] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22571 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22528 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22571 + 68] = this.address
                                                                mem[_22571 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22571 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25915 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25995 = mem[_25915]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25995
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25995
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26235 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26235] == bool(mem[_26235])
                                                                if mem[_26235]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25995:
                                                                        _26555 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26555] = 26
                                                                        mem[_26555 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26635 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26635 + 68] = mem[idx + _26555 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26635 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26635 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25995 and sub_67a6acd1[stor10[idx]] > -1 / _25995:
                                                                            revert with 0, 17
                                                                        if not _25995:
                                                                            revert with 0, 18
                                                                        if _25995 * sub_67a6acd1[stor10[idx]] / _25995 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27035 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27035] = 26
                                                                        mem[_27035 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27426 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27426 + 68] = mem[idx + _27035 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27426 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27426 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25995 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25995 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25995 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25995 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22528 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22528 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22528 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28313 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22528 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28313 + 68] = this.address
                                                                mem[_28313 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28313 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30398 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30438 = mem[_30398]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30438
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30438
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30558 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30558] == bool(mem[_30558])
                                                                if mem[_30558]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30438:
                                                                        _30718 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30718] = 26
                                                                        mem[_30718 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30758 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30758 + 68] = mem[idx + _30718 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30758 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30758 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30438 and sub_67a6acd1[stor10[idx]] > -1 / _30438:
                                                                            revert with 0, 17
                                                                        if not _30438:
                                                                            revert with 0, 18
                                                                        if _30438 * sub_67a6acd1[stor10[idx]] / _30438 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30958 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30958] = 26
                                                                        mem[_30958 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31152 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31152 + 68] = mem[idx + _30958 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31152 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31152 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30438 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30438 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30438 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30438 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _22625 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22625] = 26
                                                                mem[_22625 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22736 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22736 + 68] = mem[idx + _22625 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22736 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22736 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23102 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23102] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23160 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23102 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23160 + 68] = this.address
                                                                    mem[_23160 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23160 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25917 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25997 = mem[_25917]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25997
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25997
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26237 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26237] == bool(mem[_26237])
                                                                    if mem[_26237]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25997:
                                                                            _26557 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26557] = 26
                                                                            mem[_26557 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26637 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26637 + 68] = mem[idx + _26557 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26637 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26637 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25997 and sub_67a6acd1[stor10[idx]] > -1 / _25997:
                                                                                revert with 0, 17
                                                                            if not _25997:
                                                                                revert with 0, 18
                                                                            if _25997 * sub_67a6acd1[stor10[idx]] / _25997 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27037 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27037] = 26
                                                                            mem[_27037 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27430 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27430 + 68] = mem[idx + _27037 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27430 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27430 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25997 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25997 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25997 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25997 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23102 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23102 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23102 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28317 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23102 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28317 + 68] = this.address
                                                                    mem[_28317 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28317 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30400 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30440 = mem[_30400]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30440
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30440
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30560 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30560] == bool(mem[_30560])
                                                                    if mem[_30560]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30440:
                                                                            _30720 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30720] = 26
                                                                            mem[_30720 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30760 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30760 + 68] = mem[idx + _30720 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30760 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30760 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30440 and sub_67a6acd1[stor10[idx]] > -1 / _30440:
                                                                                revert with 0, 17
                                                                            if not _30440:
                                                                                revert with 0, 18
                                                                            if _30440 * sub_67a6acd1[stor10[idx]] / _30440 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30960 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30960] = 26
                                                                            mem[_30960 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31156 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31156 + 68] = mem[idx + _30960 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31156 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31156 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30440 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30440 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30440 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30440 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22908 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22908] = 26
                                                                mem[_22908 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22972 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22972 + 68] = mem[idx + _22908 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22972 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22972 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23335 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23335] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23431 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23335 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23431 + 68] = this.address
                                                                    mem[_23431 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23431 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25916 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25996 = mem[_25916]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25996
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25996
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26236 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26236] == bool(mem[_26236])
                                                                    if mem[_26236]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25996:
                                                                            _26556 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26556] = 26
                                                                            mem[_26556 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26636 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26636 + 68] = mem[idx + _26556 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26636 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26636 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25996 and sub_67a6acd1[stor10[idx]] > -1 / _25996:
                                                                                revert with 0, 17
                                                                            if not _25996:
                                                                                revert with 0, 18
                                                                            if _25996 * sub_67a6acd1[stor10[idx]] / _25996 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27036 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27036] = 26
                                                                            mem[_27036 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27428 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27428 + 68] = mem[idx + _27036 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27428 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27428 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25996 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25996 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25996 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25996 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23335 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23335 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23335 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28315 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23335 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28315 + 68] = this.address
                                                                    mem[_28315 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28315 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30399 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30439 = mem[_30399]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30439
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30439
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30559 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30559] == bool(mem[_30559])
                                                                    if mem[_30559]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30439:
                                                                            _30719 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30719] = 26
                                                                            mem[_30719 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30759 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30759 + 68] = mem[idx + _30719 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30759 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30759 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30439 and sub_67a6acd1[stor10[idx]] > -1 / _30439:
                                                                                revert with 0, 17
                                                                            if not _30439:
                                                                                revert with 0, 18
                                                                            if _30439 * sub_67a6acd1[stor10[idx]] / _30439 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30959 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30959] = 26
                                                                            mem[_30959 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31154 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31154 + 68] = mem[idx + _30959 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31154 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31154 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30439 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30439 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30439 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30439 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    stor7 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 25
                                    if stor25[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _10928 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_10928] = 38
                                        mem[_10928 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10928 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        mem[0] = arg1
                                        mem[32] = 0
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not ext_call.success:
                                            if not ext_call.success:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11551 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11680 = mem[_11551 + 32]
                                                        _11681 = mem[_11551 + 64]
                                                        mem[mem[64]] = mem[_11551]
                                                        mem[mem[64] + 64] = _11681
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11680, _11681, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11604 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11795 = mem[_11604 + 32]
                                                        _11796 = mem[_11604 + 64]
                                                        mem[mem[64]] = mem[_11604]
                                                        mem[mem[64] + 64] = _11796
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11795, _11796, gasForProcessing, 1, tx.origin);
                                        else:
                                            if not ext_call.success:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11605 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11799 = mem[_11605 + 32]
                                                        _11800 = mem[_11605 + 64]
                                                        mem[mem[64]] = mem[_11605]
                                                        mem[mem[64] + 64] = _11800
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11799, _11800, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11684 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11908 = mem[_11684 + 32]
                                                        _11909 = mem[_11684 + 64]
                                                        mem[mem[64]] = mem[_11684]
                                                        mem[mem[64] + 64] = _11909
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11908, _11909, gasForProcessing, 1, tx.origin);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 25
                                        if stor25[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _10953 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_10953] = 38
                                            mem[_10953 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10953 + 70 len 26]
                                                var169001 = 64
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            mem[0] = arg1
                                            mem[32] = 0
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not ext_call.success:
                                                if not ext_call.success:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11611 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11816 = mem[_11611 + 32]
                                                            _11817 = mem[_11611 + 64]
                                                            mem[mem[64]] = mem[_11611]
                                                            mem[mem[64] + 64] = _11817
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11816, _11817, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11695 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11923 = mem[_11695 + 32]
                                                            _11924 = mem[_11695 + 64]
                                                            mem[mem[64]] = mem[_11695]
                                                            mem[mem[64] + 64] = _11924
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11923, _11924, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not ext_call.success:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11696 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11927 = mem[_11696 + 32]
                                                            _11928 = mem[_11696 + 64]
                                                            mem[mem[64]] = mem[_11696]
                                                            mem[mem[64] + 64] = _11928
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11927, _11928, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11820 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11991 = mem[_11820 + 32]
                                                            _11992 = mem[_11820 + 64]
                                                            mem[mem[64]] = mem[_11820]
                                                            mem[mem[64] + 64] = _11992
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11991, _11992, gasForProcessing, 1, tx.origin);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _10931 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_10931] = 38
                                                mem[_10931 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10931 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                mem[0] = arg1
                                                mem[32] = 0
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)]
                                                if not ext_call.success:
                                                    if not ext_call.success:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11554 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11687 = mem[_11554 + 32]
                                                                _11688 = mem[_11554 + 64]
                                                                mem[mem[64]] = mem[_11554]
                                                                mem[mem[64] + 64] = _11688
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11687, _11688, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11607 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11804 = mem[_11607 + 32]
                                                                _11805 = mem[_11607 + 64]
                                                                mem[mem[64]] = mem[_11607]
                                                                mem[mem[64] + 64] = _11805
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11804, _11805, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not ext_call.success:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11608 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11808 = mem[_11608 + 32]
                                                                _11809 = mem[_11608 + 64]
                                                                mem[mem[64]] = mem[_11608]
                                                                mem[mem[64] + 64] = _11809
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11808, _11809, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11691 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11912 = mem[_11691 + 32]
                                                                _11913 = mem[_11691 + 64]
                                                                mem[mem[64]] = mem[_11691]
                                                                mem[mem[64] + 64] = _11913
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11912, _11913, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not arg2:
                                                    _10981 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_10981] = 26
                                                    mem[_10981 + 32] = 'SafeMath: division by zero'
                                                    mem[0] = arg1
                                                    mem[32] = 26
                                                    if not stor26[address(arg1)]:
                                                        _11095 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11095] = 30
                                                        mem[_11095 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 0, 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11429 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11429] = 38
                                                        mem[_11429 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11429 + 70 len 26]
                                                            var189001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 0, 17
                                                        if balanceOf[this.address] > -1:
                                                            revert with 0, 17
                                                        if balanceOf[this.address] < balanceOf[this.address]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 0
                                                        balanceOf[address(this.address)] = balanceOf[this.address]
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12509 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12509] = 38
                                                        mem[_12509 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12509 + 70 len 26]
                                                            var207001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 0, 17
                                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13699 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13830 = mem[_13699 + 32]
                                                                        _13831 = mem[_13699 + 64]
                                                                        mem[mem[64]] = mem[_13699]
                                                                        mem[mem[64] + 64] = _13831
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13830, _13831, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13762 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13886 = mem[_13762 + 32]
                                                                        _13887 = mem[_13762 + 64]
                                                                        mem[mem[64]] = mem[_13762]
                                                                        mem[mem[64] + 64] = _13887
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13886, _13887, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13763 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13890 = mem[_13763 + 32]
                                                                        _13891 = mem[_13763 + 64]
                                                                        mem[mem[64]] = mem[_13763]
                                                                        mem[mem[64] + 64] = _13891
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13890, _13891, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13834 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13954 = mem[_13834 + 32]
                                                                        _13955 = mem[_13834 + 64]
                                                                        mem[mem[64]] = mem[_13834]
                                                                        mem[mem[64] + 64] = _13955
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13954, _13955, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not arg2:
                                                            _11212 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11212] = 26
                                                            mem[_11212 + 32] = 'SafeMath: division by zero'
                                                            _11920 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11920] = 30
                                                            mem[_11920 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > arg2:
                                                                var195001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12434 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12434] = 38
                                                            mem[_12434 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12434 + 70 len 26]
                                                                var205001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] > -1:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13332 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13332] = 38
                                                            mem[_13332 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13332 + 70 len 26]
                                                                var223001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14842 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15029 = mem[_14842 + 32]
                                                                            _15030 = mem[_14842 + 64]
                                                                            mem[mem[64]] = mem[_14842]
                                                                            mem[mem[64] + 64] = _15030
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15029, _15030, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14943 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15094 = mem[_14943 + 32]
                                                                            _15095 = mem[_14943 + 64]
                                                                            mem[mem[64]] = mem[_14943]
                                                                            mem[mem[64] + 64] = _15095
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15094, _15095, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14944 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15098 = mem[_14944 + 32]
                                                                            _15099 = mem[_14944 + 64]
                                                                            mem[mem[64]] = mem[_14944]
                                                                            mem[mem[64] + 64] = _15099
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15098, _15099, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15033 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15161 = mem[_15033 + 32]
                                                                            _15162 = mem[_15033 + 64]
                                                                            mem[mem[64]] = mem[_15033]
                                                                            mem[mem[64] + 64] = _15162
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15161, _15162, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and 1 > -1 / arg2:
                                                                revert with 0, 17
                                                            if not arg2:
                                                                revert with 0, 18
                                                            if arg2 / arg2 != 1:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11432 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11432] = 26
                                                            mem[_11432 + 32] = 'SafeMath: division by zero'
                                                            if 0 > !(arg2 / 100):
                                                                revert with 0, 17
                                                            _12256 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12256] = 30
                                                            mem[_12256 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 / 100 > arg2:
                                                                var201001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 / 100:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12677 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12677] = 38
                                                            mem[_12677 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12677 + 70 len 26]
                                                                var211001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2 / 100
                                                            if balanceOf[this.address] > !(arg2 / 100):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                                            emit Transfer((arg2 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13655 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13655] = 38
                                                            mem[_13655 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13655 + 70 len 26]
                                                                var229001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                                            emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15311 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15515 = mem[_15311 + 32]
                                                                            _15516 = mem[_15311 + 64]
                                                                            mem[mem[64]] = mem[_15311]
                                                                            mem[mem[64] + 64] = _15516
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15515, _15516, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15406 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15619 = mem[_15406 + 32]
                                                                            _15620 = mem[_15406 + 64]
                                                                            mem[mem[64]] = mem[_15406]
                                                                            mem[mem[64] + 64] = _15620
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15619, _15620, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15407 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15623 = mem[_15407 + 32]
                                                                            _15624 = mem[_15407 + 64]
                                                                            mem[mem[64]] = mem[_15407]
                                                                            mem[mem[64] + 64] = _15624
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15623, _15624, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15519 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15699 = mem[_15519 + 32]
                                                                            _15700 = mem[_15519 + 64]
                                                                            mem[mem[64]] = mem[_15519]
                                                                            mem[mem[64] + 64] = _15700
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15699, _15700, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if arg2 * totalFees / arg2 != totalFees:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11074 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11074] = 26
                                                    mem[_11074 + 32] = 'SafeMath: division by zero'
                                                    mem[0] = arg1
                                                    mem[32] = 26
                                                    if not stor26[address(arg1)]:
                                                        _11256 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11256] = 30
                                                        mem[_11256 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * totalFees / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 0, 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11914 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11914] = 38
                                                        mem[_11914 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11914 + 70 len 26]
                                                            var195001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 0, 17
                                                        if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 0
                                                        balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12767 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12767] = 38
                                                        mem[_12767 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12767 + 70 len 26]
                                                            var213001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 0, 17
                                                        if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14100 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14263 = mem[_14100 + 32]
                                                                        _14264 = mem[_14100 + 64]
                                                                        mem[mem[64]] = mem[_14100]
                                                                        mem[mem[64] + 64] = _14264
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14263, _14264, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14182 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14333 = mem[_14182 + 32]
                                                                        _14334 = mem[_14182 + 64]
                                                                        mem[mem[64]] = mem[_14182]
                                                                        mem[mem[64] + 64] = _14334
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14333, _14334, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14183 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14337 = mem[_14183 + 32]
                                                                        _14338 = mem[_14183 + 64]
                                                                        mem[mem[64]] = mem[_14183]
                                                                        mem[mem[64] + 64] = _14338
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14337, _14338, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14267 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14410 = mem[_14267 + 32]
                                                                        _14411 = mem[_14267 + 64]
                                                                        mem[mem[64]] = mem[_14267]
                                                                        mem[mem[64] + 64] = _14411
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14410, _14411, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not arg2:
                                                            _11428 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11428] = 26
                                                            mem[_11428 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * totalFees / 100 > -1:
                                                                revert with 0, 17
                                                            _12252 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12252] = 30
                                                            mem[_12252 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * totalFees / 100 > arg2:
                                                                var201001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12674 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12674] = 38
                                                            mem[_12674 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12674 + 70 len 26]
                                                                var211001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13648 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13648] = 38
                                                            mem[_13648 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13648 + 70 len 26]
                                                                var229001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15308 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15508 = mem[_15308 + 32]
                                                                            _15509 = mem[_15308 + 64]
                                                                            mem[mem[64]] = mem[_15308]
                                                                            mem[mem[64] + 64] = _15509
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15508, _15509, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15403 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15610 = mem[_15403 + 32]
                                                                            _15611 = mem[_15403 + 64]
                                                                            mem[mem[64]] = mem[_15403]
                                                                            mem[mem[64] + 64] = _15611
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15610, _15611, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15404 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15614 = mem[_15404 + 32]
                                                                            _15615 = mem[_15404 + 64]
                                                                            mem[mem[64]] = mem[_15404]
                                                                            mem[mem[64] + 64] = _15615
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15614, _15615, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15512 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15695 = mem[_15512 + 32]
                                                                            _15696 = mem[_15512 + 64]
                                                                            mem[mem[64]] = mem[_15512]
                                                                            mem[mem[64] + 64] = _15696
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15695, _15696, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and 1 > -1 / arg2:
                                                                revert with 0, 17
                                                            if not arg2:
                                                                revert with 0, 18
                                                            if arg2 / arg2 != 1:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11917 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11917] = 26
                                                            mem[_11917 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * totalFees / 100 > !(arg2 / 100):
                                                                revert with 0, 17
                                                            _12508 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12508] = 30
                                                            mem[_12508 + 32] = 'SafeMath: subtraction overflow'
                                                            if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                                                var207001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12988 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12988] = 38
                                                            mem[_12988 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12988 + 70 len 26]
                                                                var217001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14031 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14031] = 38
                                                            mem[_14031 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14031 + 70 len 26]
                                                                var235001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15866 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16060 = mem[_15866 + 32]
                                                                            _16061 = mem[_15866 + 64]
                                                                            mem[mem[64]] = mem[_15866]
                                                                            mem[mem[64] + 64] = _16061
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16060, _16061, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15968 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16134 = mem[_15968 + 32]
                                                                            _16135 = mem[_15968 + 64]
                                                                            mem[mem[64]] = mem[_15968]
                                                                            mem[mem[64] + 64] = _16135
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16134, _16135, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15969 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16138 = mem[_15969 + 32]
                                                                            _16139 = mem[_15969 + 64]
                                                                            mem[mem[64]] = mem[_15969]
                                                                            mem[mem[64] + 64] = _16139
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16138, _16139, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _16064 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16188 = mem[_16064 + 32]
                                                                            _16189 = mem[_16064 + 64]
                                                                            mem[mem[64]] = mem[_16064]
                                                                            mem[mem[64] + 64] = _16189
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16188, _16189, gasForProcessing, 1, tx.origin);
                                else:
                                    if 0 / s and s - 1 > -1 / 0 / s:
                                        revert with 0, 17
                                    if not 0 / s:
                                        revert with 0, 18
                                    if -(0 / s) + (s * 0 / s) / 0 / s != s - 1:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5191 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5191] = 30
                                    mem[_5191 + 32] = 'SafeMath: subtraction overflow'
                                    if -(0 / s) + (s * 0 / s) > 0:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if 0 < -(0 / s) + (s * 0 / s):
                                        revert with 0, 17
                                    idx = 0
                                    while idx < tokens.length:
                                        mem[0] = tokens[idx]
                                        mem[32] = 13
                                        if not stor13[stor10[idx]]:
                                            _10883 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10883] = 30
                                            mem[_10883 + 32] = 'SafeMath: subtraction overflow'
                                            if 1 > s:
                                                _10890 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _10890 + 68] = mem[idx + _10883 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10890 + 98] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10890 + -mem[64] + 100
                                            if s < 1:
                                                revert with 0, 17
                                            if 0 == s - 1:
                                                if not (0 / s) - (s * 0 / s):
                                                    _11121 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11121] = 26
                                                    mem[_11121 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11172 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11172 + 68] = mem[idx + _11121 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11172 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11172 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11420 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11420] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11487 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11420 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11487 + 68] = _marketingWalletAddress
                                                        mem[_11487 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11487 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16867 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16867] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16903 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16867 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16903 + 68] = this.address
                                                                mem[_16903 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16903 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18961 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _19001 = mem[_18961]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _19001
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _19001
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19121 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19121] == bool(mem[_19121])
                                                                if mem[_19121]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _19001:
                                                                        _19560 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19560] = 26
                                                                        mem[_19560 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19678 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19678 + 68] = mem[idx + _19560 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19678 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19678 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _19001 and sub_67a6acd1[stor10[idx]] > -1 / _19001:
                                                                            revert with 0, 17
                                                                        if not _19001:
                                                                            revert with 0, 18
                                                                        if _19001 * sub_67a6acd1[stor10[idx]] / _19001 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _19997 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19997] = 26
                                                                        mem[_19997 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20253 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20253 + 68] = mem[idx + _19997 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20253 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20253 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _19001 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _19001 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _19001 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_19001 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16867 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16867 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16867 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21965 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16867 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21965 + 68] = this.address
                                                                mem[_21965 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21965 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25890 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25970 = mem[_25890]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25970
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25970
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26210 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26210] == bool(mem[_26210])
                                                                if mem[_26210]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25970:
                                                                        _26530 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26530] = 26
                                                                        mem[_26530 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26610 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26610 + 68] = mem[idx + _26530 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26610 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26610 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25970 and sub_67a6acd1[stor10[idx]] > -1 / _25970:
                                                                            revert with 0, 17
                                                                        if not _25970:
                                                                            revert with 0, 18
                                                                        if _25970 * sub_67a6acd1[stor10[idx]] / _25970 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27010 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27010] = 26
                                                                        mem[_27010 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27376 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27376 + 68] = mem[idx + _27010 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27376 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27376 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25970 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25970 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25970 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25970 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not (0 / s) - (s * 0 / s):
                                                                _16928 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16928] = 26
                                                                mem[_16928 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16956 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16956 + 68] = mem[idx + _16928 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16956 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16956 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17160 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17160] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17209 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17160 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17209 + 68] = this.address
                                                                    mem[_17209 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17209 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18963 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19003 = mem[_18963]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19003
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19003
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19123 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19123] == bool(mem[_19123])
                                                                    if mem[_19123]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19003:
                                                                            _19562 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19562] = 26
                                                                            mem[_19562 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19680 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19680 + 68] = mem[idx + _19562 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19680 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19680 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19003 and sub_67a6acd1[stor10[idx]] > -1 / _19003:
                                                                                revert with 0, 17
                                                                            if not _19003:
                                                                                revert with 0, 18
                                                                            if _19003 * sub_67a6acd1[stor10[idx]] / _19003 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19999 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19999] = 26
                                                                            mem[_19999 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20257 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20257 + 68] = mem[idx + _19999 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20257 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20257 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19003 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19003 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19003 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19003 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17160 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17160 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17160 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21969 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17160 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21969 + 68] = this.address
                                                                    mem[_21969 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21969 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25892 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25972 = mem[_25892]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25972
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25972
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26212 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26212] == bool(mem[_26212])
                                                                    if mem[_26212]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25972:
                                                                            _26532 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26532] = 26
                                                                            mem[_26532 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26612 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26612 + 68] = mem[idx + _26532 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26612 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26612 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25972 and sub_67a6acd1[stor10[idx]] > -1 / _25972:
                                                                                revert with 0, 17
                                                                            if not _25972:
                                                                                revert with 0, 18
                                                                            if _25972 * sub_67a6acd1[stor10[idx]] / _25972 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27012 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27012] = 26
                                                                            mem[_27012 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27380 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27380 + 68] = mem[idx + _27012 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27380 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27380 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25972 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25972 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25972 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25972 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if (0 / s) - (s * 0 / s) and rewardsFee > -1 / (0 / s) - (s * 0 / s):
                                                                    revert with 0, 17
                                                                if not (0 / s) - (s * 0 / s):
                                                                    revert with 0, 18
                                                                if (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / (0 / s) - (s * 0 / s) != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17049 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17049] = 26
                                                                mem[_17049 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17101 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17101 + 68] = mem[idx + _17049 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17101 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17101 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17353 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17353] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17401 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17353 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17401 + 68] = this.address
                                                                    mem[_17401 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17401 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18962 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19002 = mem[_18962]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19002
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19002
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19122 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19122] == bool(mem[_19122])
                                                                    if mem[_19122]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19002:
                                                                            _19561 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19561] = 26
                                                                            mem[_19561 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19679 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19679 + 68] = mem[idx + _19561 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19679 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19679 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19002 and sub_67a6acd1[stor10[idx]] > -1 / _19002:
                                                                                revert with 0, 17
                                                                            if not _19002:
                                                                                revert with 0, 18
                                                                            if _19002 * sub_67a6acd1[stor10[idx]] / _19002 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19998 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19998] = 26
                                                                            mem[_19998 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20255 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20255 + 68] = mem[idx + _19998 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20255 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20255 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19002 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19002 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19002 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19002 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17353 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17353 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17353 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21967 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17353 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21967 + 68] = this.address
                                                                    mem[_21967 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21967 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25891 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25971 = mem[_25891]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25971
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25971
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26211 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26211] == bool(mem[_26211])
                                                                    if mem[_26211]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25971:
                                                                            _26531 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26531] = 26
                                                                            mem[_26531 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26611 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26611 + 68] = mem[idx + _26531 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26611 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26611 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25971 and sub_67a6acd1[stor10[idx]] > -1 / _25971:
                                                                                revert with 0, 17
                                                                            if not _25971:
                                                                                revert with 0, 18
                                                                            if _25971 * sub_67a6acd1[stor10[idx]] / _25971 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27011 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27011] = 26
                                                                            mem[_27011 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27378 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27378 + 68] = mem[idx + _27011 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27378 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27378 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25971 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25971 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25971 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25971 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11420 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11420 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11420 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18647 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11420 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18647 + 68] = _marketingWalletAddress
                                                        mem[_18647 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18647 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22509 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22509] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22559 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22509 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22559 + 68] = this.address
                                                                mem[_22559 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22559 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25893 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25973 = mem[_25893]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25973
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25973
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26213 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26213] == bool(mem[_26213])
                                                                if mem[_26213]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25973:
                                                                        _26533 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26533] = 26
                                                                        mem[_26533 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26613 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26613 + 68] = mem[idx + _26533 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26613 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26613 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25973 and sub_67a6acd1[stor10[idx]] > -1 / _25973:
                                                                            revert with 0, 17
                                                                        if not _25973:
                                                                            revert with 0, 18
                                                                        if _25973 * sub_67a6acd1[stor10[idx]] / _25973 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27013 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27013] = 26
                                                                        mem[_27013 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27382 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27382 + 68] = mem[idx + _27013 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27382 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27382 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25973 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25973 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25973 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25973 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22509 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22509 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22509 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28291 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22509 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28291 + 68] = this.address
                                                                mem[_28291 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28291 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30387 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30427 = mem[_30387]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30427
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30427
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30547 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30547] == bool(mem[_30547])
                                                                if mem[_30547]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30427:
                                                                        _30707 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30707] = 26
                                                                        mem[_30707 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30747 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30747 + 68] = mem[idx + _30707 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30747 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30747 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30427 and sub_67a6acd1[stor10[idx]] > -1 / _30427:
                                                                            revert with 0, 17
                                                                        if not _30427:
                                                                            revert with 0, 18
                                                                        if _30427 * sub_67a6acd1[stor10[idx]] / _30427 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30947 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30947] = 26
                                                                        mem[_30947 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31130 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31130 + 68] = mem[idx + _30947 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31130 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31130 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30427 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30427 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30427 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30427 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not (0 / s) - (s * 0 / s):
                                                                _22610 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22610] = 26
                                                                mem[_22610 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22732 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22732 + 68] = mem[idx + _22610 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22732 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22732 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23068 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23068] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23145 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23068 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23145 + 68] = this.address
                                                                    mem[_23145 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23145 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25895 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25975 = mem[_25895]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25975
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25975
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26215 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26215] == bool(mem[_26215])
                                                                    if mem[_26215]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25975:
                                                                            _26535 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26535] = 26
                                                                            mem[_26535 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26615 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26615 + 68] = mem[idx + _26535 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26615 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26615 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25975 and sub_67a6acd1[stor10[idx]] > -1 / _25975:
                                                                                revert with 0, 17
                                                                            if not _25975:
                                                                                revert with 0, 18
                                                                            if _25975 * sub_67a6acd1[stor10[idx]] / _25975 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27015 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27015] = 26
                                                                            mem[_27015 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27386 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27386 + 68] = mem[idx + _27015 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27386 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27386 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25975 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25975 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25975 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25975 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23068 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23068 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23068 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28295 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23068 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28295 + 68] = this.address
                                                                    mem[_28295 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28295 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30389 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30429 = mem[_30389]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30429
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30429
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30549 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30549] == bool(mem[_30549])
                                                                    if mem[_30549]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30429:
                                                                            _30709 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30709] = 26
                                                                            mem[_30709 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30749 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30749 + 68] = mem[idx + _30709 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30749 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30749 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30429 and sub_67a6acd1[stor10[idx]] > -1 / _30429:
                                                                                revert with 0, 17
                                                                            if not _30429:
                                                                                revert with 0, 18
                                                                            if _30429 * sub_67a6acd1[stor10[idx]] / _30429 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30949 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30949] = 26
                                                                            mem[_30949 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31134 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31134 + 68] = mem[idx + _30949 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31134 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31134 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30429 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30429 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30429 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30429 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if (0 / s) - (s * 0 / s) and rewardsFee > -1 / (0 / s) - (s * 0 / s):
                                                                    revert with 0, 17
                                                                if not (0 / s) - (s * 0 / s):
                                                                    revert with 0, 18
                                                                if (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / (0 / s) - (s * 0 / s) != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22905 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22905] = 26
                                                                mem[_22905 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22957 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22957 + 68] = mem[idx + _22905 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22957 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22957 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23329 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23329] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23403 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23329 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23403 + 68] = this.address
                                                                    mem[_23403 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23403 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25894 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25974 = mem[_25894]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25974
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25974
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26214 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26214] == bool(mem[_26214])
                                                                    if mem[_26214]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25974:
                                                                            _26534 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26534] = 26
                                                                            mem[_26534 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26614 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26614 + 68] = mem[idx + _26534 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26614 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26614 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25974 and sub_67a6acd1[stor10[idx]] > -1 / _25974:
                                                                                revert with 0, 17
                                                                            if not _25974:
                                                                                revert with 0, 18
                                                                            if _25974 * sub_67a6acd1[stor10[idx]] / _25974 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27014 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27014] = 26
                                                                            mem[_27014 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27384 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27384 + 68] = mem[idx + _27014 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27384 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27384 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25974 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25974 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25974 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25974 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23329 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23329 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23329 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28293 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23329 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28293 + 68] = this.address
                                                                    mem[_28293 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28293 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30388 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30428 = mem[_30388]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30428
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30428
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30548 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30548] == bool(mem[_30548])
                                                                    if mem[_30548]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30428:
                                                                            _30708 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30708] = 26
                                                                            mem[_30708 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30748 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30748 + 68] = mem[idx + _30708 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30748 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30748 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30428 and sub_67a6acd1[stor10[idx]] > -1 / _30428:
                                                                                revert with 0, 17
                                                                            if not _30428:
                                                                                revert with 0, 18
                                                                            if _30428 * sub_67a6acd1[stor10[idx]] / _30428 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30948 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30948] = 26
                                                                            mem[_30948 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31132 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31132 + 68] = mem[idx + _30948 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31132 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31132 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30428 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30428 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30428 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30428 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                else:
                                                    if (0 / s) - (s * 0 / s) and marketingFee > -1 / (0 / s) - (s * 0 / s):
                                                        revert with 0, 17
                                                    if not (0 / s) - (s * 0 / s):
                                                        revert with 0, 18
                                                    if (0 / s * marketingFee) - (s * 0 / s * marketingFee) / (0 / s) - (s * 0 / s) != marketingFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11287 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11287] = 26
                                                    mem[_11287 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11368 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11368 + 68] = mem[idx + _11287 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11368 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11368 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11903 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11903] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11976 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11903 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11976 + 68] = _marketingWalletAddress
                                                        mem[_11976 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value (0 / s * marketingFee) - (s * 0 / s * marketingFee) / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11976 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16865 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16865] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16900 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16865 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16900 + 68] = this.address
                                                                mem[_16900 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16900 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18958 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _18998 = mem[_18958]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _18998
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _18998
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19118 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19118] == bool(mem[_19118])
                                                                if mem[_19118]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _18998:
                                                                        _19556 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19556] = 26
                                                                        mem[_19556 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19671 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19671 + 68] = mem[idx + _19556 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19671 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19671 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _18998 and sub_67a6acd1[stor10[idx]] > -1 / _18998:
                                                                            revert with 0, 17
                                                                        if not _18998:
                                                                            revert with 0, 18
                                                                        if _18998 * sub_67a6acd1[stor10[idx]] / _18998 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _19992 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19992] = 26
                                                                        mem[_19992 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20242 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20242 + 68] = mem[idx + _19992 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20242 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20242 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _18998 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _18998 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _18998 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_18998 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16865 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16865 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16865 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21959 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16865 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21959 + 68] = this.address
                                                                mem[_21959 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21959 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25884 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25964 = mem[_25884]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25964
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25964
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26204 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26204] == bool(mem[_26204])
                                                                if mem[_26204]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25964:
                                                                        _26524 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26524] = 26
                                                                        mem[_26524 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26604 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26604 + 68] = mem[idx + _26524 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26604 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26604 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25964 and sub_67a6acd1[stor10[idx]] > -1 / _25964:
                                                                            revert with 0, 17
                                                                        if not _25964:
                                                                            revert with 0, 18
                                                                        if _25964 * sub_67a6acd1[stor10[idx]] / _25964 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27004 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27004] = 26
                                                                        mem[_27004 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27364 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27364 + 68] = mem[idx + _27004 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27364 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27364 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25964 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25964 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25964 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25964 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not (0 / s) - (s * 0 / s):
                                                                _16927 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16927] = 26
                                                                mem[_16927 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16955 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16955 + 68] = mem[idx + _16927 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16955 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16955 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17157 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17157] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17205 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17157 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17205 + 68] = this.address
                                                                    mem[_17205 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17205 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18960 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19000 = mem[_18960]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19000
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19000
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19120 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19120] == bool(mem[_19120])
                                                                    if mem[_19120]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19000:
                                                                            _19558 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19558] = 26
                                                                            mem[_19558 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19673 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19673 + 68] = mem[idx + _19558 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19673 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19673 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19000 and sub_67a6acd1[stor10[idx]] > -1 / _19000:
                                                                                revert with 0, 17
                                                                            if not _19000:
                                                                                revert with 0, 18
                                                                            if _19000 * sub_67a6acd1[stor10[idx]] / _19000 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19994 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19994] = 26
                                                                            mem[_19994 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20246 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20246 + 68] = mem[idx + _19994 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20246 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20246 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19000 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19000 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19000 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19000 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17157 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17157 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17157 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21963 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17157 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21963 + 68] = this.address
                                                                    mem[_21963 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21963 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25886 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25966 = mem[_25886]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25966
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25966
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26206 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26206] == bool(mem[_26206])
                                                                    if mem[_26206]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25966:
                                                                            _26526 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26526] = 26
                                                                            mem[_26526 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26606 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26606 + 68] = mem[idx + _26526 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26606 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26606 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25966 and sub_67a6acd1[stor10[idx]] > -1 / _25966:
                                                                                revert with 0, 17
                                                                            if not _25966:
                                                                                revert with 0, 18
                                                                            if _25966 * sub_67a6acd1[stor10[idx]] / _25966 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27006 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27006] = 26
                                                                            mem[_27006 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27368 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27368 + 68] = mem[idx + _27006 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27368 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27368 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25966 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25966 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25966 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25966 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if (0 / s) - (s * 0 / s) and rewardsFee > -1 / (0 / s) - (s * 0 / s):
                                                                    revert with 0, 17
                                                                if not (0 / s) - (s * 0 / s):
                                                                    revert with 0, 18
                                                                if (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / (0 / s) - (s * 0 / s) != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17048 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17048] = 26
                                                                mem[_17048 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17097 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17097 + 68] = mem[idx + _17048 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17097 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17097 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17351 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17351] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17396 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17351 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17396 + 68] = this.address
                                                                    mem[_17396 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17396 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18959 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18999 = mem[_18959]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18999
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18999
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19119 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19119] == bool(mem[_19119])
                                                                    if mem[_19119]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18999:
                                                                            _19557 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19557] = 26
                                                                            mem[_19557 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19672 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19672 + 68] = mem[idx + _19557 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19672 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19672 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18999 and sub_67a6acd1[stor10[idx]] > -1 / _18999:
                                                                                revert with 0, 17
                                                                            if not _18999:
                                                                                revert with 0, 18
                                                                            if _18999 * sub_67a6acd1[stor10[idx]] / _18999 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19993 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19993] = 26
                                                                            mem[_19993 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20244 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20244 + 68] = mem[idx + _19993 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20244 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20244 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18999 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18999 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18999 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18999 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17351 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17351 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17351 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21961 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17351 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21961 + 68] = this.address
                                                                    mem[_21961 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21961 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25885 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25965 = mem[_25885]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25965
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25965
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26205 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26205] == bool(mem[_26205])
                                                                    if mem[_26205]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25965:
                                                                            _26525 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26525] = 26
                                                                            mem[_26525 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26605 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26605 + 68] = mem[idx + _26525 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26605 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26605 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25965 and sub_67a6acd1[stor10[idx]] > -1 / _25965:
                                                                                revert with 0, 17
                                                                            if not _25965:
                                                                                revert with 0, 18
                                                                            if _25965 * sub_67a6acd1[stor10[idx]] / _25965 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27005 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27005] = 26
                                                                            mem[_27005 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27366 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27366 + 68] = mem[idx + _27005 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27366 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27366 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25965 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25965 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25965 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25965 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11903 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11903 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11903 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18645 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11903 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18645 + 68] = _marketingWalletAddress
                                                        mem[_18645 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value (0 / s * marketingFee) - (s * 0 / s * marketingFee) / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18645 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22504 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22504] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22556 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22504 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22556 + 68] = this.address
                                                                mem[_22556 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22556 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25887 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25967 = mem[_25887]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25967
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25967
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26207 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26207] == bool(mem[_26207])
                                                                if mem[_26207]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25967:
                                                                        _26527 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26527] = 26
                                                                        mem[_26527 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26607 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26607 + 68] = mem[idx + _26527 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26607 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26607 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25967 and sub_67a6acd1[stor10[idx]] > -1 / _25967:
                                                                            revert with 0, 17
                                                                        if not _25967:
                                                                            revert with 0, 18
                                                                        if _25967 * sub_67a6acd1[stor10[idx]] / _25967 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27007 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27007] = 26
                                                                        mem[_27007 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27370 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27370 + 68] = mem[idx + _27007 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27370 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27370 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25967 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25967 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25967 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25967 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22504 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22504 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22504 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28285 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22504 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28285 + 68] = this.address
                                                                mem[_28285 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28285 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30384 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30424 = mem[_30384]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30424
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30424
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30544 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30544] == bool(mem[_30544])
                                                                if mem[_30544]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30424:
                                                                        _30704 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30704] = 26
                                                                        mem[_30704 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30744 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30744 + 68] = mem[idx + _30704 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30744 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30744 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30424 and sub_67a6acd1[stor10[idx]] > -1 / _30424:
                                                                            revert with 0, 17
                                                                        if not _30424:
                                                                            revert with 0, 18
                                                                        if _30424 * sub_67a6acd1[stor10[idx]] / _30424 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30944 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30944] = 26
                                                                        mem[_30944 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31124 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31124 + 68] = mem[idx + _30944 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31124 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31124 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30424 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30424 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30424 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30424 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not (0 / s) - (s * 0 / s):
                                                                _22606 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22606] = 26
                                                                mem[_22606 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22731 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22731 + 68] = mem[idx + _22606 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22731 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22731 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23059 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23059] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23141 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23059 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23141 + 68] = this.address
                                                                    mem[_23141 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23141 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25889 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25969 = mem[_25889]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25969
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25969
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26209 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26209] == bool(mem[_26209])
                                                                    if mem[_26209]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25969:
                                                                            _26529 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26529] = 26
                                                                            mem[_26529 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26609 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26609 + 68] = mem[idx + _26529 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26609 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26609 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25969 and sub_67a6acd1[stor10[idx]] > -1 / _25969:
                                                                                revert with 0, 17
                                                                            if not _25969:
                                                                                revert with 0, 18
                                                                            if _25969 * sub_67a6acd1[stor10[idx]] / _25969 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27009 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27009] = 26
                                                                            mem[_27009 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27374 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27374 + 68] = mem[idx + _27009 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27374 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27374 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25969 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25969 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25969 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25969 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23059 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23059 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23059 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28289 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23059 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28289 + 68] = this.address
                                                                    mem[_28289 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28289 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30386 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30426 = mem[_30386]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30426
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30426
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30546 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30546] == bool(mem[_30546])
                                                                    if mem[_30546]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30426:
                                                                            _30706 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30706] = 26
                                                                            mem[_30706 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30746 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30746 + 68] = mem[idx + _30706 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30746 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30746 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30426 and sub_67a6acd1[stor10[idx]] > -1 / _30426:
                                                                                revert with 0, 17
                                                                            if not _30426:
                                                                                revert with 0, 18
                                                                            if _30426 * sub_67a6acd1[stor10[idx]] / _30426 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30946 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30946] = 26
                                                                            mem[_30946 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31128 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31128 + 68] = mem[idx + _30946 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31128 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31128 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30426 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30426 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30426 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30426 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if (0 / s) - (s * 0 / s) and rewardsFee > -1 / (0 / s) - (s * 0 / s):
                                                                    revert with 0, 17
                                                                if not (0 / s) - (s * 0 / s):
                                                                    revert with 0, 18
                                                                if (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / (0 / s) - (s * 0 / s) != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22904 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22904] = 26
                                                                mem[_22904 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22953 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22953 + 68] = mem[idx + _22904 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22953 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22953 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23327 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23327] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23395 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23327 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23395 + 68] = this.address
                                                                    mem[_23395 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23395 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25888 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25968 = mem[_25888]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25968
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25968
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26208 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26208] == bool(mem[_26208])
                                                                    if mem[_26208]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25968:
                                                                            _26528 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26528] = 26
                                                                            mem[_26528 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26608 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26608 + 68] = mem[idx + _26528 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26608 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26608 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25968 and sub_67a6acd1[stor10[idx]] > -1 / _25968:
                                                                                revert with 0, 17
                                                                            if not _25968:
                                                                                revert with 0, 18
                                                                            if _25968 * sub_67a6acd1[stor10[idx]] / _25968 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27008 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27008] = 26
                                                                            mem[_27008 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27372 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27372 + 68] = mem[idx + _27008 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27372 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27372 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25968 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25968 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25968 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25968 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23327 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23327 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23327 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28287 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23327 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28287 + 68] = this.address
                                                                    mem[_28287 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28287 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30385 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30425 = mem[_30385]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30425
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30425
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30545 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30545] == bool(mem[_30545])
                                                                    if mem[_30545]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30425:
                                                                            _30705 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30705] = 26
                                                                            mem[_30705 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30745 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30745 + 68] = mem[idx + _30705 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30745 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30745 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30425 and sub_67a6acd1[stor10[idx]] > -1 / _30425:
                                                                                revert with 0, 17
                                                                            if not _30425:
                                                                                revert with 0, 18
                                                                            if _30425 * sub_67a6acd1[stor10[idx]] / _30425 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30945 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30945] = 26
                                                                            mem[_30945 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31126 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31126 + 68] = mem[idx + _30945 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31126 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31126 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30425 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30425 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30425 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30425 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                            else:
                                                if not 0 / s:
                                                    _11122 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11122] = 26
                                                    mem[_11122 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11173 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11173 + 68] = mem[idx + _11122 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11173 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11173 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11423 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11423] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11490 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11423 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11490 + 68] = _marketingWalletAddress
                                                        mem[_11490 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11490 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16871 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16871] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16909 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16871 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16909 + 68] = this.address
                                                                mem[_16909 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16909 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18967 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _19007 = mem[_18967]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _19007
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _19007
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19127 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19127] == bool(mem[_19127])
                                                                if mem[_19127]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _19007:
                                                                        _19568 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19568] = 26
                                                                        mem[_19568 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19692 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19692 + 68] = mem[idx + _19568 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19692 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19692 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _19007 and sub_67a6acd1[stor10[idx]] > -1 / _19007:
                                                                            revert with 0, 17
                                                                        if not _19007:
                                                                            revert with 0, 18
                                                                        if _19007 * sub_67a6acd1[stor10[idx]] / _19007 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _20007 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_20007] = 26
                                                                        mem[_20007 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20275 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20275 + 68] = mem[idx + _20007 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20275 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20275 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _19007 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _19007 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _19007 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_19007 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16871 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16871 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16871 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21977 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16871 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21977 + 68] = this.address
                                                                mem[_21977 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21977 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25902 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25982 = mem[_25902]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25982
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25982
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26222 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26222] == bool(mem[_26222])
                                                                if mem[_26222]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25982:
                                                                        _26542 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26542] = 26
                                                                        mem[_26542 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26622 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26622 + 68] = mem[idx + _26542 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26622 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26622 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25982 and sub_67a6acd1[stor10[idx]] > -1 / _25982:
                                                                            revert with 0, 17
                                                                        if not _25982:
                                                                            revert with 0, 18
                                                                        if _25982 * sub_67a6acd1[stor10[idx]] / _25982 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27022 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27022] = 26
                                                                        mem[_27022 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27400 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27400 + 68] = mem[idx + _27022 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27400 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27400 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25982 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25982 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25982 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25982 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _16930 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16930] = 26
                                                                mem[_16930 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16958 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16958 + 68] = mem[idx + _16930 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16958 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16958 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17166 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17166] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17217 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17166 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17217 + 68] = this.address
                                                                    mem[_17217 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17217 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18969 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19009 = mem[_18969]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19009
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19009
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19129 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19129] == bool(mem[_19129])
                                                                    if mem[_19129]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19009:
                                                                            _19570 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19570] = 26
                                                                            mem[_19570 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19694 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19694 + 68] = mem[idx + _19570 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19694 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19694 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19009 and sub_67a6acd1[stor10[idx]] > -1 / _19009:
                                                                                revert with 0, 17
                                                                            if not _19009:
                                                                                revert with 0, 18
                                                                            if _19009 * sub_67a6acd1[stor10[idx]] / _19009 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _20009 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_20009] = 26
                                                                            mem[_20009 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20279 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20279 + 68] = mem[idx + _20009 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20279 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20279 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19009 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19009 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19009 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19009 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17166 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17166 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17166 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21981 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17166 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21981 + 68] = this.address
                                                                    mem[_21981 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21981 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25904 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25984 = mem[_25904]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25984
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25984
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26224 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26224] == bool(mem[_26224])
                                                                    if mem[_26224]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25984:
                                                                            _26544 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26544] = 26
                                                                            mem[_26544 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26624 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26624 + 68] = mem[idx + _26544 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26624 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26624 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25984 and sub_67a6acd1[stor10[idx]] > -1 / _25984:
                                                                                revert with 0, 17
                                                                            if not _25984:
                                                                                revert with 0, 18
                                                                            if _25984 * sub_67a6acd1[stor10[idx]] / _25984 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27024 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27024] = 26
                                                                            mem[_27024 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27404 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27404 + 68] = mem[idx + _27024 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27404 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27404 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25984 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25984 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25984 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25984 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17051 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17051] = 26
                                                                mem[_17051 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17109 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17109 + 68] = mem[idx + _17051 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17109 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17109 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17357 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17357] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17411 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17357 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17411 + 68] = this.address
                                                                    mem[_17411 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17411 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18968 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19008 = mem[_18968]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19008
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19008
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19128 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19128] == bool(mem[_19128])
                                                                    if mem[_19128]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19008:
                                                                            _19569 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19569] = 26
                                                                            mem[_19569 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19693 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19693 + 68] = mem[idx + _19569 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19693 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19693 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19008 and sub_67a6acd1[stor10[idx]] > -1 / _19008:
                                                                                revert with 0, 17
                                                                            if not _19008:
                                                                                revert with 0, 18
                                                                            if _19008 * sub_67a6acd1[stor10[idx]] / _19008 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _20008 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_20008] = 26
                                                                            mem[_20008 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20277 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20277 + 68] = mem[idx + _20008 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20277 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20277 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19008 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19008 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19008 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19008 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17357 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17357 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17357 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21979 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17357 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21979 + 68] = this.address
                                                                    mem[_21979 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21979 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25903 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25983 = mem[_25903]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25983
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25983
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26223 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26223] == bool(mem[_26223])
                                                                    if mem[_26223]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25983:
                                                                            _26543 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26543] = 26
                                                                            mem[_26543 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26623 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26623 + 68] = mem[idx + _26543 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26623 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26623 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25983 and sub_67a6acd1[stor10[idx]] > -1 / _25983:
                                                                                revert with 0, 17
                                                                            if not _25983:
                                                                                revert with 0, 18
                                                                            if _25983 * sub_67a6acd1[stor10[idx]] / _25983 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27023 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27023] = 26
                                                                            mem[_27023 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27402 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27402 + 68] = mem[idx + _27023 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27402 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27402 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25983 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25983 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25983 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25983 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11423 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11423 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11423 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18651 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11423 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18651 + 68] = _marketingWalletAddress
                                                        mem[_18651 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18651 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22519 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22519] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22565 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22519 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22565 + 68] = this.address
                                                                mem[_22565 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22565 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25905 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25985 = mem[_25905]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25985
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25985
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26225 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26225] == bool(mem[_26225])
                                                                if mem[_26225]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25985:
                                                                        _26545 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26545] = 26
                                                                        mem[_26545 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26625 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26625 + 68] = mem[idx + _26545 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26625 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26625 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25985 and sub_67a6acd1[stor10[idx]] > -1 / _25985:
                                                                            revert with 0, 17
                                                                        if not _25985:
                                                                            revert with 0, 18
                                                                        if _25985 * sub_67a6acd1[stor10[idx]] / _25985 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27025 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27025] = 26
                                                                        mem[_27025 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27406 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27406 + 68] = mem[idx + _27025 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27406 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27406 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25985 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25985 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25985 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25985 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22519 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22519 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22519 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28303 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22519 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28303 + 68] = this.address
                                                                mem[_28303 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28303 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30393 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30433 = mem[_30393]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30433
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30433
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30553 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30553] == bool(mem[_30553])
                                                                if mem[_30553]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30433:
                                                                        _30713 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30713] = 26
                                                                        mem[_30713 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30753 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30753 + 68] = mem[idx + _30713 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30753 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30753 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30433 and sub_67a6acd1[stor10[idx]] > -1 / _30433:
                                                                            revert with 0, 17
                                                                        if not _30433:
                                                                            revert with 0, 18
                                                                        if _30433 * sub_67a6acd1[stor10[idx]] / _30433 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30953 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30953] = 26
                                                                        mem[_30953 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31142 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31142 + 68] = mem[idx + _30953 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31142 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31142 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30433 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30433 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30433 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30433 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _22618 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22618] = 26
                                                                mem[_22618 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22734 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22734 + 68] = mem[idx + _22618 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22734 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22734 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23086 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23086] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23153 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23086 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23153 + 68] = this.address
                                                                    mem[_23153 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23153 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25907 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25987 = mem[_25907]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25987
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25987
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26227 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26227] == bool(mem[_26227])
                                                                    if mem[_26227]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25987:
                                                                            _26547 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26547] = 26
                                                                            mem[_26547 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26627 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26627 + 68] = mem[idx + _26547 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26627 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26627 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25987 and sub_67a6acd1[stor10[idx]] > -1 / _25987:
                                                                                revert with 0, 17
                                                                            if not _25987:
                                                                                revert with 0, 18
                                                                            if _25987 * sub_67a6acd1[stor10[idx]] / _25987 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27027 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27027] = 26
                                                                            mem[_27027 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27410 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27410 + 68] = mem[idx + _27027 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27410 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27410 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25987 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25987 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25987 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25987 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23086 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23086 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23086 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28307 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23086 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28307 + 68] = this.address
                                                                    mem[_28307 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28307 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30395 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30435 = mem[_30395]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30435
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30435
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30555 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30555] == bool(mem[_30555])
                                                                    if mem[_30555]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30435:
                                                                            _30715 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30715] = 26
                                                                            mem[_30715 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30755 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30755 + 68] = mem[idx + _30715 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30755 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30755 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30435 and sub_67a6acd1[stor10[idx]] > -1 / _30435:
                                                                                revert with 0, 17
                                                                            if not _30435:
                                                                                revert with 0, 18
                                                                            if _30435 * sub_67a6acd1[stor10[idx]] / _30435 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30955 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30955] = 26
                                                                            mem[_30955 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31146 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31146 + 68] = mem[idx + _30955 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31146 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31146 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30435 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30435 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30435 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30435 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22907 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22907] = 26
                                                                mem[_22907 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22965 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22965 + 68] = mem[idx + _22907 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22965 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22965 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23333 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23333] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23419 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23333 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23419 + 68] = this.address
                                                                    mem[_23419 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23419 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25906 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25986 = mem[_25906]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25986
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25986
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26226 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26226] == bool(mem[_26226])
                                                                    if mem[_26226]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25986:
                                                                            _26546 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26546] = 26
                                                                            mem[_26546 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26626 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26626 + 68] = mem[idx + _26546 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26626 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26626 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25986 and sub_67a6acd1[stor10[idx]] > -1 / _25986:
                                                                                revert with 0, 17
                                                                            if not _25986:
                                                                                revert with 0, 18
                                                                            if _25986 * sub_67a6acd1[stor10[idx]] / _25986 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27026 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27026] = 26
                                                                            mem[_27026 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27408 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27408 + 68] = mem[idx + _27026 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27408 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27408 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25986 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25986 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25986 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25986 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23333 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23333 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23333 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28305 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23333 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28305 + 68] = this.address
                                                                    mem[_28305 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28305 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30394 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30434 = mem[_30394]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30434
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30434
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30554 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30554] == bool(mem[_30554])
                                                                    if mem[_30554]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30434:
                                                                            _30714 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30714] = 26
                                                                            mem[_30714 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30754 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30754 + 68] = mem[idx + _30714 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30754 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30754 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30434 and sub_67a6acd1[stor10[idx]] > -1 / _30434:
                                                                                revert with 0, 17
                                                                            if not _30434:
                                                                                revert with 0, 18
                                                                            if _30434 * sub_67a6acd1[stor10[idx]] / _30434 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30954 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30954] = 26
                                                                            mem[_30954 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31144 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31144 + 68] = mem[idx + _30954 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31144 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31144 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30434 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30434 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30434 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30434 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                else:
                                                    if 0 / s and marketingFee > -1 / 0 / s:
                                                        revert with 0, 17
                                                    if not 0 / s:
                                                        revert with 0, 18
                                                    if 0 / s * marketingFee / 0 / s != marketingFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11288 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11288] = 26
                                                    mem[_11288 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11370 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11370 + 68] = mem[idx + _11288 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11370 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11370 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11905 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11905] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11980 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11905 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11980 + 68] = _marketingWalletAddress
                                                        mem[_11980 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / s * marketingFee / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11980 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16869 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16869] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16906 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16869 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16906 + 68] = this.address
                                                                mem[_16906 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16906 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18964 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _19004 = mem[_18964]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _19004
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _19004
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19124 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19124] == bool(mem[_19124])
                                                                if mem[_19124]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _19004:
                                                                        _19564 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19564] = 26
                                                                        mem[_19564 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19685 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19685 + 68] = mem[idx + _19564 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19685 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19685 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _19004 and sub_67a6acd1[stor10[idx]] > -1 / _19004:
                                                                            revert with 0, 17
                                                                        if not _19004:
                                                                            revert with 0, 18
                                                                        if _19004 * sub_67a6acd1[stor10[idx]] / _19004 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _20002 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_20002] = 26
                                                                        mem[_20002 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20264 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20264 + 68] = mem[idx + _20002 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20264 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20264 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _19004 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _19004 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _19004 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_19004 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16869 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16869 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16869 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21971 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16869 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21971 + 68] = this.address
                                                                mem[_21971 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21971 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25896 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25976 = mem[_25896]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25976
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25976
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26216 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26216] == bool(mem[_26216])
                                                                if mem[_26216]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25976:
                                                                        _26536 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26536] = 26
                                                                        mem[_26536 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26616 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26616 + 68] = mem[idx + _26536 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26616 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26616 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25976 and sub_67a6acd1[stor10[idx]] > -1 / _25976:
                                                                            revert with 0, 17
                                                                        if not _25976:
                                                                            revert with 0, 18
                                                                        if _25976 * sub_67a6acd1[stor10[idx]] / _25976 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27016 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27016] = 26
                                                                        mem[_27016 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27388 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27388 + 68] = mem[idx + _27016 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27388 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27388 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25976 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25976 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25976 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25976 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _16929 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16929] = 26
                                                                mem[_16929 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16957 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16957 + 68] = mem[idx + _16929 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16957 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16957 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17163 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17163] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17213 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17163 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17213 + 68] = this.address
                                                                    mem[_17213 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17213 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18966 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19006 = mem[_18966]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19006
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19006
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19126 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19126] == bool(mem[_19126])
                                                                    if mem[_19126]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19006:
                                                                            _19566 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19566] = 26
                                                                            mem[_19566 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19687 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19687 + 68] = mem[idx + _19566 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19687 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19687 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19006 and sub_67a6acd1[stor10[idx]] > -1 / _19006:
                                                                                revert with 0, 17
                                                                            if not _19006:
                                                                                revert with 0, 18
                                                                            if _19006 * sub_67a6acd1[stor10[idx]] / _19006 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _20004 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_20004] = 26
                                                                            mem[_20004 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20268 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20268 + 68] = mem[idx + _20004 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20268 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20268 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19006 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19006 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19006 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19006 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17163 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17163 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17163 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21975 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17163 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21975 + 68] = this.address
                                                                    mem[_21975 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21975 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25898 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25978 = mem[_25898]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25978
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25978
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26218 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26218] == bool(mem[_26218])
                                                                    if mem[_26218]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25978:
                                                                            _26538 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26538] = 26
                                                                            mem[_26538 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26618 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26618 + 68] = mem[idx + _26538 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26618 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26618 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25978 and sub_67a6acd1[stor10[idx]] > -1 / _25978:
                                                                                revert with 0, 17
                                                                            if not _25978:
                                                                                revert with 0, 18
                                                                            if _25978 * sub_67a6acd1[stor10[idx]] / _25978 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27018 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27018] = 26
                                                                            mem[_27018 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27392 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27392 + 68] = mem[idx + _27018 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27392 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27392 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25978 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25978 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25978 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25978 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17050 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17050] = 26
                                                                mem[_17050 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17105 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17105 + 68] = mem[idx + _17050 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17105 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17105 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17355 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17355] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17406 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17355 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17406 + 68] = this.address
                                                                    mem[_17406 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17406 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18965 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _19005 = mem[_18965]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _19005
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _19005
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19125 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19125] == bool(mem[_19125])
                                                                    if mem[_19125]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _19005:
                                                                            _19565 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19565] = 26
                                                                            mem[_19565 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19686 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19686 + 68] = mem[idx + _19565 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19686 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19686 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _19005 and sub_67a6acd1[stor10[idx]] > -1 / _19005:
                                                                                revert with 0, 17
                                                                            if not _19005:
                                                                                revert with 0, 18
                                                                            if _19005 * sub_67a6acd1[stor10[idx]] / _19005 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _20003 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_20003] = 26
                                                                            mem[_20003 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20266 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20266 + 68] = mem[idx + _20003 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20266 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20266 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _19005 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _19005 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _19005 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_19005 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17355 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17355 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17355 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21973 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17355 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21973 + 68] = this.address
                                                                    mem[_21973 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21973 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25897 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25977 = mem[_25897]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25977
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25977
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26217 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26217] == bool(mem[_26217])
                                                                    if mem[_26217]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25977:
                                                                            _26537 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26537] = 26
                                                                            mem[_26537 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26617 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26617 + 68] = mem[idx + _26537 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26617 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26617 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25977 and sub_67a6acd1[stor10[idx]] > -1 / _25977:
                                                                                revert with 0, 17
                                                                            if not _25977:
                                                                                revert with 0, 18
                                                                            if _25977 * sub_67a6acd1[stor10[idx]] / _25977 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27017 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27017] = 26
                                                                            mem[_27017 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27390 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27390 + 68] = mem[idx + _27017 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27390 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27390 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25977 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25977 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25977 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25977 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11905 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11905 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11905 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18649 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11905 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18649 + 68] = _marketingWalletAddress
                                                        mem[_18649 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / s * marketingFee / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18649 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22514 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22514] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22562 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22514 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22562 + 68] = this.address
                                                                mem[_22562 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22562 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25899 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25979 = mem[_25899]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25979
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25979
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26219 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26219] == bool(mem[_26219])
                                                                if mem[_26219]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25979:
                                                                        _26539 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26539] = 26
                                                                        mem[_26539 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26619 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26619 + 68] = mem[idx + _26539 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26619 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26619 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25979 and sub_67a6acd1[stor10[idx]] > -1 / _25979:
                                                                            revert with 0, 17
                                                                        if not _25979:
                                                                            revert with 0, 18
                                                                        if _25979 * sub_67a6acd1[stor10[idx]] / _25979 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27019 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27019] = 26
                                                                        mem[_27019 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27394 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27394 + 68] = mem[idx + _27019 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27394 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27394 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25979 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25979 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25979 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25979 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22514 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22514 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22514 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28297 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22514 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28297 + 68] = this.address
                                                                mem[_28297 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28297 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30390 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30430 = mem[_30390]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30430
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30430
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30550 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30550] == bool(mem[_30550])
                                                                if mem[_30550]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30430:
                                                                        _30710 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30710] = 26
                                                                        mem[_30710 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30750 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30750 + 68] = mem[idx + _30710 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30750 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30750 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30430 and sub_67a6acd1[stor10[idx]] > -1 / _30430:
                                                                            revert with 0, 17
                                                                        if not _30430:
                                                                            revert with 0, 18
                                                                        if _30430 * sub_67a6acd1[stor10[idx]] / _30430 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30950 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30950] = 26
                                                                        mem[_30950 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31136 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31136 + 68] = mem[idx + _30950 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31136 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31136 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30430 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30430 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30430 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30430 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _22614 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22614] = 26
                                                                mem[_22614 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22733 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22733 + 68] = mem[idx + _22614 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22733 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22733 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23077 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23077] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23149 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23077 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23149 + 68] = this.address
                                                                    mem[_23149 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23149 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25901 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25981 = mem[_25901]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25981
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25981
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26221 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26221] == bool(mem[_26221])
                                                                    if mem[_26221]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25981:
                                                                            _26541 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26541] = 26
                                                                            mem[_26541 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26621 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26621 + 68] = mem[idx + _26541 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26621 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26621 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25981 and sub_67a6acd1[stor10[idx]] > -1 / _25981:
                                                                                revert with 0, 17
                                                                            if not _25981:
                                                                                revert with 0, 18
                                                                            if _25981 * sub_67a6acd1[stor10[idx]] / _25981 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27021 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27021] = 26
                                                                            mem[_27021 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27398 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27398 + 68] = mem[idx + _27021 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27398 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27398 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25981 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25981 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25981 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25981 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23077 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23077 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23077 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28301 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23077 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28301 + 68] = this.address
                                                                    mem[_28301 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28301 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30392 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30432 = mem[_30392]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30432
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30432
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30552 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30552] == bool(mem[_30552])
                                                                    if mem[_30552]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30432:
                                                                            _30712 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30712] = 26
                                                                            mem[_30712 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30752 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30752 + 68] = mem[idx + _30712 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30752 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30752 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30432 and sub_67a6acd1[stor10[idx]] > -1 / _30432:
                                                                                revert with 0, 17
                                                                            if not _30432:
                                                                                revert with 0, 18
                                                                            if _30432 * sub_67a6acd1[stor10[idx]] / _30432 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30952 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30952] = 26
                                                                            mem[_30952 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31140 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31140 + 68] = mem[idx + _30952 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31140 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31140 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30432 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30432 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30432 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30432 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22906 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22906] = 26
                                                                mem[_22906 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22961 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22961 + 68] = mem[idx + _22906 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22961 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22961 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23331 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23331] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23411 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23331 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23411 + 68] = this.address
                                                                    mem[_23411 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23411 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25900 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25980 = mem[_25900]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25980
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25980
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26220 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26220] == bool(mem[_26220])
                                                                    if mem[_26220]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25980:
                                                                            _26540 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26540] = 26
                                                                            mem[_26540 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26620 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26620 + 68] = mem[idx + _26540 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26620 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26620 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25980 and sub_67a6acd1[stor10[idx]] > -1 / _25980:
                                                                                revert with 0, 17
                                                                            if not _25980:
                                                                                revert with 0, 18
                                                                            if _25980 * sub_67a6acd1[stor10[idx]] / _25980 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27020 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27020] = 26
                                                                            mem[_27020 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27396 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27396 + 68] = mem[idx + _27020 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27396 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27396 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25980 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25980 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25980 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25980 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23331 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23331 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23331 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28299 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23331 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28299 + 68] = this.address
                                                                    mem[_28299 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28299 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30391 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30431 = mem[_30391]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30431
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30431
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30551 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30551] == bool(mem[_30551])
                                                                    if mem[_30551]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30431:
                                                                            _30711 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30711] = 26
                                                                            mem[_30711 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30751 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30751 + 68] = mem[idx + _30711 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30751 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30751 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30431 and sub_67a6acd1[stor10[idx]] > -1 / _30431:
                                                                                revert with 0, 17
                                                                            if not _30431:
                                                                                revert with 0, 18
                                                                            if _30431 * sub_67a6acd1[stor10[idx]] / _30431 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30951 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30951] = 26
                                                                            mem[_30951 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31138 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31138 + 68] = mem[idx + _30951 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31138 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31138 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30431 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30431 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30431 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30431 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    stor7 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 25
                                    if stor25[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _10920 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_10920] = 38
                                        mem[_10920 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10920 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        mem[0] = arg1
                                        mem[32] = 0
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not ext_call.success:
                                            if not ext_call.success:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11537 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11659 = mem[_11537 + 32]
                                                        _11660 = mem[_11537 + 64]
                                                        mem[mem[64]] = mem[_11537]
                                                        mem[mem[64] + 64] = _11660
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11659, _11660, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11591 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11763 = mem[_11591 + 32]
                                                        _11764 = mem[_11591 + 64]
                                                        mem[mem[64]] = mem[_11591]
                                                        mem[mem[64] + 64] = _11764
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11763, _11764, gasForProcessing, 1, tx.origin);
                                        else:
                                            if not ext_call.success:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11592 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11767 = mem[_11592 + 32]
                                                        _11768 = mem[_11592 + 64]
                                                        mem[mem[64]] = mem[_11592]
                                                        mem[mem[64] + 64] = _11768
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11767, _11768, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11663 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11880 = mem[_11663 + 32]
                                                        _11881 = mem[_11663 + 64]
                                                        mem[mem[64]] = mem[_11663]
                                                        mem[mem[64] + 64] = _11881
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11880, _11881, gasForProcessing, 1, tx.origin);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 25
                                        if stor25[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _10948 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_10948] = 38
                                            mem[_10948 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10948 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            mem[0] = arg1
                                            mem[32] = 0
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not ext_call.success:
                                                if not ext_call.success:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11598 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11784 = mem[_11598 + 32]
                                                            _11785 = mem[_11598 + 64]
                                                            mem[mem[64]] = mem[_11598]
                                                            mem[mem[64] + 64] = _11785
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11784, _11785, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11674 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11895 = mem[_11674 + 32]
                                                            _11896 = mem[_11674 + 64]
                                                            mem[mem[64]] = mem[_11674]
                                                            mem[mem[64] + 64] = _11896
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11895, _11896, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not ext_call.success:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11675 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11899 = mem[_11675 + 32]
                                                            _11900 = mem[_11675 + 64]
                                                            mem[mem[64]] = mem[_11675]
                                                            mem[mem[64] + 64] = _11900
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11899, _11900, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11788 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11973 = mem[_11788 + 32]
                                                            _11974 = mem[_11788 + 64]
                                                            mem[mem[64]] = mem[_11788]
                                                            mem[mem[64] + 64] = _11974
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11973, _11974, gasForProcessing, 1, tx.origin);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _10923 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_10923] = 38
                                                mem[_10923 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10923 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                mem[0] = arg1
                                                mem[32] = 0
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)]
                                                if not ext_call.success:
                                                    if not ext_call.success:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11540 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11666 = mem[_11540 + 32]
                                                                _11667 = mem[_11540 + 64]
                                                                mem[mem[64]] = mem[_11540]
                                                                mem[mem[64] + 64] = _11667
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11666, _11667, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11594 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11772 = mem[_11594 + 32]
                                                                _11773 = mem[_11594 + 64]
                                                                mem[mem[64]] = mem[_11594]
                                                                mem[mem[64] + 64] = _11773
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11772, _11773, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not ext_call.success:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11595 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11776 = mem[_11595 + 32]
                                                                _11777 = mem[_11595 + 64]
                                                                mem[mem[64]] = mem[_11595]
                                                                mem[mem[64] + 64] = _11777
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11776, _11777, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11670 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11884 = mem[_11670 + 32]
                                                                _11885 = mem[_11670 + 64]
                                                                mem[mem[64]] = mem[_11670]
                                                                mem[mem[64] + 64] = _11885
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11884, _11885, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not arg2:
                                                    _10974 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_10974] = 26
                                                    mem[_10974 + 32] = 'SafeMath: division by zero'
                                                    mem[0] = arg1
                                                    mem[32] = 26
                                                    if not stor26[address(arg1)]:
                                                        _11092 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11092] = 30
                                                        mem[_11092 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 0, 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11414 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11414] = 38
                                                        mem[_11414 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11414 + 70 len 26]
                                                            var195001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 0, 17
                                                        if balanceOf[this.address] > -1:
                                                            revert with 0, 17
                                                        if balanceOf[this.address] < balanceOf[this.address]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 0
                                                        balanceOf[address(this.address)] = balanceOf[this.address]
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12498 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12498] = 38
                                                        mem[_12498 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12498 + 70 len 26]
                                                            var213001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 0, 17
                                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13689 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13811 = mem[_13689 + 32]
                                                                        _13812 = mem[_13689 + 64]
                                                                        mem[mem[64]] = mem[_13689]
                                                                        mem[mem[64] + 64] = _13812
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13811, _13812, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13745 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13871 = mem[_13745 + 32]
                                                                        _13872 = mem[_13745 + 64]
                                                                        mem[mem[64]] = mem[_13745]
                                                                        mem[mem[64] + 64] = _13872
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13871, _13872, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13746 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13875 = mem[_13746 + 32]
                                                                        _13876 = mem[_13746 + 64]
                                                                        mem[mem[64]] = mem[_13746]
                                                                        mem[mem[64] + 64] = _13876
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13875, _13876, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13815 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13936 = mem[_13815 + 32]
                                                                        _13937 = mem[_13815 + 64]
                                                                        mem[mem[64]] = mem[_13815]
                                                                        mem[mem[64] + 64] = _13937
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13936, _13937, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not arg2:
                                                            _11203 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11203] = 26
                                                            mem[_11203 + 32] = 'SafeMath: division by zero'
                                                            _11892 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11892] = 30
                                                            mem[_11892 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > arg2:
                                                                var201001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12424 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12424] = 38
                                                            mem[_12424 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12424 + 70 len 26]
                                                                var211001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] > -1:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13303 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13303] = 38
                                                            mem[_13303 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13303 + 70 len 26]
                                                                var229001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14815 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15006 = mem[_14815 + 32]
                                                                            _15007 = mem[_14815 + 64]
                                                                            mem[mem[64]] = mem[_14815]
                                                                            mem[mem[64] + 64] = _15007
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15006, _15007, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14918 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15077 = mem[_14918 + 32]
                                                                            _15078 = mem[_14918 + 64]
                                                                            mem[mem[64]] = mem[_14918]
                                                                            mem[mem[64] + 64] = _15078
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15077, _15078, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14919 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15081 = mem[_14919 + 32]
                                                                            _15082 = mem[_14919 + 64]
                                                                            mem[mem[64]] = mem[_14919]
                                                                            mem[mem[64] + 64] = _15082
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15081, _15082, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15010 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15145 = mem[_15010 + 32]
                                                                            _15146 = mem[_15010 + 64]
                                                                            mem[mem[64]] = mem[_15010]
                                                                            mem[mem[64] + 64] = _15146
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15145, _15146, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and 1 > -1 / arg2:
                                                                revert with 0, 17
                                                            if not arg2:
                                                                revert with 0, 18
                                                            if arg2 / arg2 != 1:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11417 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11417] = 26
                                                            mem[_11417 + 32] = 'SafeMath: division by zero'
                                                            if 0 > !(arg2 / 100):
                                                                revert with 0, 17
                                                            _12246 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12246] = 30
                                                            mem[_12246 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 / 100 > arg2:
                                                                var207001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 / 100:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12657 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12657] = 38
                                                            mem[_12657 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12657 + 70 len 26]
                                                                var217001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2 / 100
                                                            if balanceOf[this.address] > !(arg2 / 100):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                                            emit Transfer((arg2 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13628 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13628] = 38
                                                            mem[_13628 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13628 + 70 len 26]
                                                                var235001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                                            emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15283 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15486 = mem[_15283 + 32]
                                                                            _15487 = mem[_15283 + 64]
                                                                            mem[mem[64]] = mem[_15283]
                                                                            mem[mem[64] + 64] = _15487
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15486, _15487, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15382 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15592 = mem[_15382 + 32]
                                                                            _15593 = mem[_15382 + 64]
                                                                            mem[mem[64]] = mem[_15382]
                                                                            mem[mem[64] + 64] = _15593
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15592, _15593, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15383 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15596 = mem[_15383 + 32]
                                                                            _15597 = mem[_15383 + 64]
                                                                            mem[mem[64]] = mem[_15383]
                                                                            mem[mem[64] + 64] = _15597
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15596, _15597, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15490 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15678 = mem[_15490 + 32]
                                                                            _15679 = mem[_15490 + 64]
                                                                            mem[mem[64]] = mem[_15490]
                                                                            mem[mem[64] + 64] = _15679
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15678, _15679, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if arg2 * totalFees / arg2 != totalFees:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11070 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11070] = 26
                                                    mem[_11070 + 32] = 'SafeMath: division by zero'
                                                    mem[0] = arg1
                                                    mem[32] = 26
                                                    if not stor26[address(arg1)]:
                                                        _11249 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11249] = 30
                                                        mem[_11249 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * totalFees / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 0, 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11886 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11886] = 38
                                                        mem[_11886 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11886 + 70 len 26]
                                                            var201001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 0, 17
                                                        if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 0
                                                        balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12753 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12753] = 38
                                                        mem[_12753 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12753 + 70 len 26]
                                                            var219001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 0, 17
                                                        if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14082 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14242 = mem[_14082 + 32]
                                                                        _14243 = mem[_14082 + 64]
                                                                        mem[mem[64]] = mem[_14082]
                                                                        mem[mem[64] + 64] = _14243
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14242, _14243, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14159 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14315 = mem[_14159 + 32]
                                                                        _14316 = mem[_14159 + 64]
                                                                        mem[mem[64]] = mem[_14159]
                                                                        mem[mem[64] + 64] = _14316
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14315, _14316, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14160 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14319 = mem[_14160 + 32]
                                                                        _14320 = mem[_14160 + 64]
                                                                        mem[mem[64]] = mem[_14160]
                                                                        mem[mem[64] + 64] = _14320
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14319, _14320, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14246 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14389 = mem[_14246 + 32]
                                                                        _14390 = mem[_14246 + 64]
                                                                        mem[mem[64]] = mem[_14246]
                                                                        mem[mem[64] + 64] = _14390
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14389, _14390, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not arg2:
                                                            _11413 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11413] = 26
                                                            mem[_11413 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * totalFees / 100 > -1:
                                                                revert with 0, 17
                                                            _12242 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12242] = 30
                                                            mem[_12242 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * totalFees / 100 > arg2:
                                                                var207001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12654 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12654] = 38
                                                            mem[_12654 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12654 + 70 len 26]
                                                                var217001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13621 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13621] = 38
                                                            mem[_13621 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13621 + 70 len 26]
                                                                var235001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15280 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15479 = mem[_15280 + 32]
                                                                            _15480 = mem[_15280 + 64]
                                                                            mem[mem[64]] = mem[_15280]
                                                                            mem[mem[64] + 64] = _15480
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15479, _15480, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15379 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15583 = mem[_15379 + 32]
                                                                            _15584 = mem[_15379 + 64]
                                                                            mem[mem[64]] = mem[_15379]
                                                                            mem[mem[64] + 64] = _15584
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15583, _15584, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15380 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15587 = mem[_15380 + 32]
                                                                            _15588 = mem[_15380 + 64]
                                                                            mem[mem[64]] = mem[_15380]
                                                                            mem[mem[64] + 64] = _15588
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15587, _15588, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15483 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15674 = mem[_15483 + 32]
                                                                            _15675 = mem[_15483 + 64]
                                                                            mem[mem[64]] = mem[_15483]
                                                                            mem[mem[64] + 64] = _15675
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15674, _15675, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and 1 > -1 / arg2:
                                                                revert with 0, 17
                                                            if not arg2:
                                                                revert with 0, 18
                                                            if arg2 / arg2 != 1:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11889 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11889] = 26
                                                            mem[_11889 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * totalFees / 100 > !(arg2 / 100):
                                                                revert with 0, 17
                                                            _12497 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12497] = 30
                                                            mem[_12497 + 32] = 'SafeMath: subtraction overflow'
                                                            if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                                                var213001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12964 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12964] = 38
                                                            mem[_12964 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12964 + 70 len 26]
                                                                var223001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _14009 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_14009] = 38
                                                            mem[_14009 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_14009 + 70 len 26]
                                                                var241001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15832 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16035 = mem[_15832 + 32]
                                                                            _16036 = mem[_15832 + 64]
                                                                            mem[mem[64]] = mem[_15832]
                                                                            mem[mem[64] + 64] = _16036
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16035, _16036, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15942 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16115 = mem[_15942 + 32]
                                                                            _16116 = mem[_15942 + 64]
                                                                            mem[mem[64]] = mem[_15942]
                                                                            mem[mem[64] + 64] = _16116
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16115, _16116, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15943 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16119 = mem[_15943 + 32]
                                                                            _16120 = mem[_15943 + 64]
                                                                            mem[mem[64]] = mem[_15943]
                                                                            mem[mem[64] + 64] = _16120
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16119, _16120, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _16039 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16174 = mem[_16039 + 32]
                                                                            _16175 = mem[_16039 + 64]
                                                                            mem[mem[64]] = mem[_16039]
                                                                            mem[mem[64] + 64] = _16175
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16174, _16175, gasForProcessing, 1, tx.origin);
                            else:
                                if balanceOf[this.address] and liquidityFee > -1 / balanceOf[this.address]:
                                    revert with 0, 17
                                if not balanceOf[this.address]:
                                    revert with 0, 18
                                if balanceOf[this.address] * liquidityFee / balanceOf[this.address] != liquidityFee:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'SafeMath: multiplication overflow'
                                mem[96] = 26
                                mem[128] = 'SafeMath: division by zero'
                                if not totalFees:
                                    revert with 0, 'SafeMath: division by zero', 0
                                mem[160] = 26
                                mem[192] = 'SafeMath: division by zero'
                                mem[224] = 30
                                mem[256] = 'SafeMath: subtraction overflow'
                                if balanceOf[this.address] * liquidityFee / totalFees / 2 > balanceOf[this.address] * liquidityFee / totalFees:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if balanceOf[this.address] * liquidityFee / totalFees < balanceOf[this.address] * liquidityFee / totalFees / 2:
                                    revert with 0, 17
                                mem[288] = 2
                                mem[320] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.WETH() with:
                                        gas gas_remaining wei
                                mem[384] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[352] = ext_call.return_data[12 len 20]
                                mem[ceil32(return_data.size) + 384] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                mem[ceil32(return_data.size) + 388] = balanceOf[this.address] * liquidityFee / totalFees / 2
                                idx = 0
                                s = 320
                                t = ceil32(return_data.size) + 580
                                while idx < 2:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                                     gas gas_remaining wei
                                    args Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, 160, address(this.address), block.timestamp, 2, mem[ceil32(return_data.size) + 580 len 64]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[ceil32(return_data.size) + 384] = 30
                                mem[ceil32(return_data.size) + 416] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                mem[ceil32(return_data.size) + 516] = 0
                                mem[ceil32(return_data.size) + 548] = 0
                                mem[ceil32(return_data.size) + 580] = 0
                                mem[ceil32(return_data.size) + 612] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.addLiquidityETH(address arg1, uint256 arg2, uint256 arg3, uint256 arg4, address arg5, uint256 arg6) with:
                                     gas gas_remaining wei
                                    args this.address, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2), 0, 0, 0, block.timestamp
                                mem[ceil32(return_data.size) + 448 len 96] = ext_call.return_data[0 len 96]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 96
                                emit SwapAndLiquify(Mask(255, 1, balanceOf[this.address] * liquidityFee / totalFees), 0, (balanceOf[this.address] * liquidityFee / totalFees) - (balanceOf[this.address] * liquidityFee / totalFees / 2));
                                mem[0] = this.address
                                mem[32] = 0
                                mem[(2 * ceil32(return_data.size)) + 448] = 2
                                mem[(2 * ceil32(return_data.size)) + 480] = this.address
                                require ext_code.size(uniswapV2RouterAddress)
                                staticcall uniswapV2RouterAddress.WETH() with:
                                        gas gas_remaining wei
                                mem[(2 * ceil32(return_data.size)) + 544] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = (4 * ceil32(return_data.size)) + 544
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[(2 * ceil32(return_data.size)) + 512] = ext_call.return_data[12 len 20]
                                mem[(4 * ceil32(return_data.size)) + 544] = 0x791ac94700000000000000000000000000000000000000000000000000000000
                                mem[(4 * ceil32(return_data.size)) + 548] = balanceOf[this.address]
                                mem[(4 * ceil32(return_data.size)) + 580] = 0
                                mem[(4 * ceil32(return_data.size)) + 612] = 160
                                mem[(4 * ceil32(return_data.size)) + 708] = 2
                                idx = 0
                                s = (2 * ceil32(return_data.size)) + 480
                                t = (4 * ceil32(return_data.size)) + 740
                                while idx < mem[(2 * ceil32(return_data.size)) + 448]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                mem[(4 * ceil32(return_data.size)) + 644] = this.address
                                mem[(4 * ceil32(return_data.size)) + 676] = block.timestamp
                                require ext_code.size(uniswapV2RouterAddress)
                                call uniswapV2RouterAddress.mem[mem[64] len 4] with:
                                     gas gas_remaining wei
                                    args mem[mem[64] + 4 len (4 * ceil32(return_data.size)) + (32 * mem[(2 * ceil32(return_data.size)) + 448]) + -mem[64] + 736]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5122 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5122] = 30
                                mem[_5122 + 32] = 'SafeMath: subtraction overflow'
                                if eth.balance(this.address) > eth.balance(this.address):
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if eth.balance(this.address) < eth.balance(this.address):
                                    revert with 0, 17
                                idx = 0
                                s = 0
                                while idx < tokens.length:
                                    mem[0] = tokens[idx]
                                    mem[32] = 13
                                    if stor13[stor10[idx]]:
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        s = s
                                        continue 
                                    if s == -1:
                                        revert with 0, 17
                                    if idx == -1:
                                        revert with 0, 17
                                    idx = idx + 1
                                    s = s + 1
                                    continue 
                                _5152 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5152] = 26
                                mem[_5152 + 32] = 'SafeMath: division by zero'
                                if not s:
                                    revert with 0, 'SafeMath: division by zero', 0
                                _5170 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_5170] = 30
                                mem[_5170 + 32] = 'SafeMath: subtraction overflow'
                                if 1 > s:
                                    revert with 0, 'SafeMath: subtraction overflow', 0
                                if s < 1:
                                    revert with 0, 17
                                if not 0 / s:
                                    _5184 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5184] = 30
                                    mem[_5184 + 32] = 'SafeMath: subtraction overflow'
                                    idx = 0
                                    while idx < tokens.length:
                                        mem[0] = tokens[idx]
                                        mem[32] = 13
                                        if not stor13[stor10[idx]]:
                                            _10880 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10880] = 30
                                            mem[_10880 + 32] = 'SafeMath: subtraction overflow'
                                            if 1 > s:
                                                _10889 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _10889 + 68] = mem[idx + _10880 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10889 + 98] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10889 + -mem[64] + 100
                                            if s < 1:
                                                revert with 0, 17
                                            if 0 == s - 1:
                                                _11112 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_11112] = 26
                                                mem[_11112 + 32] = 'SafeMath: division by zero'
                                                if not sub_dee3d564:
                                                    _11166 = mem[64]
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 26
                                                    idx = 0
                                                    while idx < 26:
                                                        mem[idx + _11166 + 68] = mem[idx + _11112 + 32]
                                                        idx = idx + 32
                                                        continue 
                                                    mem[_11166 + 94] = 0
                                                    revert with memory
                                                      from mem[64]
                                                       len _11166 + -mem[64] + 100
                                                mem[0] = tokens[idx]
                                                mem[32] = 12
                                                _11405 = mem[64]
                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                mem[_11405] = uint256(sub_47f86dd2[stor10[idx]])
                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 11
                                                    _11469 = mem[64]
                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 0
                                                    mem[mem[64] + 36] = 128
                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                    t = 0
                                                    u = _11405 + 32
                                                    v = mem[64] + 164
                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[v] = mem[u + 12 len 20]
                                                        t = t + 1
                                                        u = u + 32
                                                        v = v + 32
                                                        continue 
                                                    mem[_11469 + 68] = _marketingWalletAddress
                                                    mem[_11469 + 100] = block.timestamp
                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                       value 0 / sub_dee3d564 wei
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _11469 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if 0 == s - 1:
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 12
                                                        _16859 = mem[64]
                                                        mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                        mem[_16859] = uint256(sub_47f86dd2[stor10[idx]])
                                                        if not uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _16891 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _16859 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_16891 + 68] = this.address
                                                            mem[_16891 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value eth.balance(this.address) wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _16891 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18950 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _18990 = mem[_18950]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _18990
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _18990
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _19110 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_19110] == bool(mem[_19110])
                                                            if mem[_19110]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _18990:
                                                                    _19546 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_19546] = 26
                                                                    mem[_19546 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _19652 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _19652 + 68] = mem[idx + _19546 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_19652 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _19652 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _18990 and sub_67a6acd1[stor10[idx]] > -1 / _18990:
                                                                        revert with 0, 17
                                                                    if not _18990:
                                                                        revert with 0, 18
                                                                    if _18990 * sub_67a6acd1[stor10[idx]] / _18990 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _19978 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_19978] = 26
                                                                    mem[_19978 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _20214 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _20214 + 68] = mem[idx + _19978 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_20214 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _20214 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _18990 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _18990 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _18990 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_18990 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            mem[_16859 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                            s = _16859 + 32
                                                            t = sha3(sha3(tokens[idx], 12))
                                                            while _16859 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                mem[s + 32] = address(allowance[t])
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _21943 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _16859 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_21943 + 68] = this.address
                                                            mem[_21943 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value eth.balance(this.address) wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _21943 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _25868 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _25948 = mem[_25868]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _25948
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _25948
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _26188 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_26188] == bool(mem[_26188])
                                                            if mem[_26188]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _25948:
                                                                    _26508 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26508] = 26
                                                                    mem[_26508 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _26588 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _26588 + 68] = mem[idx + _26508 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_26588 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _26588 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _25948 and sub_67a6acd1[stor10[idx]] > -1 / _25948:
                                                                        revert with 0, 17
                                                                    if not _25948:
                                                                        revert with 0, 18
                                                                    if _25948 * sub_67a6acd1[stor10[idx]] / _25948 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _26988 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26988] = 26
                                                                    mem[_26988 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _27332 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _27332 + 68] = mem[idx + _26988 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_27332 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _27332 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _25948 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _25948 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _25948 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_25948 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        _16924 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_16924] = 26
                                                        mem[_16924 + 32] = 'SafeMath: division by zero'
                                                        if not sub_dee3d564:
                                                            _16952 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 26
                                                            idx = 0
                                                            while idx < 26:
                                                                mem[idx + _16952 + 68] = mem[idx + _16924 + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_16952 + 94] = 0
                                                            revert with memory
                                                              from mem[64]
                                                               len _16952 + -mem[64] + 100
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 12
                                                        _17148 = mem[64]
                                                        mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                        mem[_17148] = uint256(sub_47f86dd2[stor10[idx]])
                                                        if not uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _17193 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _17148 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_17193 + 68] = this.address
                                                            mem[_17193 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value 0 / sub_dee3d564 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _17193 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _18951 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _18991 = mem[_18951]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _18991
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _18991
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _19111 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_19111] == bool(mem[_19111])
                                                            if mem[_19111]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _18991:
                                                                    _19547 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_19547] = 26
                                                                    mem[_19547 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _19653 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _19653 + 68] = mem[idx + _19547 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_19653 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _19653 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _18991 and sub_67a6acd1[stor10[idx]] > -1 / _18991:
                                                                        revert with 0, 17
                                                                    if not _18991:
                                                                        revert with 0, 18
                                                                    if _18991 * sub_67a6acd1[stor10[idx]] / _18991 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _19979 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_19979] = 26
                                                                    mem[_19979 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _20216 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _20216 + 68] = mem[idx + _19979 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_20216 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _20216 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _18991 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _18991 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _18991 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_18991 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            mem[_17148 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                            s = _17148 + 32
                                                            t = sha3(sha3(tokens[idx], 12))
                                                            while _17148 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                mem[s + 32] = address(allowance[t])
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _21945 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _17148 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_21945 + 68] = this.address
                                                            mem[_21945 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value 0 / sub_dee3d564 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _21945 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _25869 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _25949 = mem[_25869]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _25949
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _25949
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _26189 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_26189] == bool(mem[_26189])
                                                            if mem[_26189]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _25949:
                                                                    _26509 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26509] = 26
                                                                    mem[_26509 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _26589 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _26589 + 68] = mem[idx + _26509 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_26589 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _26589 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _25949 and sub_67a6acd1[stor10[idx]] > -1 / _25949:
                                                                        revert with 0, 17
                                                                    if not _25949:
                                                                        revert with 0, 18
                                                                    if _25949 * sub_67a6acd1[stor10[idx]] / _25949 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _26989 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26989] = 26
                                                                    mem[_26989 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _27334 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _27334 + 68] = mem[idx + _26989 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_27334 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _27334 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _25949 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _25949 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _25949 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_25949 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                else:
                                                    mem[_11405 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                    t = _11405 + 32
                                                    u = sha3(sha3(tokens[idx], 12))
                                                    while _11405 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                        mem[t + 32] = address(allowance[u])
                                                        t = t + 32
                                                        u = u + 1
                                                        continue 
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 11
                                                    _18639 = mem[64]
                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 0
                                                    mem[mem[64] + 36] = 128
                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                    t = 0
                                                    u = _11405 + 32
                                                    v = mem[64] + 164
                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[v] = mem[u + 12 len 20]
                                                        t = t + 1
                                                        u = u + 32
                                                        v = v + 32
                                                        continue 
                                                    mem[_18639 + 68] = _marketingWalletAddress
                                                    mem[_18639 + 100] = block.timestamp
                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                       value 0 / sub_dee3d564 wei
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _18639 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    if 0 == s - 1:
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 12
                                                        _22489 = mem[64]
                                                        mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                        mem[_22489] = uint256(sub_47f86dd2[stor10[idx]])
                                                        if not uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _22547 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _22489 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_22547 + 68] = this.address
                                                            mem[_22547 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value eth.balance(this.address) wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _22547 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _25870 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _25950 = mem[_25870]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _25950
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _25950
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _26190 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_26190] == bool(mem[_26190])
                                                            if mem[_26190]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _25950:
                                                                    _26510 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26510] = 26
                                                                    mem[_26510 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _26590 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _26590 + 68] = mem[idx + _26510 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_26590 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _26590 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _25950 and sub_67a6acd1[stor10[idx]] > -1 / _25950:
                                                                        revert with 0, 17
                                                                    if not _25950:
                                                                        revert with 0, 18
                                                                    if _25950 * sub_67a6acd1[stor10[idx]] / _25950 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _26990 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26990] = 26
                                                                    mem[_26990 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _27336 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _27336 + 68] = mem[idx + _26990 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_27336 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _27336 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _25950 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _25950 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _25950 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_25950 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            mem[_22489 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                            s = _22489 + 32
                                                            t = sha3(sha3(tokens[idx], 12))
                                                            while _22489 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                mem[s + 32] = address(allowance[t])
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _28269 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _22489 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_28269 + 68] = this.address
                                                            mem[_28269 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value eth.balance(this.address) wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _28269 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _30376 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _30416 = mem[_30376]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _30416
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _30416
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _30536 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_30536] == bool(mem[_30536])
                                                            if mem[_30536]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _30416:
                                                                    _30696 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_30696] = 26
                                                                    mem[_30696 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _30736 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _30736 + 68] = mem[idx + _30696 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_30736 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _30736 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _30416 and sub_67a6acd1[stor10[idx]] > -1 / _30416:
                                                                        revert with 0, 17
                                                                    if not _30416:
                                                                        revert with 0, 18
                                                                    if _30416 * sub_67a6acd1[stor10[idx]] / _30416 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _30936 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_30936] = 26
                                                                    mem[_30936 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _31108 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _31108 + 68] = mem[idx + _30936 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_31108 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _31108 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _30416 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _30416 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _30416 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_30416 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        _22594 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_22594] = 26
                                                        mem[_22594 + 32] = 'SafeMath: division by zero'
                                                        if not sub_dee3d564:
                                                            _22728 = mem[64]
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 26
                                                            idx = 0
                                                            while idx < 26:
                                                                mem[idx + _22728 + 68] = mem[idx + _22594 + 32]
                                                                idx = idx + 32
                                                                continue 
                                                            mem[_22728 + 94] = 0
                                                            revert with memory
                                                              from mem[64]
                                                               len _22728 + -mem[64] + 100
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 12
                                                        _23032 = mem[64]
                                                        mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                        mem[_23032] = uint256(sub_47f86dd2[stor10[idx]])
                                                        if not uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _23129 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _23032 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_23129 + 68] = this.address
                                                            mem[_23129 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value 0 / sub_dee3d564 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _23129 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _25871 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _25951 = mem[_25871]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _25951
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _25951
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _26191 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_26191] == bool(mem[_26191])
                                                            if mem[_26191]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _25951:
                                                                    _26511 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26511] = 26
                                                                    mem[_26511 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _26591 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _26591 + 68] = mem[idx + _26511 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_26591 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _26591 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _25951 and sub_67a6acd1[stor10[idx]] > -1 / _25951:
                                                                        revert with 0, 17
                                                                    if not _25951:
                                                                        revert with 0, 18
                                                                    if _25951 * sub_67a6acd1[stor10[idx]] / _25951 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _26991 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_26991] = 26
                                                                    mem[_26991 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _27338 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _27338 + 68] = mem[idx + _26991 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_27338 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _27338 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _25951 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _25951 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _25951 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_25951 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            mem[_23032 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                            s = _23032 + 32
                                                            t = sha3(sha3(tokens[idx], 12))
                                                            while _23032 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                mem[s + 32] = address(allowance[t])
                                                                s = s + 32
                                                                t = t + 1
                                                                continue 
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 11
                                                            _28271 = mem[64]
                                                            mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 0
                                                            mem[mem[64] + 36] = 128
                                                            mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                            s = 0
                                                            t = _23032 + 32
                                                            u = mem[64] + 164
                                                            while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[u] = mem[t + 12 len 20]
                                                                s = s + 1
                                                                t = t + 32
                                                                u = u + 32
                                                                continue 
                                                            mem[_28271 + 68] = this.address
                                                            mem[_28271 + 100] = block.timestamp
                                                            require ext_code.size(sub_00c02d21[stor10[idx]])
                                                            call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                               value 0 / sub_dee3d564 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _28271 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            mem[mem[64] + 4] = this.address
                                                            require ext_code.size(tokens[idx])
                                                            staticcall tokens[idx].0x70a08231 with:
                                                                    gas gas_remaining wei
                                                                   args this.address
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _30377 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _30417 = mem[_30377]
                                                            mem[mem[64] + 4] = dividendTrackerAddress
                                                            mem[mem[64] + 36] = _30417
                                                            require ext_code.size(tokens[idx])
                                                            call tokens[idx].0xa9059cbb with:
                                                                 gas gas_remaining wei
                                                                args dividendTrackerAddress, _30417
                                                            mem[mem[64]] = ext_call.return_data[0]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _30537 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            require mem[_30537] == bool(mem[_30537])
                                                            if mem[_30537]:
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 14
                                                                if not _30417:
                                                                    _30697 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_30697] = 26
                                                                    mem[_30697 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _30737 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _30737 + 68] = mem[idx + _30697 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_30737 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _30737 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    if _30417 and sub_67a6acd1[stor10[idx]] > -1 / _30417:
                                                                        revert with 0, 17
                                                                    if not _30417:
                                                                        revert with 0, 18
                                                                    if _30417 * sub_67a6acd1[stor10[idx]] / _30417 != sub_67a6acd1[stor10[idx]]:
                                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                                    _30937 = mem[64]
                                                                    mem[64] = mem[64] + 64
                                                                    mem[_30937] = 26
                                                                    mem[_30937 + 32] = 'SafeMath: division by zero'
                                                                    if not sub_fe4e4cc1[stor10[idx]]:
                                                                        _31110 = mem[64]
                                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                        mem[mem[64] + 4] = 32
                                                                        mem[mem[64] + 36] = 26
                                                                        idx = 0
                                                                        while idx < 26:
                                                                            mem[idx + _31110 + 68] = mem[idx + _30937 + 32]
                                                                            idx = idx + 32
                                                                            continue 
                                                                        mem[_31110 + 94] = 0
                                                                        revert with memory
                                                                          from mem[64]
                                                                           len _31110 + -mem[64] + 100
                                                                    mem[mem[64] + 4] = _30417 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    mem[mem[64] + 36] = tokens[idx]
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                         gas gas_remaining wei
                                                                        args _30417 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64]] = _30417 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                    emit 0x12d20dff: (_30417 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                            else:
                                                if not 0 / s:
                                                    _11113 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11113] = 26
                                                    mem[_11113 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11167 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11167 + 68] = mem[idx + _11113 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11167 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11167 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11408 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11408] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11472 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11408 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11472 + 68] = _marketingWalletAddress
                                                        mem[_11472 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11472 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16863 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16863] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16897 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16863 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16897 + 68] = this.address
                                                                mem[_16897 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16897 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18955 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _18995 = mem[_18955]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _18995
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _18995
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19115 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19115] == bool(mem[_19115])
                                                                if mem[_19115]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _18995:
                                                                        _19552 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19552] = 26
                                                                        mem[_19552 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19664 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19664 + 68] = mem[idx + _19552 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19664 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19664 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _18995 and sub_67a6acd1[stor10[idx]] > -1 / _18995:
                                                                            revert with 0, 17
                                                                        if not _18995:
                                                                            revert with 0, 18
                                                                        if _18995 * sub_67a6acd1[stor10[idx]] / _18995 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _19987 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19987] = 26
                                                                        mem[_19987 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20231 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20231 + 68] = mem[idx + _19987 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20231 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20231 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _18995 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _18995 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _18995 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_18995 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16863 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16863 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16863 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21953 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16863 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21953 + 68] = this.address
                                                                mem[_21953 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21953 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25878 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25958 = mem[_25878]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25958
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25958
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26198 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26198] == bool(mem[_26198])
                                                                if mem[_26198]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25958:
                                                                        _26518 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26518] = 26
                                                                        mem[_26518 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26598 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26598 + 68] = mem[idx + _26518 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26598 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26598 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25958 and sub_67a6acd1[stor10[idx]] > -1 / _25958:
                                                                            revert with 0, 17
                                                                        if not _25958:
                                                                            revert with 0, 18
                                                                        if _25958 * sub_67a6acd1[stor10[idx]] / _25958 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26998 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26998] = 26
                                                                        mem[_26998 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27352 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27352 + 68] = mem[idx + _26998 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27352 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27352 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25958 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25958 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25958 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25958 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _16926 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16926] = 26
                                                                mem[_16926 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16954 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16954 + 68] = mem[idx + _16926 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16954 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16954 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17154 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17154] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17201 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17154 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17201 + 68] = this.address
                                                                    mem[_17201 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17201 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18957 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18997 = mem[_18957]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18997
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18997
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19117 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19117] == bool(mem[_19117])
                                                                    if mem[_19117]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18997:
                                                                            _19554 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19554] = 26
                                                                            mem[_19554 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19666 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19666 + 68] = mem[idx + _19554 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19666 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19666 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18997 and sub_67a6acd1[stor10[idx]] > -1 / _18997:
                                                                                revert with 0, 17
                                                                            if not _18997:
                                                                                revert with 0, 18
                                                                            if _18997 * sub_67a6acd1[stor10[idx]] / _18997 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19989 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19989] = 26
                                                                            mem[_19989 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20235 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20235 + 68] = mem[idx + _19989 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20235 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20235 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18997 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18997 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18997 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18997 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17154 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17154 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17154 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21957 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17154 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21957 + 68] = this.address
                                                                    mem[_21957 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21957 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25880 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25960 = mem[_25880]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25960
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25960
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26200 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26200] == bool(mem[_26200])
                                                                    if mem[_26200]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25960:
                                                                            _26520 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26520] = 26
                                                                            mem[_26520 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26600 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26600 + 68] = mem[idx + _26520 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26600 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26600 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25960 and sub_67a6acd1[stor10[idx]] > -1 / _25960:
                                                                                revert with 0, 17
                                                                            if not _25960:
                                                                                revert with 0, 18
                                                                            if _25960 * sub_67a6acd1[stor10[idx]] / _25960 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27000 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27000] = 26
                                                                            mem[_27000 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27356 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27356 + 68] = mem[idx + _27000 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27356 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27356 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25960 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25960 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25960 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25960 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17047 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17047] = 26
                                                                mem[_17047 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17093 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17093 + 68] = mem[idx + _17047 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17093 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17093 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17349 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17349] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17391 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17349 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17391 + 68] = this.address
                                                                    mem[_17391 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17391 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18956 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18996 = mem[_18956]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18996
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18996
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19116 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19116] == bool(mem[_19116])
                                                                    if mem[_19116]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18996:
                                                                            _19553 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19553] = 26
                                                                            mem[_19553 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19665 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19665 + 68] = mem[idx + _19553 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19665 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19665 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18996 and sub_67a6acd1[stor10[idx]] > -1 / _18996:
                                                                                revert with 0, 17
                                                                            if not _18996:
                                                                                revert with 0, 18
                                                                            if _18996 * sub_67a6acd1[stor10[idx]] / _18996 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19988 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19988] = 26
                                                                            mem[_19988 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20233 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20233 + 68] = mem[idx + _19988 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20233 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20233 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18996 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18996 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18996 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18996 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17349 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17349 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17349 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21955 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17349 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21955 + 68] = this.address
                                                                    mem[_21955 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21955 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25879 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25959 = mem[_25879]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25959
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25959
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26199 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26199] == bool(mem[_26199])
                                                                    if mem[_26199]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25959:
                                                                            _26519 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26519] = 26
                                                                            mem[_26519 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26599 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26599 + 68] = mem[idx + _26519 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26599 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26599 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25959 and sub_67a6acd1[stor10[idx]] > -1 / _25959:
                                                                                revert with 0, 17
                                                                            if not _25959:
                                                                                revert with 0, 18
                                                                            if _25959 * sub_67a6acd1[stor10[idx]] / _25959 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26999 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26999] = 26
                                                                            mem[_26999 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27354 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27354 + 68] = mem[idx + _26999 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27354 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27354 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25959 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25959 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25959 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25959 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11408 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11408 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11408 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18643 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11408 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18643 + 68] = _marketingWalletAddress
                                                        mem[_18643 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18643 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22499 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22499] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22553 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22499 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22553 + 68] = this.address
                                                                mem[_22553 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22553 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25881 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25961 = mem[_25881]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25961
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25961
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26201 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26201] == bool(mem[_26201])
                                                                if mem[_26201]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25961:
                                                                        _26521 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26521] = 26
                                                                        mem[_26521 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26601 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26601 + 68] = mem[idx + _26521 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26601 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26601 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25961 and sub_67a6acd1[stor10[idx]] > -1 / _25961:
                                                                            revert with 0, 17
                                                                        if not _25961:
                                                                            revert with 0, 18
                                                                        if _25961 * sub_67a6acd1[stor10[idx]] / _25961 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _27001 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_27001] = 26
                                                                        mem[_27001 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27358 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27358 + 68] = mem[idx + _27001 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27358 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27358 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25961 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25961 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25961 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25961 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22499 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22499 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22499 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28279 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22499 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28279 + 68] = this.address
                                                                mem[_28279 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28279 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30381 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30421 = mem[_30381]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30421
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30421
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30541 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30541] == bool(mem[_30541])
                                                                if mem[_30541]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30421:
                                                                        _30701 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30701] = 26
                                                                        mem[_30701 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30741 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30741 + 68] = mem[idx + _30701 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30741 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30741 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30421 and sub_67a6acd1[stor10[idx]] > -1 / _30421:
                                                                            revert with 0, 17
                                                                        if not _30421:
                                                                            revert with 0, 18
                                                                        if _30421 * sub_67a6acd1[stor10[idx]] / _30421 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30941 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30941] = 26
                                                                        mem[_30941 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31118 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31118 + 68] = mem[idx + _30941 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31118 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31118 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30421 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30421 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30421 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30421 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _22602 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22602] = 26
                                                                mem[_22602 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22730 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22730 + 68] = mem[idx + _22602 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22730 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22730 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23050 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23050] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23137 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23050 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23137 + 68] = this.address
                                                                    mem[_23137 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23137 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25883 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25963 = mem[_25883]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25963
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25963
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26203 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26203] == bool(mem[_26203])
                                                                    if mem[_26203]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25963:
                                                                            _26523 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26523] = 26
                                                                            mem[_26523 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26603 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26603 + 68] = mem[idx + _26523 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26603 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26603 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25963 and sub_67a6acd1[stor10[idx]] > -1 / _25963:
                                                                                revert with 0, 17
                                                                            if not _25963:
                                                                                revert with 0, 18
                                                                            if _25963 * sub_67a6acd1[stor10[idx]] / _25963 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27003 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27003] = 26
                                                                            mem[_27003 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27362 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27362 + 68] = mem[idx + _27003 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27362 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27362 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25963 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25963 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25963 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25963 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23050 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23050 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23050 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28283 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23050 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28283 + 68] = this.address
                                                                    mem[_28283 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28283 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30383 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30423 = mem[_30383]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30423
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30423
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30543 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30543] == bool(mem[_30543])
                                                                    if mem[_30543]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30423:
                                                                            _30703 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30703] = 26
                                                                            mem[_30703 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30743 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30743 + 68] = mem[idx + _30703 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30743 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30743 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30423 and sub_67a6acd1[stor10[idx]] > -1 / _30423:
                                                                                revert with 0, 17
                                                                            if not _30423:
                                                                                revert with 0, 18
                                                                            if _30423 * sub_67a6acd1[stor10[idx]] / _30423 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30943 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30943] = 26
                                                                            mem[_30943 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31122 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31122 + 68] = mem[idx + _30943 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31122 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31122 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30423 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30423 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30423 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30423 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22903 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22903] = 26
                                                                mem[_22903 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22949 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22949 + 68] = mem[idx + _22903 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22949 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22949 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23325 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23325] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23387 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23325 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23387 + 68] = this.address
                                                                    mem[_23387 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23387 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25882 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25962 = mem[_25882]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25962
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25962
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26202 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26202] == bool(mem[_26202])
                                                                    if mem[_26202]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25962:
                                                                            _26522 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26522] = 26
                                                                            mem[_26522 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26602 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26602 + 68] = mem[idx + _26522 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26602 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26602 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25962 and sub_67a6acd1[stor10[idx]] > -1 / _25962:
                                                                                revert with 0, 17
                                                                            if not _25962:
                                                                                revert with 0, 18
                                                                            if _25962 * sub_67a6acd1[stor10[idx]] / _25962 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _27002 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_27002] = 26
                                                                            mem[_27002 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27360 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27360 + 68] = mem[idx + _27002 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27360 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27360 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25962 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25962 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25962 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25962 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23325 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23325 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23325 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28281 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23325 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28281 + 68] = this.address
                                                                    mem[_28281 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28281 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30382 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30422 = mem[_30382]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30422
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30422
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30542 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30542] == bool(mem[_30542])
                                                                    if mem[_30542]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30422:
                                                                            _30702 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30702] = 26
                                                                            mem[_30702 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30742 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30742 + 68] = mem[idx + _30702 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30742 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30742 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30422 and sub_67a6acd1[stor10[idx]] > -1 / _30422:
                                                                                revert with 0, 17
                                                                            if not _30422:
                                                                                revert with 0, 18
                                                                            if _30422 * sub_67a6acd1[stor10[idx]] / _30422 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30942 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30942] = 26
                                                                            mem[_30942 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31120 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31120 + 68] = mem[idx + _30942 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31120 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31120 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30422 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30422 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30422 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30422 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                else:
                                                    if 0 / s and marketingFee > -1 / 0 / s:
                                                        revert with 0, 17
                                                    if not 0 / s:
                                                        revert with 0, 18
                                                    if 0 / s * marketingFee / 0 / s != marketingFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11278 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11278] = 26
                                                    mem[_11278 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11361 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11361 + 68] = mem[idx + _11278 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11361 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11361 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11877 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11877] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11962 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11877 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11962 + 68] = _marketingWalletAddress
                                                        mem[_11962 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / s * marketingFee / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11962 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16861 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16861] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16894 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16861 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16894 + 68] = this.address
                                                                mem[_16894 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16894 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18952 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _18992 = mem[_18952]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _18992
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _18992
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19112 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19112] == bool(mem[_19112])
                                                                if mem[_19112]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _18992:
                                                                        _19548 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19548] = 26
                                                                        mem[_19548 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19657 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19657 + 68] = mem[idx + _19548 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19657 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19657 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _18992 and sub_67a6acd1[stor10[idx]] > -1 / _18992:
                                                                            revert with 0, 17
                                                                        if not _18992:
                                                                            revert with 0, 18
                                                                        if _18992 * sub_67a6acd1[stor10[idx]] / _18992 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _19982 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19982] = 26
                                                                        mem[_19982 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20220 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20220 + 68] = mem[idx + _19982 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20220 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20220 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _18992 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _18992 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _18992 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_18992 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16861 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16861 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16861 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21947 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16861 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21947 + 68] = this.address
                                                                mem[_21947 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21947 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25872 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25952 = mem[_25872]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25952
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25952
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26192 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26192] == bool(mem[_26192])
                                                                if mem[_26192]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25952:
                                                                        _26512 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26512] = 26
                                                                        mem[_26512 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26592 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26592 + 68] = mem[idx + _26512 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26592 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26592 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25952 and sub_67a6acd1[stor10[idx]] > -1 / _25952:
                                                                            revert with 0, 17
                                                                        if not _25952:
                                                                            revert with 0, 18
                                                                        if _25952 * sub_67a6acd1[stor10[idx]] / _25952 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26992 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26992] = 26
                                                                        mem[_26992 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27340 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27340 + 68] = mem[idx + _26992 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27340 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27340 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25952 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25952 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25952 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25952 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _16925 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16925] = 26
                                                                mem[_16925 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16953 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16953 + 68] = mem[idx + _16925 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16953 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16953 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17151 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17151] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17197 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17151 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17197 + 68] = this.address
                                                                    mem[_17197 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17197 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18954 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18994 = mem[_18954]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18994
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18994
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19114 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19114] == bool(mem[_19114])
                                                                    if mem[_19114]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18994:
                                                                            _19550 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19550] = 26
                                                                            mem[_19550 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19659 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19659 + 68] = mem[idx + _19550 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19659 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19659 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18994 and sub_67a6acd1[stor10[idx]] > -1 / _18994:
                                                                                revert with 0, 17
                                                                            if not _18994:
                                                                                revert with 0, 18
                                                                            if _18994 * sub_67a6acd1[stor10[idx]] / _18994 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19984 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19984] = 26
                                                                            mem[_19984 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20224 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20224 + 68] = mem[idx + _19984 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20224 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20224 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18994 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18994 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18994 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18994 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17151 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17151 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17151 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21951 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17151 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21951 + 68] = this.address
                                                                    mem[_21951 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21951 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25874 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25954 = mem[_25874]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25954
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25954
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26194 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26194] == bool(mem[_26194])
                                                                    if mem[_26194]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25954:
                                                                            _26514 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26514] = 26
                                                                            mem[_26514 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26594 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26594 + 68] = mem[idx + _26514 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26594 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26594 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25954 and sub_67a6acd1[stor10[idx]] > -1 / _25954:
                                                                                revert with 0, 17
                                                                            if not _25954:
                                                                                revert with 0, 18
                                                                            if _25954 * sub_67a6acd1[stor10[idx]] / _25954 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26994 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26994] = 26
                                                                            mem[_26994 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27344 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27344 + 68] = mem[idx + _26994 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27344 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27344 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25954 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25954 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25954 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25954 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17046 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17046] = 26
                                                                mem[_17046 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17089 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17089 + 68] = mem[idx + _17046 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17089 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17089 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17347 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17347] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17386 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17347 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17386 + 68] = this.address
                                                                    mem[_17386 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17386 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18953 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18993 = mem[_18953]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18993
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18993
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19113 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19113] == bool(mem[_19113])
                                                                    if mem[_19113]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18993:
                                                                            _19549 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19549] = 26
                                                                            mem[_19549 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19658 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19658 + 68] = mem[idx + _19549 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19658 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19658 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18993 and sub_67a6acd1[stor10[idx]] > -1 / _18993:
                                                                                revert with 0, 17
                                                                            if not _18993:
                                                                                revert with 0, 18
                                                                            if _18993 * sub_67a6acd1[stor10[idx]] / _18993 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19983 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19983] = 26
                                                                            mem[_19983 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20222 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20222 + 68] = mem[idx + _19983 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20222 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20222 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18993 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18993 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18993 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18993 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17347 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17347 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17347 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21949 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17347 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21949 + 68] = this.address
                                                                    mem[_21949 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21949 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25873 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25953 = mem[_25873]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25953
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25953
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26193 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26193] == bool(mem[_26193])
                                                                    if mem[_26193]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25953:
                                                                            _26513 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26513] = 26
                                                                            mem[_26513 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26593 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26593 + 68] = mem[idx + _26513 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26593 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26593 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25953 and sub_67a6acd1[stor10[idx]] > -1 / _25953:
                                                                                revert with 0, 17
                                                                            if not _25953:
                                                                                revert with 0, 18
                                                                            if _25953 * sub_67a6acd1[stor10[idx]] / _25953 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26993 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26993] = 26
                                                                            mem[_26993 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27342 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27342 + 68] = mem[idx + _26993 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27342 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27342 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25953 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25953 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25953 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25953 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11877 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11877 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11877 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18641 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11877 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18641 + 68] = _marketingWalletAddress
                                                        mem[_18641 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / s * marketingFee / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18641 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22494 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22494] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22550 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22494 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22550 + 68] = this.address
                                                                mem[_22550 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22550 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25875 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25955 = mem[_25875]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25955
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25955
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26195 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26195] == bool(mem[_26195])
                                                                if mem[_26195]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25955:
                                                                        _26515 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26515] = 26
                                                                        mem[_26515 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26595 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26595 + 68] = mem[idx + _26515 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26595 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26595 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25955 and sub_67a6acd1[stor10[idx]] > -1 / _25955:
                                                                            revert with 0, 17
                                                                        if not _25955:
                                                                            revert with 0, 18
                                                                        if _25955 * sub_67a6acd1[stor10[idx]] / _25955 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26995 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26995] = 26
                                                                        mem[_26995 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27346 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27346 + 68] = mem[idx + _26995 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27346 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27346 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25955 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25955 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25955 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25955 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22494 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22494 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22494 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28273 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22494 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28273 + 68] = this.address
                                                                mem[_28273 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28273 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30378 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30418 = mem[_30378]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30418
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30418
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30538 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30538] == bool(mem[_30538])
                                                                if mem[_30538]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30418:
                                                                        _30698 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30698] = 26
                                                                        mem[_30698 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30738 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30738 + 68] = mem[idx + _30698 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30738 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30738 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30418 and sub_67a6acd1[stor10[idx]] > -1 / _30418:
                                                                            revert with 0, 17
                                                                        if not _30418:
                                                                            revert with 0, 18
                                                                        if _30418 * sub_67a6acd1[stor10[idx]] / _30418 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30938 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30938] = 26
                                                                        mem[_30938 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31112 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31112 + 68] = mem[idx + _30938 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31112 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31112 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30418 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30418 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30418 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30418 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _22598 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22598] = 26
                                                                mem[_22598 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22729 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22729 + 68] = mem[idx + _22598 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22729 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22729 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23041 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23041] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23133 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23041 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23133 + 68] = this.address
                                                                    mem[_23133 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23133 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25877 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25957 = mem[_25877]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25957
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25957
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26197 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26197] == bool(mem[_26197])
                                                                    if mem[_26197]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25957:
                                                                            _26517 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26517] = 26
                                                                            mem[_26517 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26597 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26597 + 68] = mem[idx + _26517 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26597 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26597 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25957 and sub_67a6acd1[stor10[idx]] > -1 / _25957:
                                                                                revert with 0, 17
                                                                            if not _25957:
                                                                                revert with 0, 18
                                                                            if _25957 * sub_67a6acd1[stor10[idx]] / _25957 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26997 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26997] = 26
                                                                            mem[_26997 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27350 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27350 + 68] = mem[idx + _26997 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27350 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27350 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25957 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25957 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25957 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25957 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23041 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23041 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23041 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28277 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23041 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28277 + 68] = this.address
                                                                    mem[_28277 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28277 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30380 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30420 = mem[_30380]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30420
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30420
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30540 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30540] == bool(mem[_30540])
                                                                    if mem[_30540]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30420:
                                                                            _30700 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30700] = 26
                                                                            mem[_30700 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30740 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30740 + 68] = mem[idx + _30700 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30740 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30740 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30420 and sub_67a6acd1[stor10[idx]] > -1 / _30420:
                                                                                revert with 0, 17
                                                                            if not _30420:
                                                                                revert with 0, 18
                                                                            if _30420 * sub_67a6acd1[stor10[idx]] / _30420 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30940 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30940] = 26
                                                                            mem[_30940 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31116 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31116 + 68] = mem[idx + _30940 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31116 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31116 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30420 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30420 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30420 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30420 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22902 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22902] = 26
                                                                mem[_22902 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22945 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22945 + 68] = mem[idx + _22902 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22945 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22945 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23323 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23323] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23379 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23323 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23379 + 68] = this.address
                                                                    mem[_23379 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23379 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25876 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25956 = mem[_25876]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25956
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25956
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26196 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26196] == bool(mem[_26196])
                                                                    if mem[_26196]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25956:
                                                                            _26516 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26516] = 26
                                                                            mem[_26516 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26596 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26596 + 68] = mem[idx + _26516 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26596 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26596 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25956 and sub_67a6acd1[stor10[idx]] > -1 / _25956:
                                                                                revert with 0, 17
                                                                            if not _25956:
                                                                                revert with 0, 18
                                                                            if _25956 * sub_67a6acd1[stor10[idx]] / _25956 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26996 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26996] = 26
                                                                            mem[_26996 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27348 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27348 + 68] = mem[idx + _26996 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27348 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27348 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25956 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25956 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25956 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25956 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23323 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23323 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23323 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28275 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23323 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28275 + 68] = this.address
                                                                    mem[_28275 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28275 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30379 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30419 = mem[_30379]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30419
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30419
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30539 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30539] == bool(mem[_30539])
                                                                    if mem[_30539]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30419:
                                                                            _30699 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30699] = 26
                                                                            mem[_30699 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30739 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30739 + 68] = mem[idx + _30699 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30739 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30739 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30419 and sub_67a6acd1[stor10[idx]] > -1 / _30419:
                                                                                revert with 0, 17
                                                                            if not _30419:
                                                                                revert with 0, 18
                                                                            if _30419 * sub_67a6acd1[stor10[idx]] / _30419 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30939 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30939] = 26
                                                                            mem[_30939 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31114 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31114 + 68] = mem[idx + _30939 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31114 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31114 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30419 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30419 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30419 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30419 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    stor7 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 25
                                    if stor25[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _10912 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_10912] = 38
                                        mem[_10912 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10912 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        mem[0] = arg1
                                        mem[32] = 0
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not ext_call.success:
                                            if not ext_call.success:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11524 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11639 = mem[_11524 + 32]
                                                        _11640 = mem[_11524 + 64]
                                                        mem[mem[64]] = mem[_11524]
                                                        mem[mem[64] + 64] = _11640
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11639, _11640, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11578 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11732 = mem[_11578 + 32]
                                                        _11733 = mem[_11578 + 64]
                                                        mem[mem[64]] = mem[_11578]
                                                        mem[mem[64] + 64] = _11733
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11732, _11733, gasForProcessing, 1, tx.origin);
                                        else:
                                            if not ext_call.success:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11579 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11736 = mem[_11579 + 32]
                                                        _11737 = mem[_11579 + 64]
                                                        mem[mem[64]] = mem[_11579]
                                                        mem[mem[64] + 64] = _11737
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11736, _11737, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11643 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11854 = mem[_11643 + 32]
                                                        _11855 = mem[_11643 + 64]
                                                        mem[mem[64]] = mem[_11643]
                                                        mem[mem[64] + 64] = _11855
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11854, _11855, gasForProcessing, 1, tx.origin);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 25
                                        if stor25[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _10943 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_10943] = 38
                                            mem[_10943 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10943 + 70 len 26]
                                                var175001 = 64
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            mem[0] = arg1
                                            mem[32] = 0
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not ext_call.success:
                                                if not ext_call.success:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11585 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11753 = mem[_11585 + 32]
                                                            _11754 = mem[_11585 + 64]
                                                            mem[mem[64]] = mem[_11585]
                                                            mem[mem[64] + 64] = _11754
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11753, _11754, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11654 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11869 = mem[_11654 + 32]
                                                            _11870 = mem[_11654 + 64]
                                                            mem[mem[64]] = mem[_11654]
                                                            mem[mem[64] + 64] = _11870
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11869, _11870, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not ext_call.success:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11655 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11873 = mem[_11655 + 32]
                                                            _11874 = mem[_11655 + 64]
                                                            mem[mem[64]] = mem[_11655]
                                                            mem[mem[64] + 64] = _11874
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11873, _11874, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11757 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11958 = mem[_11757 + 32]
                                                            _11959 = mem[_11757 + 64]
                                                            mem[mem[64]] = mem[_11757]
                                                            mem[mem[64] + 64] = _11959
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11958, _11959, gasForProcessing, 1, tx.origin);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _10915 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_10915] = 38
                                                mem[_10915 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10915 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                mem[0] = arg1
                                                mem[32] = 0
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)]
                                                if not ext_call.success:
                                                    if not ext_call.success:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11527 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11646 = mem[_11527 + 32]
                                                                _11647 = mem[_11527 + 64]
                                                                mem[mem[64]] = mem[_11527]
                                                                mem[mem[64] + 64] = _11647
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11646, _11647, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11581 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11741 = mem[_11581 + 32]
                                                                _11742 = mem[_11581 + 64]
                                                                mem[mem[64]] = mem[_11581]
                                                                mem[mem[64] + 64] = _11742
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11741, _11742, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not ext_call.success:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11582 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11745 = mem[_11582 + 32]
                                                                _11746 = mem[_11582 + 64]
                                                                mem[mem[64]] = mem[_11582]
                                                                mem[mem[64] + 64] = _11746
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11745, _11746, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11650 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11858 = mem[_11650 + 32]
                                                                _11859 = mem[_11650 + 64]
                                                                mem[mem[64]] = mem[_11650]
                                                                mem[mem[64] + 64] = _11859
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11858, _11859, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not arg2:
                                                    _10967 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_10967] = 26
                                                    mem[_10967 + 32] = 'SafeMath: division by zero'
                                                    mem[0] = arg1
                                                    mem[32] = 26
                                                    if not stor26[address(arg1)]:
                                                        _11089 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11089] = 30
                                                        mem[_11089 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 0, 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11400 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11400] = 38
                                                        mem[_11400 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11400 + 70 len 26]
                                                            var195001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 0, 17
                                                        if balanceOf[this.address] > -1:
                                                            revert with 0, 17
                                                        if balanceOf[this.address] < balanceOf[this.address]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 0
                                                        balanceOf[address(this.address)] = balanceOf[this.address]
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12487 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12487] = 38
                                                        mem[_12487 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12487 + 70 len 26]
                                                            var213001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 0, 17
                                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13679 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13796 = mem[_13679 + 32]
                                                                        _13797 = mem[_13679 + 64]
                                                                        mem[mem[64]] = mem[_13679]
                                                                        mem[mem[64] + 64] = _13797
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13796, _13797, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13729 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13857 = mem[_13729 + 32]
                                                                        _13858 = mem[_13729 + 64]
                                                                        mem[mem[64]] = mem[_13729]
                                                                        mem[mem[64] + 64] = _13858
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13857, _13858, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13730 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13861 = mem[_13730 + 32]
                                                                        _13862 = mem[_13730 + 64]
                                                                        mem[mem[64]] = mem[_13730]
                                                                        mem[mem[64] + 64] = _13862
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13861, _13862, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13800 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13922 = mem[_13800 + 32]
                                                                        _13923 = mem[_13800 + 64]
                                                                        mem[mem[64]] = mem[_13800]
                                                                        mem[mem[64] + 64] = _13923
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13922, _13923, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not arg2:
                                                            _11194 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11194] = 26
                                                            mem[_11194 + 32] = 'SafeMath: division by zero'
                                                            _11866 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11866] = 30
                                                            mem[_11866 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > arg2:
                                                                var201001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12414 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12414] = 38
                                                            mem[_12414 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12414 + 70 len 26]
                                                                var211001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] > -1:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13281 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13281] = 38
                                                            mem[_13281 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13281 + 70 len 26]
                                                                var229001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14795 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _14985 = mem[_14795 + 32]
                                                                            _14986 = mem[_14795 + 64]
                                                                            mem[mem[64]] = mem[_14795]
                                                                            mem[mem[64] + 64] = _14986
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _14985, _14986, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14896 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15061 = mem[_14896 + 32]
                                                                            _15062 = mem[_14896 + 64]
                                                                            mem[mem[64]] = mem[_14896]
                                                                            mem[mem[64] + 64] = _15062
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15061, _15062, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14897 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15065 = mem[_14897 + 32]
                                                                            _15066 = mem[_14897 + 64]
                                                                            mem[mem[64]] = mem[_14897]
                                                                            mem[mem[64] + 64] = _15066
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15065, _15066, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14989 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15130 = mem[_14989 + 32]
                                                                            _15131 = mem[_14989 + 64]
                                                                            mem[mem[64]] = mem[_14989]
                                                                            mem[mem[64] + 64] = _15131
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15130, _15131, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and 1 > -1 / arg2:
                                                                revert with 0, 17
                                                            if not arg2:
                                                                revert with 0, 18
                                                            if arg2 / arg2 != 1:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11403 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11403] = 26
                                                            mem[_11403 + 32] = 'SafeMath: division by zero'
                                                            if 0 > !(arg2 / 100):
                                                                revert with 0, 17
                                                            _12236 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12236] = 30
                                                            mem[_12236 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 / 100 > arg2:
                                                                var207001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 / 100:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12641 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12641] = 38
                                                            mem[_12641 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12641 + 70 len 26]
                                                                var217001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2 / 100
                                                            if balanceOf[this.address] > !(arg2 / 100):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                                            emit Transfer((arg2 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13607 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13607] = 38
                                                            mem[_13607 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13607 + 70 len 26]
                                                                var235001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                                            emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15260 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15460 = mem[_15260 + 32]
                                                                            _15461 = mem[_15260 + 64]
                                                                            mem[mem[64]] = mem[_15260]
                                                                            mem[mem[64] + 64] = _15461
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15460, _15461, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15361 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15568 = mem[_15361 + 32]
                                                                            _15569 = mem[_15361 + 64]
                                                                            mem[mem[64]] = mem[_15361]
                                                                            mem[mem[64] + 64] = _15569
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15568, _15569, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15362 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15572 = mem[_15362 + 32]
                                                                            _15573 = mem[_15362 + 64]
                                                                            mem[mem[64]] = mem[_15362]
                                                                            mem[mem[64] + 64] = _15573
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15572, _15573, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15464 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15661 = mem[_15464 + 32]
                                                                            _15662 = mem[_15464 + 64]
                                                                            mem[mem[64]] = mem[_15464]
                                                                            mem[mem[64] + 64] = _15662
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15661, _15662, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if arg2 * totalFees / arg2 != totalFees:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11066 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11066] = 26
                                                    mem[_11066 + 32] = 'SafeMath: division by zero'
                                                    mem[0] = arg1
                                                    mem[32] = 26
                                                    if not stor26[address(arg1)]:
                                                        _11243 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11243] = 30
                                                        mem[_11243 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * totalFees / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 0, 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11860 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11860] = 38
                                                        mem[_11860 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11860 + 70 len 26]
                                                            var201001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 0, 17
                                                        if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 0
                                                        balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12740 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12740] = 38
                                                        mem[_12740 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12740 + 70 len 26]
                                                            var219001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 0, 17
                                                        if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14066 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14223 = mem[_14066 + 32]
                                                                        _14224 = mem[_14066 + 64]
                                                                        mem[mem[64]] = mem[_14066]
                                                                        mem[mem[64] + 64] = _14224
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14223, _14224, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14140 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14300 = mem[_14140 + 32]
                                                                        _14301 = mem[_14140 + 64]
                                                                        mem[mem[64]] = mem[_14140]
                                                                        mem[mem[64] + 64] = _14301
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14300, _14301, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14141 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14304 = mem[_14141 + 32]
                                                                        _14305 = mem[_14141 + 64]
                                                                        mem[mem[64]] = mem[_14141]
                                                                        mem[mem[64] + 64] = _14305
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14304, _14305, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14227 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14369 = mem[_14227 + 32]
                                                                        _14370 = mem[_14227 + 64]
                                                                        mem[mem[64]] = mem[_14227]
                                                                        mem[mem[64] + 64] = _14370
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14369, _14370, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not arg2:
                                                            _11399 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11399] = 26
                                                            mem[_11399 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * totalFees / 100 > -1:
                                                                revert with 0, 17
                                                            _12232 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12232] = 30
                                                            mem[_12232 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * totalFees / 100 > arg2:
                                                                var207001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12638 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12638] = 38
                                                            mem[_12638 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12638 + 70 len 26]
                                                                var217001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13600 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13600] = 38
                                                            mem[_13600 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13600 + 70 len 26]
                                                                var235001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15257 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15453 = mem[_15257 + 32]
                                                                            _15454 = mem[_15257 + 64]
                                                                            mem[mem[64]] = mem[_15257]
                                                                            mem[mem[64] + 64] = _15454
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15453, _15454, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15358 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15559 = mem[_15358 + 32]
                                                                            _15560 = mem[_15358 + 64]
                                                                            mem[mem[64]] = mem[_15358]
                                                                            mem[mem[64] + 64] = _15560
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15559, _15560, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15359 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15563 = mem[_15359 + 32]
                                                                            _15564 = mem[_15359 + 64]
                                                                            mem[mem[64]] = mem[_15359]
                                                                            mem[mem[64] + 64] = _15564
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15563, _15564, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15457 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15657 = mem[_15457 + 32]
                                                                            _15658 = mem[_15457 + 64]
                                                                            mem[mem[64]] = mem[_15457]
                                                                            mem[mem[64] + 64] = _15658
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15657, _15658, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and 1 > -1 / arg2:
                                                                revert with 0, 17
                                                            if not arg2:
                                                                revert with 0, 18
                                                            if arg2 / arg2 != 1:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11863 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11863] = 26
                                                            mem[_11863 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * totalFees / 100 > !(arg2 / 100):
                                                                revert with 0, 17
                                                            _12486 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12486] = 30
                                                            mem[_12486 + 32] = 'SafeMath: subtraction overflow'
                                                            if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                                                var213001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12944 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12944] = 38
                                                            mem[_12944 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12944 + 70 len 26]
                                                                var223001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13988 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13988] = 38
                                                            mem[_13988 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13988 + 70 len 26]
                                                                var241001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15804 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16015 = mem[_15804 + 32]
                                                                            _16016 = mem[_15804 + 64]
                                                                            mem[mem[64]] = mem[_15804]
                                                                            mem[mem[64] + 64] = _16016
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16015, _16016, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15921 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16099 = mem[_15921 + 32]
                                                                            _16100 = mem[_15921 + 64]
                                                                            mem[mem[64]] = mem[_15921]
                                                                            mem[mem[64] + 64] = _16100
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16099, _16100, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15922 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16103 = mem[_15922 + 32]
                                                                            _16104 = mem[_15922 + 64]
                                                                            mem[mem[64]] = mem[_15922]
                                                                            mem[mem[64] + 64] = _16104
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16103, _16104, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _16019 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16164 = mem[_16019 + 32]
                                                                            _16165 = mem[_16019 + 64]
                                                                            mem[mem[64]] = mem[_16019]
                                                                            mem[mem[64] + 64] = _16165
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16164, _16165, gasForProcessing, 1, tx.origin);
                                else:
                                    if 0 / s and s - 1 > -1 / 0 / s:
                                        revert with 0, 17
                                    if not 0 / s:
                                        revert with 0, 18
                                    if -(0 / s) + (s * 0 / s) / 0 / s != s - 1:
                                        revert with 0, 'SafeMath: multiplication overflow'
                                    _5190 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_5190] = 30
                                    mem[_5190 + 32] = 'SafeMath: subtraction overflow'
                                    if -(0 / s) + (s * 0 / s) > 0:
                                        revert with 0, 'SafeMath: subtraction overflow', 0
                                    if 0 < -(0 / s) + (s * 0 / s):
                                        revert with 0, 17
                                    idx = 0
                                    while idx < tokens.length:
                                        mem[0] = tokens[idx]
                                        mem[32] = 13
                                        if not stor13[stor10[idx]]:
                                            _10878 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_10878] = 30
                                            mem[_10878 + 32] = 'SafeMath: subtraction overflow'
                                            if 1 > s:
                                                _10888 = mem[64]
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 30
                                                idx = 0
                                                while idx < 30:
                                                    mem[idx + _10888 + 68] = mem[idx + _10878 + 32]
                                                    idx = idx + 32
                                                    continue 
                                                mem[_10888 + 98] = 0
                                                revert with memory
                                                  from mem[64]
                                                   len _10888 + -mem[64] + 100
                                            if s < 1:
                                                revert with 0, 17
                                            if 0 == s - 1:
                                                if not (0 / s) - (s * 0 / s):
                                                    _11103 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11103] = 26
                                                    mem[_11103 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11160 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11160 + 68] = mem[idx + _11103 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11160 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11160 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11391 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11391] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11451 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11391 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11451 + 68] = _marketingWalletAddress
                                                        mem[_11451 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11451 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16853 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16853] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16882 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16853 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16882 + 68] = this.address
                                                                mem[_16882 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16882 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18941 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _18981 = mem[_18941]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _18981
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _18981
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19101 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19101] == bool(mem[_19101])
                                                                if mem[_19101]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _18981:
                                                                        _19534 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19534] = 26
                                                                        mem[_19534 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19631 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19631 + 68] = mem[idx + _19534 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19631 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19631 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _18981 and sub_67a6acd1[stor10[idx]] > -1 / _18981:
                                                                            revert with 0, 17
                                                                        if not _18981:
                                                                            revert with 0, 18
                                                                        if _18981 * sub_67a6acd1[stor10[idx]] / _18981 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _19963 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19963] = 26
                                                                        mem[_19963 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20181 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20181 + 68] = mem[idx + _19963 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20181 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20181 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _18981 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _18981 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _18981 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_18981 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16853 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16853 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16853 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21925 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16853 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21925 + 68] = this.address
                                                                mem[_21925 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21925 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25850 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25930 = mem[_25850]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25930
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25930
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26170 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26170] == bool(mem[_26170])
                                                                if mem[_26170]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25930:
                                                                        _26490 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26490] = 26
                                                                        mem[_26490 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26570 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26570 + 68] = mem[idx + _26490 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26570 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26570 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25930 and sub_67a6acd1[stor10[idx]] > -1 / _25930:
                                                                            revert with 0, 17
                                                                        if not _25930:
                                                                            revert with 0, 18
                                                                        if _25930 * sub_67a6acd1[stor10[idx]] / _25930 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26970 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26970] = 26
                                                                        mem[_26970 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27296 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27296 + 68] = mem[idx + _26970 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27296 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27296 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25930 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25930 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25930 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25930 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not (0 / s) - (s * 0 / s):
                                                                _16921 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16921] = 26
                                                                mem[_16921 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16949 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16949 + 68] = mem[idx + _16921 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16949 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16949 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17139 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17139] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17182 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17139 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17182 + 68] = this.address
                                                                    mem[_17182 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17182 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18943 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18983 = mem[_18943]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18983
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18983
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19103 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19103] == bool(mem[_19103])
                                                                    if mem[_19103]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18983:
                                                                            _19536 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19536] = 26
                                                                            mem[_19536 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19633 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19633 + 68] = mem[idx + _19536 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19633 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19633 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18983 and sub_67a6acd1[stor10[idx]] > -1 / _18983:
                                                                                revert with 0, 17
                                                                            if not _18983:
                                                                                revert with 0, 18
                                                                            if _18983 * sub_67a6acd1[stor10[idx]] / _18983 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19965 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19965] = 26
                                                                            mem[_19965 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20185 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20185 + 68] = mem[idx + _19965 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20185 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20185 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18983 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18983 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18983 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18983 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17139 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17139 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17139 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21929 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17139 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21929 + 68] = this.address
                                                                    mem[_21929 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21929 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25852 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25932 = mem[_25852]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25932
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25932
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26172 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26172] == bool(mem[_26172])
                                                                    if mem[_26172]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25932:
                                                                            _26492 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26492] = 26
                                                                            mem[_26492 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26572 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26572 + 68] = mem[idx + _26492 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26572 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26572 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25932 and sub_67a6acd1[stor10[idx]] > -1 / _25932:
                                                                                revert with 0, 17
                                                                            if not _25932:
                                                                                revert with 0, 18
                                                                            if _25932 * sub_67a6acd1[stor10[idx]] / _25932 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26972 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26972] = 26
                                                                            mem[_26972 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27300 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27300 + 68] = mem[idx + _26972 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27300 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27300 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25932 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25932 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25932 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25932 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if (0 / s) - (s * 0 / s) and rewardsFee > -1 / (0 / s) - (s * 0 / s):
                                                                    revert with 0, 17
                                                                if not (0 / s) - (s * 0 / s):
                                                                    revert with 0, 18
                                                                if (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / (0 / s) - (s * 0 / s) != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17043 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17043] = 26
                                                                mem[_17043 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17074 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17074 + 68] = mem[idx + _17043 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17074 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17074 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17341 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17341] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17369 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17341 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17369 + 68] = this.address
                                                                    mem[_17369 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17369 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18942 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18982 = mem[_18942]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18982
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18982
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19102 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19102] == bool(mem[_19102])
                                                                    if mem[_19102]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18982:
                                                                            _19535 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19535] = 26
                                                                            mem[_19535 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19632 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19632 + 68] = mem[idx + _19535 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19632 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19632 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18982 and sub_67a6acd1[stor10[idx]] > -1 / _18982:
                                                                                revert with 0, 17
                                                                            if not _18982:
                                                                                revert with 0, 18
                                                                            if _18982 * sub_67a6acd1[stor10[idx]] / _18982 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19964 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19964] = 26
                                                                            mem[_19964 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20183 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20183 + 68] = mem[idx + _19964 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20183 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20183 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18982 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18982 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18982 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18982 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17341 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17341 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17341 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21927 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17341 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21927 + 68] = this.address
                                                                    mem[_21927 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21927 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25851 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25931 = mem[_25851]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25931
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25931
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26171 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26171] == bool(mem[_26171])
                                                                    if mem[_26171]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25931:
                                                                            _26491 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26491] = 26
                                                                            mem[_26491 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26571 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26571 + 68] = mem[idx + _26491 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26571 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26571 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25931 and sub_67a6acd1[stor10[idx]] > -1 / _25931:
                                                                                revert with 0, 17
                                                                            if not _25931:
                                                                                revert with 0, 18
                                                                            if _25931 * sub_67a6acd1[stor10[idx]] / _25931 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26971 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26971] = 26
                                                                            mem[_26971 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27298 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27298 + 68] = mem[idx + _26971 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27298 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27298 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25931 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25931 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25931 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25931 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11391 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11391 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11391 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18633 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11391 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18633 + 68] = _marketingWalletAddress
                                                        mem[_18633 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18633 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22475 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22475] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22538 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22475 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22538 + 68] = this.address
                                                                mem[_22538 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22538 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25853 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25933 = mem[_25853]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25933
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25933
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26173 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26173] == bool(mem[_26173])
                                                                if mem[_26173]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25933:
                                                                        _26493 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26493] = 26
                                                                        mem[_26493 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26573 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26573 + 68] = mem[idx + _26493 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26573 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26573 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25933 and sub_67a6acd1[stor10[idx]] > -1 / _25933:
                                                                            revert with 0, 17
                                                                        if not _25933:
                                                                            revert with 0, 18
                                                                        if _25933 * sub_67a6acd1[stor10[idx]] / _25933 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26973 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26973] = 26
                                                                        mem[_26973 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27302 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27302 + 68] = mem[idx + _26973 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27302 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27302 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25933 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25933 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25933 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25933 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22475 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22475 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22475 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28251 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22475 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28251 + 68] = this.address
                                                                mem[_28251 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28251 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30367 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30407 = mem[_30367]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30407
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30407
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30527 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30527] == bool(mem[_30527])
                                                                if mem[_30527]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30407:
                                                                        _30687 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30687] = 26
                                                                        mem[_30687 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30727 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30727 + 68] = mem[idx + _30687 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30727 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30727 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30407 and sub_67a6acd1[stor10[idx]] > -1 / _30407:
                                                                            revert with 0, 17
                                                                        if not _30407:
                                                                            revert with 0, 18
                                                                        if _30407 * sub_67a6acd1[stor10[idx]] / _30407 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30927 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30927] = 26
                                                                        mem[_30927 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31090 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31090 + 68] = mem[idx + _30927 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31090 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31090 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30407 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30407 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30407 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30407 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not (0 / s) - (s * 0 / s):
                                                                _22583 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22583] = 26
                                                                mem[_22583 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22725 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22725 + 68] = mem[idx + _22583 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22725 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22725 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23007 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23007] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23118 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23007 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23118 + 68] = this.address
                                                                    mem[_23118 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23118 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25855 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25935 = mem[_25855]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25935
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25935
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26175 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26175] == bool(mem[_26175])
                                                                    if mem[_26175]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25935:
                                                                            _26495 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26495] = 26
                                                                            mem[_26495 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26575 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26575 + 68] = mem[idx + _26495 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26575 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26575 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25935 and sub_67a6acd1[stor10[idx]] > -1 / _25935:
                                                                                revert with 0, 17
                                                                            if not _25935:
                                                                                revert with 0, 18
                                                                            if _25935 * sub_67a6acd1[stor10[idx]] / _25935 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26975 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26975] = 26
                                                                            mem[_26975 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27306 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27306 + 68] = mem[idx + _26975 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27306 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27306 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25935 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25935 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25935 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25935 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23007 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23007 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23007 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28255 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23007 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28255 + 68] = this.address
                                                                    mem[_28255 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28255 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30369 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30409 = mem[_30369]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30409
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30409
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30529 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30529] == bool(mem[_30529])
                                                                    if mem[_30529]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30409:
                                                                            _30689 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30689] = 26
                                                                            mem[_30689 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30729 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30729 + 68] = mem[idx + _30689 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30729 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30729 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30409 and sub_67a6acd1[stor10[idx]] > -1 / _30409:
                                                                                revert with 0, 17
                                                                            if not _30409:
                                                                                revert with 0, 18
                                                                            if _30409 * sub_67a6acd1[stor10[idx]] / _30409 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30929 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30929] = 26
                                                                            mem[_30929 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31094 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31094 + 68] = mem[idx + _30929 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31094 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31094 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30409 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30409 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30409 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30409 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if (0 / s) - (s * 0 / s) and rewardsFee > -1 / (0 / s) - (s * 0 / s):
                                                                    revert with 0, 17
                                                                if not (0 / s) - (s * 0 / s):
                                                                    revert with 0, 18
                                                                if (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / (0 / s) - (s * 0 / s) != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22899 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22899] = 26
                                                                mem[_22899 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22930 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22930 + 68] = mem[idx + _22899 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22930 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22930 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23317 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23317] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23351 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23317 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23351 + 68] = this.address
                                                                    mem[_23351 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23351 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25854 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25934 = mem[_25854]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25934
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25934
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26174 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26174] == bool(mem[_26174])
                                                                    if mem[_26174]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25934:
                                                                            _26494 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26494] = 26
                                                                            mem[_26494 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26574 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26574 + 68] = mem[idx + _26494 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26574 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26574 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25934 and sub_67a6acd1[stor10[idx]] > -1 / _25934:
                                                                                revert with 0, 17
                                                                            if not _25934:
                                                                                revert with 0, 18
                                                                            if _25934 * sub_67a6acd1[stor10[idx]] / _25934 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26974 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26974] = 26
                                                                            mem[_26974 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27304 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27304 + 68] = mem[idx + _26974 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27304 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27304 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25934 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25934 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25934 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25934 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23317 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23317 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23317 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28253 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23317 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28253 + 68] = this.address
                                                                    mem[_28253 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28253 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30368 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30408 = mem[_30368]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30408
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30408
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30528 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30528] == bool(mem[_30528])
                                                                    if mem[_30528]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30408:
                                                                            _30688 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30688] = 26
                                                                            mem[_30688 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30728 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30728 + 68] = mem[idx + _30688 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30728 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30728 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30408 and sub_67a6acd1[stor10[idx]] > -1 / _30408:
                                                                                revert with 0, 17
                                                                            if not _30408:
                                                                                revert with 0, 18
                                                                            if _30408 * sub_67a6acd1[stor10[idx]] / _30408 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30928 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30928] = 26
                                                                            mem[_30928 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31092 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31092 + 68] = mem[idx + _30928 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31092 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31092 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30408 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30408 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30408 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30408 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                else:
                                                    if (0 / s) - (s * 0 / s) and marketingFee > -1 / (0 / s) - (s * 0 / s):
                                                        revert with 0, 17
                                                    if not (0 / s) - (s * 0 / s):
                                                        revert with 0, 18
                                                    if (0 / s * marketingFee) - (s * 0 / s * marketingFee) / (0 / s) - (s * 0 / s) != marketingFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11268 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11268] = 26
                                                    mem[_11268 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11351 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11351 + 68] = mem[idx + _11268 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11351 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11351 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11849 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11849] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11943 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11849 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11943 + 68] = _marketingWalletAddress
                                                        mem[_11943 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value (0 / s * marketingFee) - (s * 0 / s * marketingFee) / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11943 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16851 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16851] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16879 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16851 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16879 + 68] = this.address
                                                                mem[_16879 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16879 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18938 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _18978 = mem[_18938]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _18978
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _18978
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19098 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19098] == bool(mem[_19098])
                                                                if mem[_19098]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _18978:
                                                                        _19530 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19530] = 26
                                                                        mem[_19530 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19624 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19624 + 68] = mem[idx + _19530 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19624 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19624 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _18978 and sub_67a6acd1[stor10[idx]] > -1 / _18978:
                                                                            revert with 0, 17
                                                                        if not _18978:
                                                                            revert with 0, 18
                                                                        if _18978 * sub_67a6acd1[stor10[idx]] / _18978 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _19958 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19958] = 26
                                                                        mem[_19958 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20170 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20170 + 68] = mem[idx + _19958 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20170 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20170 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _18978 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _18978 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _18978 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_18978 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16851 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16851 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16851 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21919 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16851 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21919 + 68] = this.address
                                                                mem[_21919 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21919 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25844 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25924 = mem[_25844]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25924
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25924
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26164 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26164] == bool(mem[_26164])
                                                                if mem[_26164]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25924:
                                                                        _26484 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26484] = 26
                                                                        mem[_26484 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26564 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26564 + 68] = mem[idx + _26484 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26564 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26564 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25924 and sub_67a6acd1[stor10[idx]] > -1 / _25924:
                                                                            revert with 0, 17
                                                                        if not _25924:
                                                                            revert with 0, 18
                                                                        if _25924 * sub_67a6acd1[stor10[idx]] / _25924 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26964 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26964] = 26
                                                                        mem[_26964 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27284 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27284 + 68] = mem[idx + _26964 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27284 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27284 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25924 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25924 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25924 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25924 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not (0 / s) - (s * 0 / s):
                                                                _16920 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16920] = 26
                                                                mem[_16920 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16948 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16948 + 68] = mem[idx + _16920 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16948 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16948 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17136 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17136] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17178 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17136 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17178 + 68] = this.address
                                                                    mem[_17178 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17178 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18940 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18980 = mem[_18940]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18980
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18980
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19100 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19100] == bool(mem[_19100])
                                                                    if mem[_19100]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18980:
                                                                            _19532 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19532] = 26
                                                                            mem[_19532 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19626 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19626 + 68] = mem[idx + _19532 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19626 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19626 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18980 and sub_67a6acd1[stor10[idx]] > -1 / _18980:
                                                                                revert with 0, 17
                                                                            if not _18980:
                                                                                revert with 0, 18
                                                                            if _18980 * sub_67a6acd1[stor10[idx]] / _18980 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19960 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19960] = 26
                                                                            mem[_19960 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20174 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20174 + 68] = mem[idx + _19960 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20174 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20174 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18980 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18980 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18980 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18980 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17136 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17136 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17136 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21923 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17136 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21923 + 68] = this.address
                                                                    mem[_21923 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21923 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25846 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25926 = mem[_25846]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25926
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25926
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26166 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26166] == bool(mem[_26166])
                                                                    if mem[_26166]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25926:
                                                                            _26486 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26486] = 26
                                                                            mem[_26486 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26566 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26566 + 68] = mem[idx + _26486 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26566 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26566 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25926 and sub_67a6acd1[stor10[idx]] > -1 / _25926:
                                                                                revert with 0, 17
                                                                            if not _25926:
                                                                                revert with 0, 18
                                                                            if _25926 * sub_67a6acd1[stor10[idx]] / _25926 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26966 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26966] = 26
                                                                            mem[_26966 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27288 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27288 + 68] = mem[idx + _26966 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27288 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27288 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25926 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25926 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25926 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25926 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if (0 / s) - (s * 0 / s) and rewardsFee > -1 / (0 / s) - (s * 0 / s):
                                                                    revert with 0, 17
                                                                if not (0 / s) - (s * 0 / s):
                                                                    revert with 0, 18
                                                                if (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / (0 / s) - (s * 0 / s) != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17042 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17042] = 26
                                                                mem[_17042 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17070 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17070 + 68] = mem[idx + _17042 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17070 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17070 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17339 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17339] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17364 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17339 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17364 + 68] = this.address
                                                                    mem[_17364 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17364 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18939 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18979 = mem[_18939]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18979
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18979
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19099 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19099] == bool(mem[_19099])
                                                                    if mem[_19099]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18979:
                                                                            _19531 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19531] = 26
                                                                            mem[_19531 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19625 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19625 + 68] = mem[idx + _19531 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19625 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19625 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18979 and sub_67a6acd1[stor10[idx]] > -1 / _18979:
                                                                                revert with 0, 17
                                                                            if not _18979:
                                                                                revert with 0, 18
                                                                            if _18979 * sub_67a6acd1[stor10[idx]] / _18979 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19959 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19959] = 26
                                                                            mem[_19959 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20172 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20172 + 68] = mem[idx + _19959 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20172 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20172 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18979 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18979 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18979 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18979 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17339 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17339 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17339 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21921 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17339 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21921 + 68] = this.address
                                                                    mem[_21921 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21921 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25845 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25925 = mem[_25845]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25925
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25925
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26165 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26165] == bool(mem[_26165])
                                                                    if mem[_26165]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25925:
                                                                            _26485 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26485] = 26
                                                                            mem[_26485 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26565 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26565 + 68] = mem[idx + _26485 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26565 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26565 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25925 and sub_67a6acd1[stor10[idx]] > -1 / _25925:
                                                                                revert with 0, 17
                                                                            if not _25925:
                                                                                revert with 0, 18
                                                                            if _25925 * sub_67a6acd1[stor10[idx]] / _25925 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26965 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26965] = 26
                                                                            mem[_26965 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27286 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27286 + 68] = mem[idx + _26965 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27286 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27286 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25925 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25925 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25925 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25925 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11849 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11849 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11849 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18631 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11849 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18631 + 68] = _marketingWalletAddress
                                                        mem[_18631 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value (0 / s * marketingFee) - (s * 0 / s * marketingFee) / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18631 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22470 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22470] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22535 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22470 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22535 + 68] = this.address
                                                                mem[_22535 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22535 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25847 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25927 = mem[_25847]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25927
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25927
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26167 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26167] == bool(mem[_26167])
                                                                if mem[_26167]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25927:
                                                                        _26487 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26487] = 26
                                                                        mem[_26487 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26567 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26567 + 68] = mem[idx + _26487 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26567 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26567 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25927 and sub_67a6acd1[stor10[idx]] > -1 / _25927:
                                                                            revert with 0, 17
                                                                        if not _25927:
                                                                            revert with 0, 18
                                                                        if _25927 * sub_67a6acd1[stor10[idx]] / _25927 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26967 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26967] = 26
                                                                        mem[_26967 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27290 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27290 + 68] = mem[idx + _26967 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27290 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27290 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25927 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25927 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25927 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25927 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22470 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22470 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22470 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28245 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22470 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28245 + 68] = this.address
                                                                mem[_28245 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28245 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30364 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30404 = mem[_30364]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30404
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30404
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30524 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30524] == bool(mem[_30524])
                                                                if mem[_30524]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30404:
                                                                        _30684 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30684] = 26
                                                                        mem[_30684 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30724 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30724 + 68] = mem[idx + _30684 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30724 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30724 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30404 and sub_67a6acd1[stor10[idx]] > -1 / _30404:
                                                                            revert with 0, 17
                                                                        if not _30404:
                                                                            revert with 0, 18
                                                                        if _30404 * sub_67a6acd1[stor10[idx]] / _30404 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30924 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30924] = 26
                                                                        mem[_30924 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31084 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31084 + 68] = mem[idx + _30924 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31084 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31084 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30404 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30404 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30404 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30404 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not (0 / s) - (s * 0 / s):
                                                                _22579 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22579] = 26
                                                                mem[_22579 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22724 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22724 + 68] = mem[idx + _22579 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22724 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22724 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _22998 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_22998] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23114 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _22998 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23114 + 68] = this.address
                                                                    mem[_23114 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23114 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25849 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25929 = mem[_25849]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25929
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25929
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26169 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26169] == bool(mem[_26169])
                                                                    if mem[_26169]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25929:
                                                                            _26489 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26489] = 26
                                                                            mem[_26489 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26569 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26569 + 68] = mem[idx + _26489 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26569 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26569 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25929 and sub_67a6acd1[stor10[idx]] > -1 / _25929:
                                                                                revert with 0, 17
                                                                            if not _25929:
                                                                                revert with 0, 18
                                                                            if _25929 * sub_67a6acd1[stor10[idx]] / _25929 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26969 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26969] = 26
                                                                            mem[_26969 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27294 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27294 + 68] = mem[idx + _26969 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27294 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27294 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25929 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25929 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25929 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25929 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_22998 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _22998 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _22998 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28249 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _22998 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28249 + 68] = this.address
                                                                    mem[_28249 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28249 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30366 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30406 = mem[_30366]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30406
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30406
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30526 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30526] == bool(mem[_30526])
                                                                    if mem[_30526]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30406:
                                                                            _30686 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30686] = 26
                                                                            mem[_30686 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30726 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30726 + 68] = mem[idx + _30686 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30726 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30726 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30406 and sub_67a6acd1[stor10[idx]] > -1 / _30406:
                                                                                revert with 0, 17
                                                                            if not _30406:
                                                                                revert with 0, 18
                                                                            if _30406 * sub_67a6acd1[stor10[idx]] / _30406 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30926 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30926] = 26
                                                                            mem[_30926 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31088 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31088 + 68] = mem[idx + _30926 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31088 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31088 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30406 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30406 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30406 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30406 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if (0 / s) - (s * 0 / s) and rewardsFee > -1 / (0 / s) - (s * 0 / s):
                                                                    revert with 0, 17
                                                                if not (0 / s) - (s * 0 / s):
                                                                    revert with 0, 18
                                                                if (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / (0 / s) - (s * 0 / s) != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22898 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22898] = 26
                                                                mem[_22898 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22926 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22926 + 68] = mem[idx + _22898 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22926 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22926 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23315 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23315] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23343 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23315 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23343 + 68] = this.address
                                                                    mem[_23343 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23343 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25848 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25928 = mem[_25848]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25928
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25928
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26168 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26168] == bool(mem[_26168])
                                                                    if mem[_26168]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25928:
                                                                            _26488 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26488] = 26
                                                                            mem[_26488 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26568 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26568 + 68] = mem[idx + _26488 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26568 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26568 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25928 and sub_67a6acd1[stor10[idx]] > -1 / _25928:
                                                                                revert with 0, 17
                                                                            if not _25928:
                                                                                revert with 0, 18
                                                                            if _25928 * sub_67a6acd1[stor10[idx]] / _25928 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26968 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26968] = 26
                                                                            mem[_26968 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27292 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27292 + 68] = mem[idx + _26968 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27292 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27292 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25928 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25928 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25928 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25928 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23315 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23315 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23315 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28247 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23315 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28247 + 68] = this.address
                                                                    mem[_28247 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value (0 / s * rewardsFee) - (s * 0 / s * rewardsFee) / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28247 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30365 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30405 = mem[_30365]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30405
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30405
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30525 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30525] == bool(mem[_30525])
                                                                    if mem[_30525]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30405:
                                                                            _30685 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30685] = 26
                                                                            mem[_30685 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30725 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30725 + 68] = mem[idx + _30685 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30725 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30725 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30405 and sub_67a6acd1[stor10[idx]] > -1 / _30405:
                                                                                revert with 0, 17
                                                                            if not _30405:
                                                                                revert with 0, 18
                                                                            if _30405 * sub_67a6acd1[stor10[idx]] / _30405 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30925 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30925] = 26
                                                                            mem[_30925 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31086 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31086 + 68] = mem[idx + _30925 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31086 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31086 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30405 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30405 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30405 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30405 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                            else:
                                                if not 0 / s:
                                                    _11104 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11104] = 26
                                                    mem[_11104 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11161 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11161 + 68] = mem[idx + _11104 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11161 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11161 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11394 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11394] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11454 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11394 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11454 + 68] = _marketingWalletAddress
                                                        mem[_11454 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11454 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16857 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16857] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16888 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16857 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16888 + 68] = this.address
                                                                mem[_16888 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16888 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18947 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _18987 = mem[_18947]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _18987
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _18987
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19107 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19107] == bool(mem[_19107])
                                                                if mem[_19107]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _18987:
                                                                        _19542 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19542] = 26
                                                                        mem[_19542 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19645 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19645 + 68] = mem[idx + _19542 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19645 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19645 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _18987 and sub_67a6acd1[stor10[idx]] > -1 / _18987:
                                                                            revert with 0, 17
                                                                        if not _18987:
                                                                            revert with 0, 18
                                                                        if _18987 * sub_67a6acd1[stor10[idx]] / _18987 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _19973 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19973] = 26
                                                                        mem[_19973 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20203 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20203 + 68] = mem[idx + _19973 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20203 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20203 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _18987 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _18987 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _18987 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_18987 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16857 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16857 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16857 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21937 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16857 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21937 + 68] = this.address
                                                                mem[_21937 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21937 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25862 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25942 = mem[_25862]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25942
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25942
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26182 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26182] == bool(mem[_26182])
                                                                if mem[_26182]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25942:
                                                                        _26502 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26502] = 26
                                                                        mem[_26502 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26582 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26582 + 68] = mem[idx + _26502 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26582 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26582 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25942 and sub_67a6acd1[stor10[idx]] > -1 / _25942:
                                                                            revert with 0, 17
                                                                        if not _25942:
                                                                            revert with 0, 18
                                                                        if _25942 * sub_67a6acd1[stor10[idx]] / _25942 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26982 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26982] = 26
                                                                        mem[_26982 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27320 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27320 + 68] = mem[idx + _26982 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27320 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27320 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25942 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25942 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25942 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25942 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _16923 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16923] = 26
                                                                mem[_16923 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16951 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16951 + 68] = mem[idx + _16923 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16951 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16951 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17145 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17145] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17190 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17145 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17190 + 68] = this.address
                                                                    mem[_17190 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17190 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18949 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18989 = mem[_18949]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18989
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18989
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19109 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19109] == bool(mem[_19109])
                                                                    if mem[_19109]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18989:
                                                                            _19544 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19544] = 26
                                                                            mem[_19544 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19647 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19647 + 68] = mem[idx + _19544 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19647 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19647 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18989 and sub_67a6acd1[stor10[idx]] > -1 / _18989:
                                                                                revert with 0, 17
                                                                            if not _18989:
                                                                                revert with 0, 18
                                                                            if _18989 * sub_67a6acd1[stor10[idx]] / _18989 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19975 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19975] = 26
                                                                            mem[_19975 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20207 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20207 + 68] = mem[idx + _19975 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20207 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20207 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18989 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18989 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18989 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18989 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17145 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17145 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17145 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21941 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17145 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21941 + 68] = this.address
                                                                    mem[_21941 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21941 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25864 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25944 = mem[_25864]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25944
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25944
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26184 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26184] == bool(mem[_26184])
                                                                    if mem[_26184]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25944:
                                                                            _26504 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26504] = 26
                                                                            mem[_26504 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26584 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26584 + 68] = mem[idx + _26504 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26584 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26584 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25944 and sub_67a6acd1[stor10[idx]] > -1 / _25944:
                                                                                revert with 0, 17
                                                                            if not _25944:
                                                                                revert with 0, 18
                                                                            if _25944 * sub_67a6acd1[stor10[idx]] / _25944 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26984 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26984] = 26
                                                                            mem[_26984 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27324 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27324 + 68] = mem[idx + _26984 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27324 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27324 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25944 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25944 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25944 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25944 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17045 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17045] = 26
                                                                mem[_17045 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17082 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17082 + 68] = mem[idx + _17045 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17082 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17082 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17345 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17345] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17379 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17345 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17379 + 68] = this.address
                                                                    mem[_17379 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17379 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18948 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18988 = mem[_18948]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18988
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18988
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19108 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19108] == bool(mem[_19108])
                                                                    if mem[_19108]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18988:
                                                                            _19543 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19543] = 26
                                                                            mem[_19543 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19646 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19646 + 68] = mem[idx + _19543 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19646 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19646 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18988 and sub_67a6acd1[stor10[idx]] > -1 / _18988:
                                                                                revert with 0, 17
                                                                            if not _18988:
                                                                                revert with 0, 18
                                                                            if _18988 * sub_67a6acd1[stor10[idx]] / _18988 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19974 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19974] = 26
                                                                            mem[_19974 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20205 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20205 + 68] = mem[idx + _19974 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20205 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20205 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18988 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18988 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18988 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18988 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17345 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17345 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17345 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21939 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17345 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21939 + 68] = this.address
                                                                    mem[_21939 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21939 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25863 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25943 = mem[_25863]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25943
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25943
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26183 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26183] == bool(mem[_26183])
                                                                    if mem[_26183]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25943:
                                                                            _26503 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26503] = 26
                                                                            mem[_26503 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26583 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26583 + 68] = mem[idx + _26503 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26583 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26583 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25943 and sub_67a6acd1[stor10[idx]] > -1 / _25943:
                                                                                revert with 0, 17
                                                                            if not _25943:
                                                                                revert with 0, 18
                                                                            if _25943 * sub_67a6acd1[stor10[idx]] / _25943 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26983 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26983] = 26
                                                                            mem[_26983 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27322 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27322 + 68] = mem[idx + _26983 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27322 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27322 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25943 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25943 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25943 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25943 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11394 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11394 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11394 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18637 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11394 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18637 + 68] = _marketingWalletAddress
                                                        mem[_18637 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18637 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22485 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22485] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22544 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22485 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22544 + 68] = this.address
                                                                mem[_22544 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22544 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25865 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25945 = mem[_25865]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25945
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25945
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26185 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26185] == bool(mem[_26185])
                                                                if mem[_26185]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25945:
                                                                        _26505 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26505] = 26
                                                                        mem[_26505 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26585 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26585 + 68] = mem[idx + _26505 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26585 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26585 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25945 and sub_67a6acd1[stor10[idx]] > -1 / _25945:
                                                                            revert with 0, 17
                                                                        if not _25945:
                                                                            revert with 0, 18
                                                                        if _25945 * sub_67a6acd1[stor10[idx]] / _25945 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26985 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26985] = 26
                                                                        mem[_26985 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27326 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27326 + 68] = mem[idx + _26985 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27326 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27326 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25945 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25945 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25945 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25945 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22485 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22485 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22485 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28263 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22485 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28263 + 68] = this.address
                                                                mem[_28263 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28263 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30373 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30413 = mem[_30373]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30413
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30413
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30533 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30533] == bool(mem[_30533])
                                                                if mem[_30533]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30413:
                                                                        _30693 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30693] = 26
                                                                        mem[_30693 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30733 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30733 + 68] = mem[idx + _30693 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30733 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30733 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30413 and sub_67a6acd1[stor10[idx]] > -1 / _30413:
                                                                            revert with 0, 17
                                                                        if not _30413:
                                                                            revert with 0, 18
                                                                        if _30413 * sub_67a6acd1[stor10[idx]] / _30413 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30933 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30933] = 26
                                                                        mem[_30933 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31102 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31102 + 68] = mem[idx + _30933 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31102 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31102 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30413 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30413 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30413 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30413 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _22591 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22591] = 26
                                                                mem[_22591 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22727 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22727 + 68] = mem[idx + _22591 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22727 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22727 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23025 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23025] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23126 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23025 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23126 + 68] = this.address
                                                                    mem[_23126 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23126 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25867 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25947 = mem[_25867]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25947
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25947
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26187 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26187] == bool(mem[_26187])
                                                                    if mem[_26187]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25947:
                                                                            _26507 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26507] = 26
                                                                            mem[_26507 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26587 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26587 + 68] = mem[idx + _26507 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26587 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26587 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25947 and sub_67a6acd1[stor10[idx]] > -1 / _25947:
                                                                                revert with 0, 17
                                                                            if not _25947:
                                                                                revert with 0, 18
                                                                            if _25947 * sub_67a6acd1[stor10[idx]] / _25947 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26987 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26987] = 26
                                                                            mem[_26987 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27330 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27330 + 68] = mem[idx + _26987 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27330 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27330 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25947 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25947 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25947 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25947 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23025 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23025 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23025 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28267 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23025 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28267 + 68] = this.address
                                                                    mem[_28267 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28267 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30375 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30415 = mem[_30375]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30415
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30415
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30535 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30535] == bool(mem[_30535])
                                                                    if mem[_30535]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30415:
                                                                            _30695 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30695] = 26
                                                                            mem[_30695 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30735 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30735 + 68] = mem[idx + _30695 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30735 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30735 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30415 and sub_67a6acd1[stor10[idx]] > -1 / _30415:
                                                                                revert with 0, 17
                                                                            if not _30415:
                                                                                revert with 0, 18
                                                                            if _30415 * sub_67a6acd1[stor10[idx]] / _30415 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30935 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30935] = 26
                                                                            mem[_30935 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31106 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31106 + 68] = mem[idx + _30935 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31106 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31106 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30415 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30415 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30415 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30415 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22901 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22901] = 26
                                                                mem[_22901 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22938 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22938 + 68] = mem[idx + _22901 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22938 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22938 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23321 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23321] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23367 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23321 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23367 + 68] = this.address
                                                                    mem[_23367 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23367 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25866 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25946 = mem[_25866]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25946
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25946
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26186 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26186] == bool(mem[_26186])
                                                                    if mem[_26186]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25946:
                                                                            _26506 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26506] = 26
                                                                            mem[_26506 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26586 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26586 + 68] = mem[idx + _26506 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26586 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26586 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25946 and sub_67a6acd1[stor10[idx]] > -1 / _25946:
                                                                                revert with 0, 17
                                                                            if not _25946:
                                                                                revert with 0, 18
                                                                            if _25946 * sub_67a6acd1[stor10[idx]] / _25946 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26986 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26986] = 26
                                                                            mem[_26986 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27328 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27328 + 68] = mem[idx + _26986 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27328 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27328 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25946 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25946 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25946 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25946 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23321 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23321 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23321 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28265 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23321 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28265 + 68] = this.address
                                                                    mem[_28265 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28265 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30374 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30414 = mem[_30374]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30414
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30414
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30534 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30534] == bool(mem[_30534])
                                                                    if mem[_30534]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30414:
                                                                            _30694 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30694] = 26
                                                                            mem[_30694 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30734 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30734 + 68] = mem[idx + _30694 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30734 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30734 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30414 and sub_67a6acd1[stor10[idx]] > -1 / _30414:
                                                                                revert with 0, 17
                                                                            if not _30414:
                                                                                revert with 0, 18
                                                                            if _30414 * sub_67a6acd1[stor10[idx]] / _30414 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30934 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30934] = 26
                                                                            mem[_30934 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31104 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31104 + 68] = mem[idx + _30934 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31104 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31104 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30414 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30414 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30414 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30414 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                else:
                                                    if 0 / s and marketingFee > -1 / 0 / s:
                                                        revert with 0, 17
                                                    if not 0 / s:
                                                        revert with 0, 18
                                                    if 0 / s * marketingFee / 0 / s != marketingFee:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11269 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11269] = 26
                                                    mem[_11269 + 32] = 'SafeMath: division by zero'
                                                    if not sub_dee3d564:
                                                        _11353 = mem[64]
                                                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 32
                                                        mem[mem[64] + 36] = 26
                                                        idx = 0
                                                        while idx < 26:
                                                            mem[idx + _11353 + 68] = mem[idx + _11269 + 32]
                                                            idx = idx + 32
                                                            continue 
                                                        mem[_11353 + 94] = 0
                                                        revert with memory
                                                          from mem[64]
                                                           len _11353 + -mem[64] + 100
                                                    mem[0] = tokens[idx]
                                                    mem[32] = 12
                                                    _11851 = mem[64]
                                                    mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                    mem[_11851] = uint256(sub_47f86dd2[stor10[idx]])
                                                    if not uint256(sub_47f86dd2[stor10[idx]]):
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _11947 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11851 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_11947 + 68] = _marketingWalletAddress
                                                        mem[_11947 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / s * marketingFee / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _11947 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _16855 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_16855] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _16885 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16855 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_16885 + 68] = this.address
                                                                mem[_16885 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _16885 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _18944 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _18984 = mem[_18944]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _18984
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _18984
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _19104 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_19104] == bool(mem[_19104])
                                                                if mem[_19104]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _18984:
                                                                        _19538 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19538] = 26
                                                                        mem[_19538 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _19638 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _19638 + 68] = mem[idx + _19538 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_19638 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _19638 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _18984 and sub_67a6acd1[stor10[idx]] > -1 / _18984:
                                                                            revert with 0, 17
                                                                        if not _18984:
                                                                            revert with 0, 18
                                                                        if _18984 * sub_67a6acd1[stor10[idx]] / _18984 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _19968 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_19968] = 26
                                                                        mem[_19968 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _20192 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _20192 + 68] = mem[idx + _19968 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_20192 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _20192 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _18984 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _18984 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _18984 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_18984 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_16855 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _16855 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _16855 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _21931 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _16855 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_21931 + 68] = this.address
                                                                mem[_21931 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _21931 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25856 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25936 = mem[_25856]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25936
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25936
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26176 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26176] == bool(mem[_26176])
                                                                if mem[_26176]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25936:
                                                                        _26496 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26496] = 26
                                                                        mem[_26496 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26576 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26576 + 68] = mem[idx + _26496 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26576 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26576 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25936 and sub_67a6acd1[stor10[idx]] > -1 / _25936:
                                                                            revert with 0, 17
                                                                        if not _25936:
                                                                            revert with 0, 18
                                                                        if _25936 * sub_67a6acd1[stor10[idx]] / _25936 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26976 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26976] = 26
                                                                        mem[_26976 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27308 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27308 + 68] = mem[idx + _26976 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27308 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27308 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25936 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25936 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25936 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25936 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _16922 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_16922] = 26
                                                                mem[_16922 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _16950 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _16950 + 68] = mem[idx + _16922 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_16950 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _16950 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17142 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17142] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17186 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17142 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_17186 + 68] = this.address
                                                                    mem[_17186 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17186 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18946 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18986 = mem[_18946]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18986
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18986
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19106 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19106] == bool(mem[_19106])
                                                                    if mem[_19106]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18986:
                                                                            _19540 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19540] = 26
                                                                            mem[_19540 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19640 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19640 + 68] = mem[idx + _19540 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19640 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19640 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18986 and sub_67a6acd1[stor10[idx]] > -1 / _18986:
                                                                                revert with 0, 17
                                                                            if not _18986:
                                                                                revert with 0, 18
                                                                            if _18986 * sub_67a6acd1[stor10[idx]] / _18986 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19970 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19970] = 26
                                                                            mem[_19970 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20196 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20196 + 68] = mem[idx + _19970 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20196 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20196 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18986 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18986 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18986 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18986 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17142 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _17142 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _17142 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21935 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _17142 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_21935 + 68] = this.address
                                                                    mem[_21935 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21935 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25858 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25938 = mem[_25858]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25938
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25938
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26178 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26178] == bool(mem[_26178])
                                                                    if mem[_26178]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25938:
                                                                            _26498 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26498] = 26
                                                                            mem[_26498 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26578 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26578 + 68] = mem[idx + _26498 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26578 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26578 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25938 and sub_67a6acd1[stor10[idx]] > -1 / _25938:
                                                                                revert with 0, 17
                                                                            if not _25938:
                                                                                revert with 0, 18
                                                                            if _25938 * sub_67a6acd1[stor10[idx]] / _25938 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26978 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26978] = 26
                                                                            mem[_26978 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27312 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27312 + 68] = mem[idx + _26978 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27312 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27312 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25938 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25938 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25938 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25938 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _17044 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_17044] = 26
                                                                mem[_17044 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _17078 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _17078 + 68] = mem[idx + _17044 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_17078 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _17078 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _17343 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_17343] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _17374 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17343 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_17374 + 68] = this.address
                                                                    mem[_17374 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _17374 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _18945 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _18985 = mem[_18945]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _18985
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _18985
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _19105 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_19105] == bool(mem[_19105])
                                                                    if mem[_19105]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _18985:
                                                                            _19539 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19539] = 26
                                                                            mem[_19539 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _19639 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _19639 + 68] = mem[idx + _19539 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_19639 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _19639 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _18985 and sub_67a6acd1[stor10[idx]] > -1 / _18985:
                                                                                revert with 0, 17
                                                                            if not _18985:
                                                                                revert with 0, 18
                                                                            if _18985 * sub_67a6acd1[stor10[idx]] / _18985 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _19969 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_19969] = 26
                                                                            mem[_19969 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _20194 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _20194 + 68] = mem[idx + _19969 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_20194 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _20194 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _18985 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _18985 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _18985 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_18985 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_17343 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _17343 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _17343 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _21933 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _17343 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_21933 + 68] = this.address
                                                                    mem[_21933 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _21933 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25857 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25937 = mem[_25857]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25937
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25937
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26177 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26177] == bool(mem[_26177])
                                                                    if mem[_26177]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25937:
                                                                            _26497 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26497] = 26
                                                                            mem[_26497 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26577 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26577 + 68] = mem[idx + _26497 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26577 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26577 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25937 and sub_67a6acd1[stor10[idx]] > -1 / _25937:
                                                                                revert with 0, 17
                                                                            if not _25937:
                                                                                revert with 0, 18
                                                                            if _25937 * sub_67a6acd1[stor10[idx]] / _25937 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26977 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26977] = 26
                                                                            mem[_26977 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27310 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27310 + 68] = mem[idx + _26977 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27310 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27310 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25937 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25937 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25937 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25937 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                    else:
                                                        mem[_11851 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                        t = _11851 + 32
                                                        u = sha3(sha3(tokens[idx], 12))
                                                        while _11851 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                            mem[t + 32] = address(allowance[u])
                                                            t = t + 32
                                                            u = u + 1
                                                            continue 
                                                        mem[0] = tokens[idx]
                                                        mem[32] = 11
                                                        _18635 = mem[64]
                                                        mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 0
                                                        mem[mem[64] + 36] = 128
                                                        mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                        t = 0
                                                        u = _11851 + 32
                                                        v = mem[64] + 164
                                                        while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                            mem[v] = mem[u + 12 len 20]
                                                            t = t + 1
                                                            u = u + 32
                                                            v = v + 32
                                                            continue 
                                                        mem[_18635 + 68] = _marketingWalletAddress
                                                        mem[_18635 + 100] = block.timestamp
                                                        require ext_code.size(sub_00c02d21[stor10[idx]])
                                                        call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                           value 0 / s * marketingFee / sub_dee3d564 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _18635 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        if 0 == s - 1:
                                                            mem[0] = tokens[idx]
                                                            mem[32] = 12
                                                            _22480 = mem[64]
                                                            mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                            mem[_22480] = uint256(sub_47f86dd2[stor10[idx]])
                                                            if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _22541 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22480 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_22541 + 68] = this.address
                                                                mem[_22541 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _22541 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _25859 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _25939 = mem[_25859]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _25939
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _25939
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _26179 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_26179] == bool(mem[_26179])
                                                                if mem[_26179]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _25939:
                                                                        _26499 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26499] = 26
                                                                        mem[_26499 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _26579 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _26579 + 68] = mem[idx + _26499 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_26579 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _26579 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _25939 and sub_67a6acd1[stor10[idx]] > -1 / _25939:
                                                                            revert with 0, 17
                                                                        if not _25939:
                                                                            revert with 0, 18
                                                                        if _25939 * sub_67a6acd1[stor10[idx]] / _25939 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _26979 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_26979] = 26
                                                                        mem[_26979 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _27314 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _27314 + 68] = mem[idx + _26979 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_27314 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _27314 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _25939 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _25939 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _25939 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_25939 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                mem[_22480 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                s = _22480 + 32
                                                                t = sha3(sha3(tokens[idx], 12))
                                                                while _22480 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                    mem[s + 32] = address(allowance[t])
                                                                    s = s + 32
                                                                    t = t + 1
                                                                    continue 
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 11
                                                                _28257 = mem[64]
                                                                mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 0
                                                                mem[mem[64] + 36] = 128
                                                                mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                s = 0
                                                                t = _22480 + 32
                                                                u = mem[64] + 164
                                                                while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[u] = mem[t + 12 len 20]
                                                                    s = s + 1
                                                                    t = t + 32
                                                                    u = u + 32
                                                                    continue 
                                                                mem[_28257 + 68] = this.address
                                                                mem[_28257 + 100] = block.timestamp
                                                                require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                   value eth.balance(this.address) wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _28257 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                mem[mem[64] + 4] = this.address
                                                                require ext_code.size(tokens[idx])
                                                                staticcall tokens[idx].0x70a08231 with:
                                                                        gas gas_remaining wei
                                                                       args this.address
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30370 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _30410 = mem[_30370]
                                                                mem[mem[64] + 4] = dividendTrackerAddress
                                                                mem[mem[64] + 36] = _30410
                                                                require ext_code.size(tokens[idx])
                                                                call tokens[idx].0xa9059cbb with:
                                                                     gas gas_remaining wei
                                                                    args dividendTrackerAddress, _30410
                                                                mem[mem[64]] = ext_call.return_data[0]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _30530 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                require mem[_30530] == bool(mem[_30530])
                                                                if mem[_30530]:
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 14
                                                                    if not _30410:
                                                                        _30690 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30690] = 26
                                                                        mem[_30690 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _30730 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _30730 + 68] = mem[idx + _30690 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_30730 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _30730 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                    else:
                                                                        if _30410 and sub_67a6acd1[stor10[idx]] > -1 / _30410:
                                                                            revert with 0, 17
                                                                        if not _30410:
                                                                            revert with 0, 18
                                                                        if _30410 * sub_67a6acd1[stor10[idx]] / _30410 != sub_67a6acd1[stor10[idx]]:
                                                                            revert with 0, 'SafeMath: multiplication overflow'
                                                                        _30930 = mem[64]
                                                                        mem[64] = mem[64] + 64
                                                                        mem[_30930] = 26
                                                                        mem[_30930 + 32] = 'SafeMath: division by zero'
                                                                        if not sub_fe4e4cc1[stor10[idx]]:
                                                                            _31096 = mem[64]
                                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                            mem[mem[64] + 4] = 32
                                                                            mem[mem[64] + 36] = 26
                                                                            idx = 0
                                                                            while idx < 26:
                                                                                mem[idx + _31096 + 68] = mem[idx + _30930 + 32]
                                                                                idx = idx + 32
                                                                                continue 
                                                                            mem[_31096 + 94] = 0
                                                                            revert with memory
                                                                              from mem[64]
                                                                               len _31096 + -mem[64] + 100
                                                                        mem[mem[64] + 4] = _30410 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        mem[mem[64] + 36] = tokens[idx]
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                             gas gas_remaining wei
                                                                            args _30410 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                        if not ext_call.success:
                                                                            revert with ext_call.return_data[0 len return_data.size]
                                                                        mem[mem[64]] = _30410 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                        emit 0x12d20dff: (_30410 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                        else:
                                                            if not 0 / s:
                                                                _22587 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22587] = 26
                                                                mem[_22587 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22726 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22726 + 68] = mem[idx + _22587 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22726 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22726 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23016 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23016] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23122 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23016 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_23122 + 68] = this.address
                                                                    mem[_23122 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23122 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25861 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25941 = mem[_25861]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25941
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25941
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26181 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26181] == bool(mem[_26181])
                                                                    if mem[_26181]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25941:
                                                                            _26501 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26501] = 26
                                                                            mem[_26501 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26581 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26581 + 68] = mem[idx + _26501 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26581 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26581 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25941 and sub_67a6acd1[stor10[idx]] > -1 / _25941:
                                                                                revert with 0, 17
                                                                            if not _25941:
                                                                                revert with 0, 18
                                                                            if _25941 * sub_67a6acd1[stor10[idx]] / _25941 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26981 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26981] = 26
                                                                            mem[_26981 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27318 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27318 + 68] = mem[idx + _26981 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27318 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27318 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25941 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25941 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25941 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25941 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23016 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    s = _23016 + 32
                                                                    t = sha3(sha3(tokens[idx], 12))
                                                                    while _23016 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > s:
                                                                        mem[s + 32] = address(allowance[t])
                                                                        s = s + 32
                                                                        t = t + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28261 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    s = 0
                                                                    t = _23016 + 32
                                                                    u = mem[64] + 164
                                                                    while s < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[u] = mem[t + 12 len 20]
                                                                        s = s + 1
                                                                        t = t + 32
                                                                        u = u + 32
                                                                        continue 
                                                                    mem[_28261 + 68] = this.address
                                                                    mem[_28261 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28261 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30372 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30412 = mem[_30372]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30412
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30412
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30532 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30532] == bool(mem[_30532])
                                                                    if mem[_30532]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30412:
                                                                            _30692 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30692] = 26
                                                                            mem[_30692 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30732 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30732 + 68] = mem[idx + _30692 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30732 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30732 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30412 and sub_67a6acd1[stor10[idx]] > -1 / _30412:
                                                                                revert with 0, 17
                                                                            if not _30412:
                                                                                revert with 0, 18
                                                                            if _30412 * sub_67a6acd1[stor10[idx]] / _30412 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30932 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30932] = 26
                                                                            mem[_30932 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31100 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31100 + 68] = mem[idx + _30932 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31100 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31100 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30412 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30412 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30412 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30412 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                            else:
                                                                if 0 / s and rewardsFee > -1 / 0 / s:
                                                                    revert with 0, 17
                                                                if not 0 / s:
                                                                    revert with 0, 18
                                                                if 0 / s * rewardsFee / 0 / s != rewardsFee:
                                                                    revert with 0, 'SafeMath: multiplication overflow'
                                                                _22900 = mem[64]
                                                                mem[64] = mem[64] + 64
                                                                mem[_22900] = 26
                                                                mem[_22900 + 32] = 'SafeMath: division by zero'
                                                                if not sub_dee3d564:
                                                                    _22934 = mem[64]
                                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 32
                                                                    mem[mem[64] + 36] = 26
                                                                    idx = 0
                                                                    while idx < 26:
                                                                        mem[idx + _22934 + 68] = mem[idx + _22900 + 32]
                                                                        idx = idx + 32
                                                                        continue 
                                                                    mem[_22934 + 94] = 0
                                                                    revert with memory
                                                                      from mem[64]
                                                                       len _22934 + -mem[64] + 100
                                                                mem[0] = tokens[idx]
                                                                mem[32] = 12
                                                                _23319 = mem[64]
                                                                mem[64] = mem[64] + (32 * uint256(sub_47f86dd2[stor10[idx]])) + 32
                                                                mem[_23319] = uint256(sub_47f86dd2[stor10[idx]])
                                                                if not uint256(sub_47f86dd2[stor10[idx]]):
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _23359 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23319 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_23359 + 68] = this.address
                                                                    mem[_23359 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _23359 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _25860 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _25940 = mem[_25860]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _25940
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _25940
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _26180 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_26180] == bool(mem[_26180])
                                                                    if mem[_26180]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _25940:
                                                                            _26500 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26500] = 26
                                                                            mem[_26500 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _26580 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _26580 + 68] = mem[idx + _26500 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_26580 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _26580 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _25940 and sub_67a6acd1[stor10[idx]] > -1 / _25940:
                                                                                revert with 0, 17
                                                                            if not _25940:
                                                                                revert with 0, 18
                                                                            if _25940 * sub_67a6acd1[stor10[idx]] / _25940 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _26980 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_26980] = 26
                                                                            mem[_26980 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _27316 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _27316 + 68] = mem[idx + _26980 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_27316 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _27316 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _25940 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _25940 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _25940 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_25940 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                else:
                                                                    mem[_23319 + 32] = address(sub_47f86dd2[stor10[idx]])
                                                                    t = _23319 + 32
                                                                    u = sha3(sha3(tokens[idx], 12))
                                                                    while _23319 + (32 * uint256(sub_47f86dd2[stor10[idx]])) > t:
                                                                        mem[t + 32] = address(allowance[u])
                                                                        t = t + 32
                                                                        u = u + 1
                                                                        continue 
                                                                    mem[0] = tokens[idx]
                                                                    mem[32] = 11
                                                                    _28259 = mem[64]
                                                                    mem[mem[64]] = 0xb6f9de9500000000000000000000000000000000000000000000000000000000
                                                                    mem[mem[64] + 4] = 0
                                                                    mem[mem[64] + 36] = 128
                                                                    mem[mem[64] + 132] = uint256(sub_47f86dd2[stor10[idx]])
                                                                    t = 0
                                                                    u = _23319 + 32
                                                                    v = mem[64] + 164
                                                                    while t < uint256(sub_47f86dd2[stor10[idx]]):
                                                                        mem[v] = mem[u + 12 len 20]
                                                                        t = t + 1
                                                                        u = u + 32
                                                                        v = v + 32
                                                                        continue 
                                                                    mem[_28259 + 68] = this.address
                                                                    mem[_28259 + 100] = block.timestamp
                                                                    require ext_code.size(sub_00c02d21[stor10[idx]])
                                                                    call sub_00c02d21[stor10[idx]].mem[mem[64] len 4] with:
                                                                       value 0 / s * rewardsFee / sub_dee3d564 wei
                                                                         gas gas_remaining wei
                                                                        args mem[mem[64] + 4 len _28259 + (32 * uint256(sub_47f86dd2[stor10[idx]])) + -mem[64] + 160]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    mem[mem[64] + 4] = this.address
                                                                    require ext_code.size(tokens[idx])
                                                                    staticcall tokens[idx].0x70a08231 with:
                                                                            gas gas_remaining wei
                                                                           args this.address
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30371 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    _30411 = mem[_30371]
                                                                    mem[mem[64] + 4] = dividendTrackerAddress
                                                                    mem[mem[64] + 36] = _30411
                                                                    require ext_code.size(tokens[idx])
                                                                    call tokens[idx].0xa9059cbb with:
                                                                         gas gas_remaining wei
                                                                        args dividendTrackerAddress, _30411
                                                                    mem[mem[64]] = ext_call.return_data[0]
                                                                    if not ext_call.success:
                                                                        revert with ext_call.return_data[0 len return_data.size]
                                                                    _30531 = mem[64]
                                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                                    require return_data.size >= 32
                                                                    require mem[_30531] == bool(mem[_30531])
                                                                    if mem[_30531]:
                                                                        mem[0] = tokens[idx]
                                                                        mem[32] = 14
                                                                        if not _30411:
                                                                            _30691 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30691] = 26
                                                                            mem[_30691 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _30731 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _30731 + 68] = mem[idx + _30691 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_30731 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _30731 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args 0 / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = 0 / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (0 / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                                                        else:
                                                                            if _30411 and sub_67a6acd1[stor10[idx]] > -1 / _30411:
                                                                                revert with 0, 17
                                                                            if not _30411:
                                                                                revert with 0, 18
                                                                            if _30411 * sub_67a6acd1[stor10[idx]] / _30411 != sub_67a6acd1[stor10[idx]]:
                                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                                            _30931 = mem[64]
                                                                            mem[64] = mem[64] + 64
                                                                            mem[_30931] = 26
                                                                            mem[_30931 + 32] = 'SafeMath: division by zero'
                                                                            if not sub_fe4e4cc1[stor10[idx]]:
                                                                                _31098 = mem[64]
                                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                                mem[mem[64] + 4] = 32
                                                                                mem[mem[64] + 36] = 26
                                                                                idx = 0
                                                                                while idx < 26:
                                                                                    mem[idx + _31098 + 68] = mem[idx + _30931 + 32]
                                                                                    idx = idx + 32
                                                                                    continue 
                                                                                mem[_31098 + 94] = 0
                                                                                revert with memory
                                                                                  from mem[64]
                                                                                   len _31098 + -mem[64] + 100
                                                                            mem[mem[64] + 4] = _30411 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            mem[mem[64] + 36] = tokens[idx]
                                                                            require ext_code.size(dividendTrackerAddress)
                                                                            call dividendTrackerAddress.distributeDividends(uint256 arg1, address arg2) with:
                                                                                 gas gas_remaining wei
                                                                                args _30411 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]], tokens[idx]
                                                                            if not ext_call.success:
                                                                                revert with ext_call.return_data[0 len return_data.size]
                                                                            mem[mem[64]] = _30411 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]
                                                                            emit 0x12d20dff: (_30411 * sub_67a6acd1[stor10[idx]] / sub_fe4e4cc1[stor10[idx]]), tokens[idx]
                                        if idx == -1:
                                            revert with 0, 17
                                        idx = idx + 1
                                        continue 
                                    stor7 = 0
                                    mem[0] = msg.sender
                                    mem[32] = 25
                                    if stor25[address(msg.sender)]:
                                        if not msg.sender:
                                            revert with 0, 'ERC20: transfer from the zero address'
                                        if not arg1:
                                            revert with 0, 'ERC20: transfer to the zero address'
                                        _10904 = mem[64]
                                        mem[64] = mem[64] + 96
                                        mem[_10904] = 38
                                        mem[_10904 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                        if arg2 > balanceOf[address(msg.sender)]:
                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 32
                                            mem[mem[64] + 36] = 38
                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10904 + 70 len 26]
                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                        if balanceOf[address(msg.sender)] < arg2:
                                            revert with 0, 17
                                        balanceOf[address(msg.sender)] -= arg2
                                        if balanceOf[arg1] > !arg2:
                                            revert with 0, 17
                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                        emit Transfer(arg2, msg.sender, arg1);
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args msg.sender, balanceOf[address(msg.sender)]
                                        mem[0] = arg1
                                        mem[32] = 0
                                        require ext_code.size(dividendTrackerAddress)
                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                             gas gas_remaining wei
                                            args address(arg1), balanceOf[address(arg1)]
                                        if not ext_call.success:
                                            if not ext_call.success:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11510 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11618 = mem[_11510 + 32]
                                                        _11619 = mem[_11510 + 64]
                                                        mem[mem[64]] = mem[_11510]
                                                        mem[mem[64] + 64] = _11619
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11618, _11619, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11565 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11700 = mem[_11565 + 32]
                                                        _11701 = mem[_11565 + 64]
                                                        mem[mem[64]] = mem[_11565]
                                                        mem[mem[64] + 64] = _11701
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11700, _11701, gasForProcessing, 1, tx.origin);
                                        else:
                                            if not ext_call.success:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11566 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11704 = mem[_11566 + 32]
                                                        _11705 = mem[_11566 + 64]
                                                        mem[mem[64]] = mem[_11566]
                                                        mem[mem[64] + 64] = _11705
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11704, _11705, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not stor7:
                                                    require ext_code.size(dividendTrackerAddress)
                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                         gas gas_remaining wei
                                                        args gasForProcessing
                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                    if ext_call.success:
                                                        _11622 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 96
                                                        _11826 = mem[_11622 + 32]
                                                        _11827 = mem[_11622 + 64]
                                                        mem[mem[64]] = mem[_11622]
                                                        mem[mem[64] + 64] = _11827
                                                        mem[mem[64] + 96] = gasForProcessing
                                                        emit ProcessedDividendTracker(mem[mem[64]], _11826, _11827, gasForProcessing, 1, tx.origin);
                                    else:
                                        mem[0] = arg1
                                        mem[32] = 25
                                        if stor25[address(arg1)]:
                                            if not msg.sender:
                                                revert with 0, 'ERC20: transfer from the zero address'
                                            if not arg1:
                                                revert with 0, 'ERC20: transfer to the zero address'
                                            _10938 = mem[64]
                                            mem[64] = mem[64] + 96
                                            mem[_10938] = 38
                                            mem[_10938 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                            if arg2 > balanceOf[address(msg.sender)]:
                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                mem[mem[64] + 4] = 32
                                                mem[mem[64] + 36] = 38
                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10938 + 70 len 26]
                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                            if balanceOf[address(msg.sender)] < arg2:
                                                revert with 0, 17
                                            balanceOf[address(msg.sender)] -= arg2
                                            if balanceOf[arg1] > !arg2:
                                                revert with 0, 17
                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                            emit Transfer(arg2, msg.sender, arg1);
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args msg.sender, balanceOf[address(msg.sender)]
                                            mem[0] = arg1
                                            mem[32] = 0
                                            require ext_code.size(dividendTrackerAddress)
                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                 gas gas_remaining wei
                                                args address(arg1), balanceOf[address(arg1)]
                                            if not ext_call.success:
                                                if not ext_call.success:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11572 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11721 = mem[_11572 + 32]
                                                            _11722 = mem[_11572 + 64]
                                                            mem[mem[64]] = mem[_11572]
                                                            mem[mem[64] + 64] = _11722
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11721, _11722, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11633 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11841 = mem[_11633 + 32]
                                                            _11842 = mem[_11633 + 64]
                                                            mem[mem[64]] = mem[_11633]
                                                            mem[mem[64] + 64] = _11842
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11841, _11842, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not ext_call.success:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11634 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11845 = mem[_11634 + 32]
                                                            _11846 = mem[_11634 + 64]
                                                            mem[mem[64]] = mem[_11634]
                                                            mem[mem[64] + 64] = _11846
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11845, _11846, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not stor7:
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                             gas gas_remaining wei
                                                            args gasForProcessing
                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                        if ext_call.success:
                                                            _11725 = mem[64]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 96
                                                            _11940 = mem[_11725 + 32]
                                                            _11941 = mem[_11725 + 64]
                                                            mem[mem[64]] = mem[_11725]
                                                            mem[mem[64] + 64] = _11941
                                                            mem[mem[64] + 96] = gasForProcessing
                                                            emit ProcessedDividendTracker(mem[mem[64]], _11940, _11941, gasForProcessing, 1, tx.origin);
                                        else:
                                            if stor7:
                                                if not msg.sender:
                                                    revert with 0, 'ERC20: transfer from the zero address'
                                                if not arg1:
                                                    revert with 0, 'ERC20: transfer to the zero address'
                                                _10907 = mem[64]
                                                mem[64] = mem[64] + 96
                                                mem[_10907] = 38
                                                mem[_10907 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                if arg2 > balanceOf[address(msg.sender)]:
                                                    mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 32
                                                    mem[mem[64] + 36] = 38
                                                    mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_10907 + 70 len 26]
                                                    revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                if balanceOf[address(msg.sender)] < arg2:
                                                    revert with 0, 17
                                                balanceOf[address(msg.sender)] -= arg2
                                                if balanceOf[arg1] > !arg2:
                                                    revert with 0, 17
                                                if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                emit Transfer(arg2, msg.sender, arg1);
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args msg.sender, balanceOf[address(msg.sender)]
                                                mem[0] = arg1
                                                mem[32] = 0
                                                require ext_code.size(dividendTrackerAddress)
                                                call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                     gas gas_remaining wei
                                                    args address(arg1), balanceOf[address(arg1)]
                                                if not ext_call.success:
                                                    if not ext_call.success:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11513 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11625 = mem[_11513 + 32]
                                                                _11626 = mem[_11513 + 64]
                                                                mem[mem[64]] = mem[_11513]
                                                                mem[mem[64] + 64] = _11626
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11625, _11626, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11568 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11709 = mem[_11568 + 32]
                                                                _11710 = mem[_11568 + 64]
                                                                mem[mem[64]] = mem[_11568]
                                                                mem[mem[64] + 64] = _11710
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11709, _11710, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if not ext_call.success:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11569 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11713 = mem[_11569 + 32]
                                                                _11714 = mem[_11569 + 64]
                                                                mem[mem[64]] = mem[_11569]
                                                                mem[mem[64] + 64] = _11714
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11713, _11714, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not stor7:
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.process(uint256 arg1) with:
                                                                 gas gas_remaining wei
                                                                args gasForProcessing
                                                            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                            if ext_call.success:
                                                                _11629 = mem[64]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 96
                                                                _11830 = mem[_11629 + 32]
                                                                _11831 = mem[_11629 + 64]
                                                                mem[mem[64]] = mem[_11629]
                                                                mem[mem[64] + 64] = _11831
                                                                mem[mem[64] + 96] = gasForProcessing
                                                                emit ProcessedDividendTracker(mem[mem[64]], _11830, _11831, gasForProcessing, 1, tx.origin);
                                            else:
                                                if not arg2:
                                                    _10960 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_10960] = 26
                                                    mem[_10960 + 32] = 'SafeMath: division by zero'
                                                    mem[0] = arg1
                                                    mem[32] = 26
                                                    if not stor26[address(arg1)]:
                                                        _11086 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11086] = 30
                                                        mem[_11086 + 32] = 'SafeMath: subtraction overflow'
                                                        if 0 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < 0:
                                                            revert with 0, 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11385 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11385] = 38
                                                        mem[_11385 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if 0 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11385 + 70 len 26]
                                                            var201001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < 0:
                                                            revert with 0, 17
                                                        if balanceOf[this.address] > -1:
                                                            revert with 0, 17
                                                        if balanceOf[this.address] < balanceOf[this.address]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 0
                                                        balanceOf[address(this.address)] = balanceOf[this.address]
                                                        emit Transfer(0, msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12476 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12476] = 38
                                                        mem[_12476 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12476 + 70 len 26]
                                                            var219001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2:
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] -= arg2
                                                        if balanceOf[arg1] > !arg2:
                                                            revert with 0, 17
                                                        if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                        emit Transfer(arg2, msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13669 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13777 = mem[_13669 + 32]
                                                                        _13778 = mem[_13669 + 64]
                                                                        mem[mem[64]] = mem[_13669]
                                                                        mem[mem[64] + 64] = _13778
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13777, _13778, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13712 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13842 = mem[_13712 + 32]
                                                                        _13843 = mem[_13712 + 64]
                                                                        mem[mem[64]] = mem[_13712]
                                                                        mem[mem[64] + 64] = _13843
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13842, _13843, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13713 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13846 = mem[_13713 + 32]
                                                                        _13847 = mem[_13713 + 64]
                                                                        mem[mem[64]] = mem[_13713]
                                                                        mem[mem[64] + 64] = _13847
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13846, _13847, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _13781 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _13904 = mem[_13781 + 32]
                                                                        _13905 = mem[_13781 + 64]
                                                                        mem[mem[64]] = mem[_13781]
                                                                        mem[mem[64] + 64] = _13905
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _13904, _13905, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not arg2:
                                                            _11185 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11185] = 26
                                                            mem[_11185 + 32] = 'SafeMath: division by zero'
                                                            _11838 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11838] = 30
                                                            mem[_11838 + 32] = 'SafeMath: subtraction overflow'
                                                            if 0 > arg2:
                                                                var207001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < 0:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12404 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12404] = 38
                                                            mem[_12404 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if 0 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12404 + 70 len 26]
                                                                var217001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < 0:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] > -1:
                                                                revert with 0, 17
                                                            if balanceOf[this.address] < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address]
                                                            emit Transfer(0, msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13252 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13252] = 38
                                                            mem[_13252 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13252 + 70 len 26]
                                                                var235001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2
                                                            if balanceOf[arg1] > !arg2:
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2
                                                            emit Transfer(arg2, msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14768 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _14962 = mem[_14768 + 32]
                                                                            _14963 = mem[_14768 + 64]
                                                                            mem[mem[64]] = mem[_14768]
                                                                            mem[mem[64] + 64] = _14963
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _14962, _14963, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14871 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15044 = mem[_14871 + 32]
                                                                            _15045 = mem[_14871 + 64]
                                                                            mem[mem[64]] = mem[_14871]
                                                                            mem[mem[64] + 64] = _15045
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15044, _15045, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14872 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15048 = mem[_14872 + 32]
                                                                            _15049 = mem[_14872 + 64]
                                                                            mem[mem[64]] = mem[_14872]
                                                                            mem[mem[64] + 64] = _15049
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15048, _15049, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _14966 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15114 = mem[_14966 + 32]
                                                                            _15115 = mem[_14966 + 64]
                                                                            mem[mem[64]] = mem[_14966]
                                                                            mem[mem[64] + 64] = _15115
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15114, _15115, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and 1 > -1 / arg2:
                                                                revert with 0, 17
                                                            if not arg2:
                                                                revert with 0, 18
                                                            if arg2 / arg2 != 1:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11388 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11388] = 26
                                                            mem[_11388 + 32] = 'SafeMath: division by zero'
                                                            if 0 > !(arg2 / 100):
                                                                revert with 0, 17
                                                            _12226 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12226] = 30
                                                            mem[_12226 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 / 100 > arg2:
                                                                var213001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 / 100:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12621 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12621] = 38
                                                            mem[_12621 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12621 + 70 len 26]
                                                                var223001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2 / 100
                                                            if balanceOf[this.address] > !(arg2 / 100):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 / 100)
                                                            emit Transfer((arg2 / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13580 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13580] = 38
                                                            mem[_13580 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13580 + 70 len 26]
                                                                var241001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 / 100)
                                                            emit Transfer((arg2 - (arg2 / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15232 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15431 = mem[_15232 + 32]
                                                                            _15432 = mem[_15232 + 64]
                                                                            mem[mem[64]] = mem[_15232]
                                                                            mem[mem[64] + 64] = _15432
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15431, _15432, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15337 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15541 = mem[_15337 + 32]
                                                                            _15542 = mem[_15337 + 64]
                                                                            mem[mem[64]] = mem[_15337]
                                                                            mem[mem[64] + 64] = _15542
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15541, _15542, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15338 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15545 = mem[_15338 + 32]
                                                                            _15546 = mem[_15338 + 64]
                                                                            mem[mem[64]] = mem[_15338]
                                                                            mem[mem[64] + 64] = _15546
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15545, _15546, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15435 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15640 = mem[_15435 + 32]
                                                                            _15641 = mem[_15435 + 64]
                                                                            mem[mem[64]] = mem[_15435]
                                                                            mem[mem[64] + 64] = _15641
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15640, _15641, gasForProcessing, 1, tx.origin);
                                                else:
                                                    if arg2 and totalFees > -1 / arg2:
                                                        revert with 0, 17
                                                    if not arg2:
                                                        revert with 0, 18
                                                    if arg2 * totalFees / arg2 != totalFees:
                                                        revert with 0, 'SafeMath: multiplication overflow'
                                                    _11062 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_11062] = 26
                                                    mem[_11062 + 32] = 'SafeMath: division by zero'
                                                    mem[0] = arg1
                                                    mem[32] = 26
                                                    if not stor26[address(arg1)]:
                                                        _11236 = mem[64]
                                                        mem[64] = mem[64] + 64
                                                        mem[_11236] = 30
                                                        mem[_11236 + 32] = 'SafeMath: subtraction overflow'
                                                        if arg2 * totalFees / 100 > arg2:
                                                            revert with 0, 'SafeMath: subtraction overflow', 0
                                                        if arg2 < arg2 * totalFees / 100:
                                                            revert with 0, 17
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not this.address:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _11832 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_11832] = 38
                                                        mem[_11832 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_11832 + 70 len 26]
                                                            var207001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                        if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                            revert with 0, 17
                                                        if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        mem[0] = this.address
                                                        mem[32] = 0
                                                        balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                        if not msg.sender:
                                                            revert with 0, 'ERC20: transfer from the zero address'
                                                        if not arg1:
                                                            revert with 0, 'ERC20: transfer to the zero address'
                                                        _12726 = mem[64]
                                                        mem[64] = mem[64] + 96
                                                        mem[_12726] = 38
                                                        mem[_12726 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                        if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 32
                                                            mem[mem[64] + 36] = 38
                                                            mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12726 + 70 len 26]
                                                            var225001 = 64
                                                            revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                        if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                            revert with 0, 17
                                                        balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                        if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                            revert with 0, 17
                                                        if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                        emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args msg.sender, balanceOf[address(msg.sender)]
                                                        mem[0] = arg1
                                                        mem[32] = 0
                                                        require ext_code.size(dividendTrackerAddress)
                                                        call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                             gas gas_remaining wei
                                                            args address(arg1), balanceOf[address(arg1)]
                                                        if not ext_call.success:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14048 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14202 = mem[_14048 + 32]
                                                                        _14203 = mem[_14048 + 64]
                                                                        mem[mem[64]] = mem[_14048]
                                                                        mem[mem[64] + 64] = _14203
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14202, _14203, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14117 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14282 = mem[_14117 + 32]
                                                                        _14283 = mem[_14117 + 64]
                                                                        mem[mem[64]] = mem[_14117]
                                                                        mem[mem[64] + 64] = _14283
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14282, _14283, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if not ext_call.success:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14118 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14286 = mem[_14118 + 32]
                                                                        _14287 = mem[_14118 + 64]
                                                                        mem[mem[64]] = mem[_14118]
                                                                        mem[mem[64] + 64] = _14287
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14286, _14287, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not stor7:
                                                                    require ext_code.size(dividendTrackerAddress)
                                                                    call dividendTrackerAddress.process(uint256 arg1) with:
                                                                         gas gas_remaining wei
                                                                        args gasForProcessing
                                                                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                    if ext_call.success:
                                                                        _14206 = mem[64]
                                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                                        require return_data.size >= 96
                                                                        _14348 = mem[_14206 + 32]
                                                                        _14349 = mem[_14206 + 64]
                                                                        mem[mem[64]] = mem[_14206]
                                                                        mem[mem[64] + 64] = _14349
                                                                        mem[mem[64] + 96] = gasForProcessing
                                                                        emit ProcessedDividendTracker(mem[mem[64]], _14348, _14349, gasForProcessing, 1, tx.origin);
                                                    else:
                                                        if not arg2:
                                                            _11384 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11384] = 26
                                                            mem[_11384 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * totalFees / 100 > -1:
                                                                revert with 0, 17
                                                            _12222 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12222] = 30
                                                            mem[_12222 + 32] = 'SafeMath: subtraction overflow'
                                                            if arg2 * totalFees / 100 > arg2:
                                                                var213001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < arg2 * totalFees / 100:
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12618 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12618] = 38
                                                            mem[_12618 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 * totalFees / 100 > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12618 + 70 len 26]
                                                                var223001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 * totalFees / 100:
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] -= arg2 * totalFees / 100
                                                            if balanceOf[this.address] > !(arg2 * totalFees / 100):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 * totalFees / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 * totalFees / 100), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13573 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13573] = 38
                                                            mem[_13573 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * totalFees / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13573 + 70 len 26]
                                                                var241001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15229 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15424 = mem[_15229 + 32]
                                                                            _15425 = mem[_15229 + 64]
                                                                            mem[mem[64]] = mem[_15229]
                                                                            mem[mem[64] + 64] = _15425
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15424, _15425, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15334 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15532 = mem[_15334 + 32]
                                                                            _15533 = mem[_15334 + 64]
                                                                            mem[mem[64]] = mem[_15334]
                                                                            mem[mem[64] + 64] = _15533
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15532, _15533, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15335 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15536 = mem[_15335 + 32]
                                                                            _15537 = mem[_15335 + 64]
                                                                            mem[mem[64]] = mem[_15335]
                                                                            mem[mem[64] + 64] = _15537
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15536, _15537, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15428 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15636 = mem[_15428 + 32]
                                                                            _15637 = mem[_15428 + 64]
                                                                            mem[mem[64]] = mem[_15428]
                                                                            mem[mem[64] + 64] = _15637
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15636, _15637, gasForProcessing, 1, tx.origin);
                                                        else:
                                                            if arg2 and 1 > -1 / arg2:
                                                                revert with 0, 17
                                                            if not arg2:
                                                                revert with 0, 18
                                                            if arg2 / arg2 != 1:
                                                                revert with 0, 'SafeMath: multiplication overflow'
                                                            _11835 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_11835] = 26
                                                            mem[_11835 + 32] = 'SafeMath: division by zero'
                                                            if arg2 * totalFees / 100 > !(arg2 / 100):
                                                                revert with 0, 17
                                                            _12475 = mem[64]
                                                            mem[64] = mem[64] + 64
                                                            mem[_12475] = 30
                                                            mem[_12475 + 32] = 'SafeMath: subtraction overflow'
                                                            if (arg2 * totalFees / 100) + (arg2 / 100) > arg2:
                                                                var219001 = 32
                                                                revert with 0, 'SafeMath: subtraction overflow', 0
                                                            if arg2 < (arg2 * totalFees / 100) + (arg2 / 100):
                                                                revert with 0, 17
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not this.address:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _12920 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_12920] = 38
                                                            mem[_12920 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if (arg2 * totalFees / 100) + (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_12920 + 70 len 26]
                                                                var229001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < (arg2 * totalFees / 100) + (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - (arg2 * totalFees / 100) - (arg2 / 100)
                                                            if balanceOf[this.address] > !((arg2 * totalFees / 100) + (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100) < balanceOf[this.address]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            mem[0] = this.address
                                                            mem[32] = 0
                                                            balanceOf[address(this.address)] = balanceOf[this.address] + (arg2 * totalFees / 100) + (arg2 / 100)
                                                            emit Transfer(((arg2 * totalFees / 100) + (arg2 / 100)), msg.sender, this.address);
                                                            if not msg.sender:
                                                                revert with 0, 'ERC20: transfer from the zero address'
                                                            if not arg1:
                                                                revert with 0, 'ERC20: transfer to the zero address'
                                                            _13966 = mem[64]
                                                            mem[64] = mem[64] + 96
                                                            mem[_13966] = 38
                                                            mem[_13966 + 32 len 38] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63
                                                            if arg2 - (arg2 * totalFees / 100) - (arg2 / 100) > balanceOf[address(msg.sender)]:
                                                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 32
                                                                mem[mem[64] + 36] = 38
                                                                mem[mem[64] + 68 len 64] = 0xfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63, mem[_13966 + 70 len 26]
                                                                var247001 = 64
                                                                revert with 0, 32, 38, mem[mem[64] + 68 len 38], 0
                                                            if balanceOf[address(msg.sender)] < arg2 - (arg2 * totalFees / 100) - (arg2 / 100):
                                                                revert with 0, 17
                                                            balanceOf[address(msg.sender)] = balanceOf[address(msg.sender)] - arg2 + (arg2 * totalFees / 100) + (arg2 / 100)
                                                            if balanceOf[arg1] > !(arg2 - (arg2 * totalFees / 100) - (arg2 / 100)):
                                                                revert with 0, 17
                                                            if balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100) < balanceOf[arg1]:
                                                                revert with 0, 'SafeMath: addition overflow'
                                                            balanceOf[address(arg1)] = balanceOf[arg1] + arg2 - (arg2 * totalFees / 100) - (arg2 / 100)
                                                            emit Transfer((arg2 - (arg2 * totalFees / 100) - (arg2 / 100)), msg.sender, arg1);
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args msg.sender, balanceOf[address(msg.sender)]
                                                            mem[0] = arg1
                                                            mem[32] = 0
                                                            require ext_code.size(dividendTrackerAddress)
                                                            call dividendTrackerAddress.setBalance(address arg1, uint256 arg2) with:
                                                                 gas gas_remaining wei
                                                                args address(arg1), balanceOf[address(arg1)]
                                                            if not ext_call.success:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15770 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _15990 = mem[_15770 + 32]
                                                                            _15991 = mem[_15770 + 64]
                                                                            mem[mem[64]] = mem[_15770]
                                                                            mem[mem[64] + 64] = _15991
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _15990, _15991, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15895 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16080 = mem[_15895 + 32]
                                                                            _16081 = mem[_15895 + 64]
                                                                            mem[mem[64]] = mem[_15895]
                                                                            mem[mem[64] + 64] = _16081
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16080, _16081, gasForProcessing, 1, tx.origin);
                                                            else:
                                                                if not ext_call.success:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15896 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16084 = mem[_15896 + 32]
                                                                            _16085 = mem[_15896 + 64]
                                                                            mem[mem[64]] = mem[_15896]
                                                                            mem[mem[64] + 64] = _16085
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16084, _16085, gasForProcessing, 1, tx.origin);
                                                                else:
                                                                    if not stor7:
                                                                        require ext_code.size(dividendTrackerAddress)
                                                                        call dividendTrackerAddress.process(uint256 arg1) with:
                                                                             gas gas_remaining wei
                                                                            args gasForProcessing
                                                                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                                                                        if ext_call.success:
                                                                            _15994 = mem[64]
                                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                                            require return_data.size >= 96
                                                                            _16150 = mem[_15994 + 32]
                                                                            _16151 = mem[_15994 + 64]
                                                                            mem[mem[64]] = mem[_15994]
                                                                            mem[mem[64] + 64] = _16151
                                                                            mem[mem[64] + 96] = gasForProcessing
                                                                            emit ProcessedDividendTracker(mem[mem[64]], _16150, _16151, gasForProcessing, 1, tx.origin);
    return 1
}



}
