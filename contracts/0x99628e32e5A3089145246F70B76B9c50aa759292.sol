contract main {




// =====================  Runtime code  =====================


#
#  - getSupplyData()
#  - burn(address arg1, uint256 arg2)
#  - mint(address arg1, address arg2, uint256 arg3, uint256 arg4)
#
const DEBT_TOKEN_REVISION = 1


mapping of uint256 principalBalanceOf;
uint256 stor2;
array of uint256 name;
array of uint256 symbol;
uint8 decimals;
address POOLAddress; offset 8
address UNDERLYING_ASSET_ADDRESS;
uint256 stor7;
uint8 stor8;
mapping of uint256 borrowAllowance;
uint256 averageStableRate;
mapping of uint64 userLastUpdated;
mapping of uint256 userStableRate;
uint64 totalSupplyLastUpdated;
address incentivesControllerAddress; offset 40

function name() payable {
    return name[0 len name.length]
}

function decimals() payable {
    return decimals
}

function borrowAllowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return borrowAllowance[address(arg1)][address(arg2)]
}

function POOL() payable {
    return POOLAddress
}

function getIncentivesController() payable {
    return incentivesControllerAddress
}

function getUserLastUpdated(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return userLastUpdated[address(arg1)]
}

function getAverageStableRate() payable {
    return averageStableRate
}

function symbol() payable {
    return symbol[0 len symbol.length]
}

function UNDERLYING_ASSET_ADDRESS() payable {
    return UNDERLYING_ASSET_ADDRESS
}

function principalBalanceOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return principalBalanceOf[address(arg1)]
}

function getTotalSupplyLastUpdated() payable {
    return totalSupplyLastUpdated
}

function getUserStableRate(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return userStableRate[address(arg1)]
}

function _fallback() payable {
    revert
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    revert with 0, 'APPROVAL_NOT_SUPPORTED'
}

function transfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    revert with 0, 'TRANSFER_NOT_SUPPORTED'
}

function increaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    revert with 0, 'ALLOWANCE_NOT_SUPPORTED'
}

function decreaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    revert with 0, 'ALLOWANCE_NOT_SUPPORTED'
}

function allowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    revert with 0, 'ALLOWANCE_NOT_SUPPORTED'
}

function transferFrom(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    revert with 0, 'TRANSFER_NOT_SUPPORTED'
}

function approveDelegation(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    borrowAllowance[address(msg.sender)][address(arg1)] = arg2
    emit BorrowAllowanceDelegated(UNDERLYING_ASSET_ADDRESS, arg2, msg.sender, arg1);
}

function getAssetPrice() payable {
    require ext_code.size(POOLAddress)
    staticcall POOLAddress.0xfe65acfe with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0xfca513a8 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0xb3596f07 with:
            gas gas_remaining wei
           args UNDERLYING_ASSET_ADDRESS
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function initialize(address arg1, address arg2, address arg3, uint8 arg4, string arg5, string arg6, bytes arg7) payable {
    require calldata.size - 4 >= 224
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    require arg4 == arg4
    require arg5 <= test266151307()
    require arg5 + 35 < calldata.size
    require arg5.length <= test266151307()
    require ceil32(arg5.length) + 128 >= 96 and ceil32(arg5.length) + 128 <= test266151307()
    require calldata.size >= arg5.length + arg5 + 36
    mem[128 len arg5.length] = arg5[all]
    mem[arg5.length + 128] = 0
    require arg6 <= test266151307()
    require arg6 + 35 < calldata.size
    require arg6.length <= test266151307()
    require ceil32(arg6.length) + 160 >= 128 and ceil32(arg5.length) + ceil32(arg6.length) + 160 <= test266151307()
    mem[ceil32(arg5.length) + 128] = arg6.length
    require calldata.size >= arg6.length + arg6 + 36
    mem[ceil32(arg5.length) + 160 len arg6.length] = arg6[all]
    mem[ceil32(arg5.length) + arg6.length + 160] = 0
    require arg7 <= test266151307()
    require arg7 + 35 < calldata.size
    require arg7.length <= test266151307()
    require arg7 + arg7.length + 36 <= calldata.size
    if not stor8:
        if ext_code.size(this.address):
            if 1 <= stor7:
                revert with 0, 'Contract instance has already been initialized'
        if not stor8:
            stor8 = 1
            stor7 = 1
    if arg5.length:
        name[] = Array(len=arg5.length, data=arg5[all])
    else:
        name.length = 0
        idx = 0
        while name.length + 31 / 32 > idx:
            name[idx] = 0
            idx = idx + 1
            continue 
    if arg6.length:
        symbol[] = Array(len=arg6.length, data=arg6[all])
    else:
        symbol.length = 0
        idx = 0
        while symbol.length + 31 / 32 > idx:
            symbol[idx] = 0
            idx = idx + 1
            continue 
    decimals = arg4
    POOLAddress = arg1
    UNDERLYING_ASSET_ADDRESS = arg2
    incentivesControllerAddress = arg3
    mem[ceil32(arg5.length) + ceil32(arg6.length) + 160] = arg3
    mem[ceil32(arg5.length) + ceil32(arg6.length) + 192] = arg4
    mem[ceil32(arg5.length) + ceil32(arg6.length) + 224] = 160
    mem[ceil32(arg5.length) + ceil32(arg6.length) + 320] = arg5.length
    mem[ceil32(arg5.length) + ceil32(arg6.length) + 352 len ceil32(arg5.length)] = arg5[all], mem[arg5.length + 128 len ceil32(arg5.length) - arg5.length]
    if ceil32(arg5.length) > arg5.length:
        mem[ceil32(arg5.length) + ceil32(arg6.length) + arg5.length + 352] = 0
    mem[ceil32(arg5.length) + ceil32(arg6.length) + 256] = ceil32(arg5.length) + 192
    mem[(2 * ceil32(arg5.length)) + ceil32(arg6.length) + 352] = Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)]
    mem[(2 * ceil32(arg5.length)) + ceil32(arg6.length) + 384 len ceil32(Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)])] = mem[ceil32(arg5.length) + 160 len ceil32(Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)])]
    if ceil32(Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)]) > Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)]:
        mem[(2 * ceil32(arg5.length)) + ceil32(arg6.length) + Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)] + 384] = 0
    mem[ceil32(arg5.length) + ceil32(arg6.length) + 288] = ceil32(Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)]) + ceil32(arg5.length) + 224
    mem[ceil32(Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)]) + (2 * ceil32(arg5.length)) + ceil32(arg6.length) + 384] = arg7.length
    mem[ceil32(Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)]) + (2 * ceil32(arg5.length)) + ceil32(arg6.length) + 416 len arg7.length] = arg7[all]
    mem[ceil32(Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)]) + (2 * ceil32(arg5.length)) + ceil32(arg6.length) + arg7.length + 416] = 0
    emit Initialized(address arg1, address arg2, address arg3, uint8 arg4, string arg5, string arg6, bytes arg7):
                     mem[ceil32(arg5.length) + ceil32(arg6.length) + 160 len ceil32(Mask(8 * -ceil32(arg5.length) + arg5.length + 32, 0, 0), mem[arg5.length + 160 len -arg5.length + ceil32(arg5.length)]) + ceil32(arg5.length) + ceil32(arg7.length) + 256],
                     arg2,
                     arg1,
    if not stor8:
        stor8 = 0
}

function totalSupply() payable {
    if not stor2:
        return 0
    if totalSupplyLastUpdated > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if not block.timestamp - totalSupplyLastUpdated:
        if not stor2:
            return 0
        if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if block.timestamp - totalSupplyLastUpdated <= 2:
        if not averageStableRate / 8760 * 24 * 3600:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if not averageStableRate / 8760 * 24 * 3600:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if averageStableRate / 8760 * 24 * 3600 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / averageStableRate / 8760 * 24 * 3600:
            revert with 0, '', 0
        if (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            if averageStableRate / 8760 * 24 * 3600:
                if (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / averageStableRate / 8760 * 24 * 3600:
                    revert with 0, '', 0
        if not block.timestamp - totalSupplyLastUpdated:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if not averageStableRate / 8760 * 24 * 3600:
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if not stor2:
                return 0
            if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if not averageStableRate / 8760 * 24 * 3600:
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if not stor2:
                return 0
            if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if averageStableRate / 8760 * 24 * 3600 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / averageStableRate / 8760 * 24 * 3600:
        revert with 0, '', 0
    if not (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        if not block.timestamp - totalSupplyLastUpdated:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if not averageStableRate / 8760 * 24 * 3600:
        if not block.timestamp - totalSupplyLastUpdated:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / averageStableRate / 8760 * 24 * 3600:
        revert with 0, '', 0
    if not block.timestamp - totalSupplyLastUpdated:
        if not block.timestamp - totalSupplyLastUpdated:
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) != ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
        revert with 0, 'SafeMath: multiplication overflow'
    if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
        if not block.timestamp - totalSupplyLastUpdated:
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) != ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        revert with 0, 'SafeMath: multiplication overflow'
    if not block.timestamp - totalSupplyLastUpdated:
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
        revert with 0, 'SafeMath: multiplication overflow'
    if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) != ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        revert with 0, 'SafeMath: multiplication overflow'
    if not averageStableRate / 8760 * 24 * 3600:
        if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
            return 0
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
        revert with 0, 'SafeMath: multiplication overflow'
    if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
        revert with 0, 'SafeMath: addition overflow'
    if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if not stor2:
        return 0
    if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
        return 0
    if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
        revert with 0, '', 0
    return ((1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18)
}

function getTotalSupplyAndAvgRate() payable {
    if not stor2:
        return 0, averageStableRate
    if totalSupplyLastUpdated > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if not block.timestamp - totalSupplyLastUpdated:
        if not stor2:
            return 0, averageStableRate
        if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
    if block.timestamp - totalSupplyLastUpdated <= 2:
        if not averageStableRate / 8760 * 24 * 3600:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if not averageStableRate / 8760 * 24 * 3600:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if averageStableRate / 8760 * 24 * 3600 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / averageStableRate / 8760 * 24 * 3600:
            revert with 0, '', 0
        if (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            if averageStableRate / 8760 * 24 * 3600:
                if (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / averageStableRate / 8760 * 24 * 3600:
                    revert with 0, '', 0
        if not block.timestamp - totalSupplyLastUpdated:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if not averageStableRate / 8760 * 24 * 3600:
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if not stor2:
                return 0, averageStableRate
            if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if not averageStableRate / 8760 * 24 * 3600:
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if not stor2:
                return 0, averageStableRate
            if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if averageStableRate / 8760 * 24 * 3600 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / averageStableRate / 8760 * 24 * 3600:
        revert with 0, '', 0
    if not (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        if not block.timestamp - totalSupplyLastUpdated:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if not averageStableRate / 8760 * 24 * 3600:
        if not block.timestamp - totalSupplyLastUpdated:
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if block.timestamp - totalSupplyLastUpdated:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - totalSupplyLastUpdated:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / averageStableRate / 8760 * 24 * 3600:
        revert with 0, '', 0
    if not block.timestamp - totalSupplyLastUpdated:
        if not block.timestamp - totalSupplyLastUpdated:
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) != ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
        revert with 0, 'SafeMath: multiplication overflow'
    if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
        if not block.timestamp - totalSupplyLastUpdated:
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
            if not averageStableRate / 8760 * 24 * 3600:
                if not stor2:
                    return 0, averageStableRate
                if stor2 > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return (1000000000 * 10^18 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, averageStableRate
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) != ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        revert with 0, 'SafeMath: multiplication overflow'
    if not block.timestamp - totalSupplyLastUpdated:
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) / block.timestamp - totalSupplyLastUpdated != block.timestamp + -totalSupplyLastUpdated - 1:
        revert with 0, 'SafeMath: multiplication overflow'
    if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated):
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated) + (block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp) - (block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * totalSupplyLastUpdated) != block.timestamp + -totalSupplyLastUpdated - 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated):
        if not averageStableRate / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not stor2:
                return 0, averageStableRate
            if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0, averageStableRate
            if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
                   averageStableRate
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * totalSupplyLastUpdated) - (2 * block.timestamp * block.timestamp) + (2 * totalSupplyLastUpdated * block.timestamp) + (2 * block.timestamp * totalSupplyLastUpdated) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (totalSupplyLastUpdated * block.timestamp * block.timestamp) - (block.timestamp * totalSupplyLastUpdated * block.timestamp) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated) - (block.timestamp * block.timestamp * totalSupplyLastUpdated) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated) != ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        revert with 0, 'SafeMath: multiplication overflow'
    if not averageStableRate / 8760 * 24 * 3600:
        if ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not stor2:
            return 0, averageStableRate
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
            return 0, averageStableRate
        if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
            revert with 0, '', 0
        return (1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
               averageStableRate
    if (block.timestamp * averageStableRate / 8760 * 24 * 3600) - (totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) / averageStableRate / 8760 * 24 * 3600 != block.timestamp - totalSupplyLastUpdated:
        revert with 0, 'SafeMath: multiplication overflow'
    if (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
        revert with 0, 'SafeMath: addition overflow'
    if (-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if not stor2:
        return 0, averageStableRate
    if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
        return 0, averageStableRate
    if stor2 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600) + 1000000000 * 10^18:
        revert with 0, '', 0
    return (1000000000 * 10^18 * stor2) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * block.timestamp * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * block.timestamp * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * totalSupplyLastUpdated * totalSupplyLastUpdated * ((averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * stor2) + ((-1 * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (totalSupplyLastUpdated * block.timestamp * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (totalSupplyLastUpdated * totalSupplyLastUpdated * (averageStableRate / 8760 * 24 * 3600 * averageStableRate / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * stor2) + (block.timestamp * averageStableRate / 8760 * 24 * 3600 * stor2) + (-1 * totalSupplyLastUpdated * averageStableRate / 8760 * 24 * 3600 * stor2) + 500000000 * 10^18 / 1000000000 * 10^18, 
           averageStableRate
}

function balanceOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not principalBalanceOf[address(arg1)]:
        return 0
    if userLastUpdated[address(arg1)] > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow', 0
    if not block.timestamp - userLastUpdated[address(arg1)]:
        if not principalBalanceOf[address(arg1)]:
            return 0
        if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if block.timestamp - userLastUpdated[address(arg1)] <= 2:
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if userStableRate[address(arg1)] / 8760 * 24 * 3600 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / userStableRate[address(arg1)] / 8760 * 24 * 3600:
            revert with 0, '', 0
        if (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            if userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / userStableRate[address(arg1)] / 8760 * 24 * 3600:
                    revert with 0, '', 0
        if not block.timestamp - userLastUpdated[address(arg1)]:
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - userLastUpdated[address(arg1)]:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    revert with 0, 'SafeMath: multiplication overflow'
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
        if block.timestamp - userLastUpdated[address(arg1)]:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - userLastUpdated[address(arg1)]:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if not principalBalanceOf[address(arg1)]:
                return 0
            if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
        if block.timestamp - userLastUpdated[address(arg1)]:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                if 0 / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - userLastUpdated[address(arg1)]:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if not principalBalanceOf[address(arg1)]:
                return 0
            if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if userStableRate[address(arg1)] / 8760 * 24 * 3600 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / userStableRate[address(arg1)] / 8760 * 24 * 3600:
        revert with 0, '', 0
    if not (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        if not block.timestamp - userLastUpdated[address(arg1)]:
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - userLastUpdated[address(arg1)]:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
        if not block.timestamp - userLastUpdated[address(arg1)]:
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
            if block.timestamp - userLastUpdated[address(arg1)]:
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                    revert with 0, 'SafeMath: multiplication overflow'
                if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
                        revert with 0, 'SafeMath: multiplication overflow'
                    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                            revert with 0, 'SafeMath: multiplication overflow'
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if block.timestamp - userLastUpdated[address(arg1)]:
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
                revert with 0, 'SafeMath: multiplication overflow'
            if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
                    revert with 0, 'SafeMath: multiplication overflow'
                if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                    if 0 / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
                        revert with 0, 'SafeMath: multiplication overflow'
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / userStableRate[address(arg1)] / 8760 * 24 * 3600:
        revert with 0, '', 0
    if not block.timestamp - userLastUpdated[address(arg1)]:
        if not block.timestamp - userLastUpdated[address(arg1)]:
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
        revert with 0, 'SafeMath: multiplication overflow'
    if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
        if not block.timestamp - userLastUpdated[address(arg1)]:
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
            revert with 0, 'SafeMath: multiplication overflow'
        if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
            revert with 0, 'SafeMath: multiplication overflow'
        if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
            if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
                if not principalBalanceOf[address(arg1)]:
                    return 0
                if principalBalanceOf[address(arg1)] > 0x4f3a68dbc8f03f243baf513267aa9a3ee524f8e028:
                    revert with 0, '', 0
                return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
                revert with 0, 'SafeMath: multiplication overflow'
            if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
            revert with 0, 'SafeMath: multiplication overflow'
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        revert with 0, 'SafeMath: multiplication overflow'
    if not block.timestamp - userLastUpdated[address(arg1)]:
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / block.timestamp - userLastUpdated[address(arg1)] != block.timestamp + -userLastUpdated[address(arg1)] - 1:
        revert with 0, 'SafeMath: multiplication overflow'
    if not -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) / -block.timestamp - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)]) + (block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != block.timestamp + -userLastUpdated[address(arg1)] - 2:
        revert with 0, 'SafeMath: multiplication overflow'
    if not (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]):
        if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
            if ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not principalBalanceOf[address(arg1)]:
                return 0
            if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                return 0
            if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
                revert with 0, '', 0
            return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
            revert with 0, 'SafeMath: multiplication overflow'
        if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp) - (2 * userLastUpdated[address(arg1)]) - (2 * block.timestamp * block.timestamp) + (2 * userLastUpdated[address(arg1)] * block.timestamp) + (2 * block.timestamp * userLastUpdated[address(arg1)]) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp) + (block.timestamp * block.timestamp * block.timestamp) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)]) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)]) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)]) != ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18:
        revert with 0, 'SafeMath: multiplication overflow'
    if not userStableRate[address(arg1)] / 8760 * 24 * 3600:
        if ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18 < 1000000000 * 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not principalBalanceOf[address(arg1)]:
            return 0
        if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
            return 0
        if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + 1000000000 * 10^18:
            revert with 0, '', 0
        return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
    if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) - (userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) / userStableRate[address(arg1)] / 8760 * 24 * 3600 != block.timestamp - userLastUpdated[address(arg1)]:
        revert with 0, 'SafeMath: multiplication overflow'
    if (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18 < 1000000000 * 10^18:
        revert with 0, 'SafeMath: addition overflow'
    if (-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if (-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if not principalBalanceOf[address(arg1)]:
        return 0
    if not ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
        return 0
    if principalBalanceOf[address(arg1)] > 0xfffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff / ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 1000000000 * 10^18:
        revert with 0, '', 0
    return ((1000000000 * 10^18 * principalBalanceOf[address(arg1)]) + ((-231584178474632390847141970017375815706539969331281128078915168015826259279870 * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (2 * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (2 * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * block.timestamp * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * block.timestamp * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * ((userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 6 * principalBalanceOf[address(arg1)]) + ((-1 * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (block.timestamp * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (userLastUpdated[address(arg1)] * block.timestamp * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) - (block.timestamp * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) + (userLastUpdated[address(arg1)] * userLastUpdated[address(arg1)] * (userStableRate[address(arg1)] / 8760 * 24 * 3600 * userStableRate[address(arg1)] / 8760 * 24 * 3600) + 500000000 * 10^18 / 1000000000 * 10^18) / 2 * principalBalanceOf[address(arg1)]) + (block.timestamp * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + (-1 * userLastUpdated[address(arg1)] * userStableRate[address(arg1)] / 8760 * 24 * 3600 * principalBalanceOf[address(arg1)]) + 500000000 * 10^18 / 1000000000 * 10^18)
}



}
