contract main {




// =====================  Runtime code  =====================


#
#  - withdraw(uint256 arg1)
#  - sub_8dc5b6fb(?)
#  - migrate(address arg1)
#  - _fallback()
#
const decimals = 18

const sub_d2802be5(?) = 1

const withdrawFee = 15


mapping of uint256 balanceOf;
uint256 totalSupply;
array of struct stor3;
array of struct stor4;
address owner;
mapping of struct strategyInfo;
mapping of uint8 stor8;
array of struct stor9;
uint256 sub_5e8f09aa;
uint256 sub_66f2b1a7;
address governmentAddress;
address sub_97091078Address;
address sub_d7959960Address;
address USDTAddress;
uint256 stor16;
address stor18;
address stor19;
address stor20;
address stor21;
address stor22;
address stor23;

function totalSupply() {
    return totalSupply
}

function government() {
    return governmentAddress
}

function sub_5e8f09aa(?) {
    return sub_5e8f09aa
}

function sub_66f2b1a7(?) {
    return sub_66f2b1a7
}

function balanceOf(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)]
}

function owner() {
    return owner
}

function sub_97091078(?) {
    return sub_97091078Address
}

function USDT() {
    return USDTAddress
}

function sub_d7959960(?) {
    return sub_d7959960Address
}

function getStrategyInfo(uint256 arg1) {
    require calldata.size - 4 >= 32
    return strategyInfo[arg1].field_0, 
           strategyInfo[arg1].field_256,
           strategyInfo[arg1].field_1792,
           strategyInfo[arg1].field_1536,
           strategyInfo[arg1].field_1280,
           strategyInfo[arg1].field_512
}

function getCurrentStrategy() {
    return stor22, stor23, stor20, stor19, stor18, stor16
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function approve(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Approve is not supporting for share tokens.'
}

function transfer(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Transfer is not supporting for share tokens.'
}

function allowance(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Allowance is not supporting for share tokens.'
}

function increaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                'IncreaseAllowance is not supporting for share tokens.'
}

function decreaseAllowance(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                'DecreaseAllowance is not supporting for share tokens.'
}

function transferFrom(address arg1, address arg2, uint256 arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'TransferFrom is not supporting for share tokens.'
}

function sub_463b4b70(?) {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    call msg.sender with:
       value eth.balance(this.address) wei
         gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function setGovernment(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    'The address of government can not be a zero address'
    governmentAddress = arg1
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function sub_f5da03e8(?) {
    if stor9.length:
        mem[128] = uint256(stor9.field_0)
        idx = 128
        s = 0
        while (32 * stor9.length) + 96 > idx:
            mem[idx + 32] = stor9[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        return Array(len=stor9.length, data=mem[128 len 32 * stor9.length])
    mem[(32 * stor9.length) + 128] = 32
    mem[(32 * stor9.length) + 160] = stor9.length
    mem[(32 * stor9.length) + 192 len 32 * stor9.length] = mem[128 len 32 * stor9.length]
    return memory
      from (32 * stor9.length) + 128
       len (96 * stor9.length) + 64
}

function earn() {
    require ext_code.size(stor23)
    staticcall stor23.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor18)
    if stor16 >= 999999:
        call stor18.deposit(uint256 arg1) with:
             gas gas_remaining wei
            args ext_call.return_data[0]
    else:
        call stor18.0xe2bbb158 with:
             gas gas_remaining wei
            args stor16, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    emit Earn(ext_call.return_data[0]);
}

function sub_00d791b5(?) {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(USDTAddress)
    staticcall USDTAddress.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'GrowthVault: USDT balance should be more then 0'
    require ext_code.size(USDTAddress)
    call USDTAddress.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, sub_5e8f09aa
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    sub_5e8f09aa = 0
}

function sub_bd7a107b(?) {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x93f1a40b with:
            gas gas_remaining wei
           args arg3, this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    require ext_code.size(address(arg1))
    call address(arg1).0x441a3e70 with:
         gas gas_remaining wei
        args arg3, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(address(arg2))
    call address(arg2).0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_030bcab3(?) {
    require calldata.size - 4 >= 160
    require arg1 == address(arg1)
    require arg3 == address(arg3)
    require arg4 == address(arg4)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'newStrategy can not be a zero address'
    if not address(arg3):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lpToken can not be a zero address'
    if not address(arg4):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'liquidityRouter can not be a zero address'
    require ext_code.size(address(arg3))
    staticcall address(arg3).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(arg3))
    staticcall address(arg3).token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    strategyInfo[arg5].field_0 = address(arg4)
    strategyInfo[arg5].field_256 = address(arg3)
    strategyInfo[arg5].field_512 = arg2
    strategyInfo[arg5].field_1280 = address(arg1)
    strategyInfo[arg5].field_1536 = address(ext_call.return_data[0])
    strategyInfo[arg5].field_1792 = ext_call.return_data[12 len 20]
    if not stor8[arg5]:
        stor9.length++
        stor9[stor9.length].field_0 = arg5
        stor8[arg5] = 1
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(arg4), -1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(arg4), -1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function sub_7f5ed9f9(?) {
    require calldata.size - 4 >= 128
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require arg3 == address(arg3)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not address(arg1):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'newStrategy can not be a zero address'
    if not address(arg2):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'lpToken can not be a zero address'
    if not address(arg3):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'liquidityRouter can not be a zero address'
    require ext_code.size(address(arg2))
    staticcall address(arg2).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(arg2))
    staticcall address(arg2).token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    strategyInfo[arg4].field_0 = address(arg3)
    strategyInfo[arg4].field_256 = address(arg2)
    strategyInfo[arg4].field_512 = 999999
    strategyInfo[arg4].field_1280 = address(arg1)
    strategyInfo[arg4].field_1536 = address(ext_call.return_data[0])
    strategyInfo[arg4].field_1792 = ext_call.return_data[12 len 20]
    if not stor8[arg4]:
        stor9.length++
        stor9[stor9.length].field_0 = arg4
        stor8[arg4] = 1
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(arg3), -1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).approve(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args address(arg3), -1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
}

function name() {
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor3.length):
            if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor3.length):
                if 31 < uint255(stor3.length) * 0.5:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor3.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        else:
            if bool(stor3.length) == stor3.length.field_1 < 32:
                revert with 0, 34
            if stor3.length.field_1:
                if 31 < stor3.length.field_1:
                    mem[128] = uint256(stor3.field_0)
                    idx = 128
                    s = 0
                    while stor3.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor3[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)])
                mem[128] = 256 * stor3.length.field_8
        mem[ceil32(uint255(stor3.length) * 0.5) + 192 len ceil32(uint255(stor3.length) * 0.5)] = mem[128 len ceil32(uint255(stor3.length) * 0.5)]
        if ceil32(uint255(stor3.length) * 0.5) > uint255(stor3.length) * 0.5:
            mem[(uint255(stor3.length) * 0.5) + ceil32(uint255(stor3.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor3.length), data=mem[128 len ceil32(uint255(stor3.length) * 0.5)], mem[(2 * ceil32(uint255(stor3.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor3.length) * 0.5)]), 
    if bool(stor3.length) == stor3.length.field_1 < 32:
        revert with 0, 34
    if bool(stor3.length):
        if bool(stor3.length) == uint255(stor3.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor3.length):
            if 31 < uint255(stor3.length) * 0.5:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while (uint255(stor3.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    else:
        if bool(stor3.length) == stor3.length.field_1 < 32:
            revert with 0, 34
        if stor3.length.field_1:
            if 31 < stor3.length.field_1:
                mem[128] = uint256(stor3.field_0)
                idx = 128
                s = 0
                while stor3.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor3[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])
            mem[128] = 256 * stor3.length.field_8
    mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]
    if ceil32(stor3.length.field_1) > stor3.length.field_1:
        mem[stor3.length.field_1 + ceil32(stor3.length.field_1) + 192] = 0
    return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), 
}

function symbol() {
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor4.length):
            if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor4.length):
                if 31 < uint255(stor4.length) * 0.5:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor4.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        else:
            if bool(stor4.length) == stor4.length.field_1 < 32:
                revert with 0, 34
            if stor4.length.field_1:
                if 31 < stor4.length.field_1:
                    mem[128] = uint256(stor4.field_0)
                    idx = 128
                    s = 0
                    while stor4.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor4[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)])
                mem[128] = 256 * stor4.length.field_8
        mem[ceil32(uint255(stor4.length) * 0.5) + 192 len ceil32(uint255(stor4.length) * 0.5)] = mem[128 len ceil32(uint255(stor4.length) * 0.5)]
        if ceil32(uint255(stor4.length) * 0.5) > uint255(stor4.length) * 0.5:
            mem[(uint255(stor4.length) * 0.5) + ceil32(uint255(stor4.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor4.length), data=mem[128 len ceil32(uint255(stor4.length) * 0.5)], mem[(2 * ceil32(uint255(stor4.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor4.length) * 0.5)]), 
    if bool(stor4.length) == stor4.length.field_1 < 32:
        revert with 0, 34
    if bool(stor4.length):
        if bool(stor4.length) == uint255(stor4.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor4.length):
            if 31 < uint255(stor4.length) * 0.5:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while (uint255(stor4.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    else:
        if bool(stor4.length) == stor4.length.field_1 < 32:
            revert with 0, 34
        if stor4.length.field_1:
            if 31 < stor4.length.field_1:
                mem[128] = uint256(stor4.field_0)
                idx = 128
                s = 0
                while stor4.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor4[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])
            mem[128] = 256 * stor4.length.field_8
    mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]
    if ceil32(stor4.length.field_1) > stor4.length.field_1:
        mem[stor4.length.field_1 + ceil32(stor4.length.field_1) + 192] = 0
    return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), 
}

function getTotalCapital() {
    mem[96] = 0
    mem[128] = 0
    mem[160] = 0
    mem[192] = 0
    mem[224] = 0
    mem[256] = 0
    mem[288] = 0
    mem[320] = 0
    mem[352] = 2
    mem[64] = 448
    mem[384 len 64] = call.data[calldata.size len 64]
    idx = 0
    s = 96
    t = 0
    u = 0
    v = 0
    v = 96
    v = 0
    v = 0
    while idx < stor9.length:
        mem[0] = stor9[idx].field_0
        mem[32] = 6
        _232 = mem[64]
        mem[64] = mem[64] + 256
        mem[_232] = strategyInfo[stor9[idx].field_0].field_0
        mem[_232 + 32] = strategyInfo[stor9[idx].field_0].field_256
        mem[_232 + 64] = strategyInfo[stor9[idx].field_0].field_512
        mem[_232 + 96] = strategyInfo[stor9[idx].field_0].field_768
        mem[_232 + 128] = strategyInfo[stor9[idx].field_0].field_1024
        mem[_232 + 160] = strategyInfo[stor9[idx].field_0].field_1280
        mem[_232 + 192] = strategyInfo[stor9[idx].field_0].field_1536
        mem[_232 + 224] = strategyInfo[stor9[idx].field_0].field_1792
        if 999999 > strategyInfo[stor9[idx].field_0].field_512:
            mem[mem[64] + 36] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.0x93f1a40b with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_512, this.address
            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _242 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 64
            _244 = mem[_242]
            if not mem[_242]:
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s
                t = t
                u = u
                v = mem[_242]
                v = _232
                v = stor9[idx].field_0
                v = v
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
            staticcall strategyInfo[stor9[idx].field_0].field_256.getReserves() with:
                    gas gas_remaining wei
            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _261 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 96
            _263 = mem[_261]
            require mem[_261] == mem[_261 + 18 len 14]
            _265 = mem[_261 + 32]
            require mem[_261 + 32] == mem[_261 + 50 len 14]
            require mem[_261 + 64] == mem[_261 + 92 len 4]
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
            staticcall strategyInfo[stor9[idx].field_0].field_256.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _273 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _275 = mem[_273]
            if _244 > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not mem[_273]:
                revert with 0, 18
            if 10^12 * _244 / mem[_273] and Mask(112, 0, _263) > -1 / 10^12 * _244 / mem[_273]:
                revert with 0, 17
            if 10^12 * _244 / mem[_273] and Mask(112, 0, _265) > -1 / 10^12 * _244 / mem[_273]:
                revert with 0, 17
            if 1 >= mem[352]:
                revert with 0, 50
            mem[416] = stor21
            if 0 >= mem[352]:
                revert with 0, 50
            if stor21 == strategyInfo[stor9[idx].field_0].field_1536:
                mem[384] = strategyInfo[stor9[idx].field_0].field_1792
                _291 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _244 / _275 * Mask(112, 0, _265) / 10^12
                mem[mem[64] + 36] = 64
                _298 = mem[352]
                mem[mem[64] + 68] = mem[352]
                s = 0
                t = 384
                u = mem[64] + 100
                while s < _298:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _291 + (32 * _298) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _472 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _478 = mem[_472]
                require mem[_472] <= test266151307()
                require _472 + mem[_472] + 31 < _472 + return_data.size
                _484 = mem[_472 + mem[_472]]
                if mem[_472 + mem[_472]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_472 + mem[_472]]) + 1 < 0 or _472 + ceil32(return_data.size) + ceil32(32 * mem[_472 + mem[_472]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _472 + ceil32(return_data.size) + ceil32(32 * mem[_472 + mem[_472]]) + 1
                mem[_472 + ceil32(return_data.size)] = _484
                require _478 + (32 * _484) + 32 <= return_data.size
                t = _472 + ceil32(return_data.size) + 32
                s = _472 + _478 + 32
                while s < _472 + _478 + (32 * _484) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _484:
                    revert with 0, 50
                _584 = mem[_472 + ceil32(return_data.size) + 64]
                if 10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12 > !mem[_472 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                mem[_232 + 128] = (10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12) + mem[_472 + ceil32(return_data.size) + 64]
                if v > !((10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12) + _584):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _472 + ceil32(return_data.size)
                t = 10^12 * _244 / _275 * Mask(112, 0, _265) / 10^12
                u = 10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12
                v = _244
                v = _232
                v = stor9[idx].field_0
                v = v + (10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12) + _584
                continue 
            mem[384] = strategyInfo[stor9[idx].field_0].field_1536
            if stor21 == strategyInfo[stor9[idx].field_0].field_1792:
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12
                mem[mem[64] + 36] = 64
                _299 = mem[352]
                mem[mem[64] + 68] = mem[352]
                s = 0
                t = 384
                u = mem[64] + 100
                while s < _299:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12, 64, mem[mem[64] + 68 len (32 * _299) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _471 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _477 = mem[_471]
                require mem[_471] <= test266151307()
                require _471 + mem[_471] + 31 < _471 + return_data.size
                _483 = mem[_471 + mem[_471]]
                if mem[_471 + mem[_471]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_471 + mem[_471]]) + 1 < 0 or _471 + ceil32(return_data.size) + ceil32(32 * mem[_471 + mem[_471]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _471 + ceil32(return_data.size) + ceil32(32 * mem[_471 + mem[_471]]) + 1
                mem[_471 + ceil32(return_data.size)] = _483
                require _477 + (32 * _483) + 32 <= return_data.size
                t = _471 + ceil32(return_data.size) + 32
                s = _471 + _477 + 32
                while s < _471 + _477 + (32 * _483) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _483:
                    revert with 0, 50
                _583 = mem[_471 + ceil32(return_data.size) + 64]
                if 10^12 * _244 / _275 * Mask(112, 0, _265) / 10^12 > !mem[_471 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                mem[_232 + 128] = (10^12 * _244 / _275 * Mask(112, 0, _265) / 10^12) + mem[_471 + ceil32(return_data.size) + 64]
                if v > !((10^12 * _244 / _275 * Mask(112, 0, _265) / 10^12) + _583):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _471 + ceil32(return_data.size)
                t = 10^12 * _244 / _275 * Mask(112, 0, _265) / 10^12
                u = 10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12
                v = _244
                v = _232
                v = stor9[idx].field_0
                v = v + (10^12 * _244 / _275 * Mask(112, 0, _265) / 10^12) + _583
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
            staticcall strategyInfo[stor9[idx].field_0].field_1536.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _300 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _304 = mem[_300]
            mem[mem[64] + 4] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
            staticcall strategyInfo[stor9[idx].field_0].field_1536.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _324 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _331 = mem[_324]
            if mem[_324] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _304:
                revert with 0, 18
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_0
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _357 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _363 = mem[_357]
            if 10^12 * _331 / _304 and mem[_357] > -1 / 10^12 * _331 / _304:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _331 / _304 * _363 / 10^12
            mem[mem[64] + 36] = 64
            _376 = mem[352]
            mem[mem[64] + 68] = mem[352]
            t = 0
            u = 384
            w = mem[64] + 100
            while t < _376:
                mem[w] = mem[u + 12 len 20]
                t = t + 1
                u = u + 32
                w = w + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _331 / _304 * _363 / 10^12, 64, mem[mem[64] + 68 len (32 * _376) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _470 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _476 = mem[_470]
            require mem[_470] <= test266151307()
            require _470 + mem[_470] + 31 < _470 + return_data.size
            _482 = mem[_470 + mem[_470]]
            if mem[_470 + mem[_470]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_470 + mem[_470]]) + 1 < 0 or _470 + ceil32(return_data.size) + ceil32(32 * mem[_470 + mem[_470]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _470 + ceil32(return_data.size) + ceil32(32 * mem[_470 + mem[_470]]) + 1
            mem[_470 + ceil32(return_data.size)] = _482
            require _476 + (32 * _482) + 32 <= return_data.size
            u = _470 + ceil32(return_data.size) + 32
            t = _470 + _476 + 32
            while t < _470 + _476 + (32 * _482) + 32:
                mem[u] = mem[t]
                u = u + 32
                t = t + 32
                continue 
            if 1 >= _482:
                revert with 0, 50
            _582 = mem[_470 + ceil32(return_data.size) + 64]
            mem[_232 + 128] = mem[_470 + ceil32(return_data.size) + 64]
            if v > !_582:
                revert with 0, 17
            if 0 >= mem[352]:
                revert with 0, 50
            mem[384] = mem[_232 + 236 len 20]
            _591 = mem[_232 + 224]
            _592 = mem[_232]
            require ext_code.size(mem[_232 + 236 len 20])
            staticcall mem[_232 + 236 len 20].0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _598 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _600 = mem[_598]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_591))
            staticcall address(_591).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _606 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _608 = mem[_606]
            if mem[_606] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _600:
                revert with 0, 18
            mem[mem[64] + 4] = address(_592)
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args address(_592)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _614 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _616 = mem[_614]
            if 10^12 * _608 / _600 and mem[_614] > -1 / 10^12 * _608 / _600:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _608 / _600 * _616 / 10^12
            mem[mem[64] + 36] = 64
            _620 = mem[352]
            mem[mem[64] + 68] = mem[352]
            t = 0
            u = 384
            w = mem[64] + 100
            while t < _620:
                mem[w] = mem[u + 12 len 20]
                t = t + 1
                u = u + 32
                w = w + 32
                continue 
            require ext_code.size(address(_592))
            staticcall address(_592).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _608 / _600 * _616 / 10^12, 64, mem[mem[64] + 68 len (32 * _620) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _648 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _650 = mem[_648]
            require mem[_648] <= test266151307()
            require _648 + mem[_648] + 31 < _648 + return_data.size
            _652 = mem[_648 + mem[_648]]
            if mem[_648 + mem[_648]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_648 + mem[_648]]) + 1 < 0 or _648 + ceil32(return_data.size) + ceil32(32 * mem[_648 + mem[_648]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _648 + ceil32(return_data.size) + ceil32(32 * mem[_648 + mem[_648]]) + 1
            mem[_648 + ceil32(return_data.size)] = _652
            require _650 + (32 * _652) + 32 <= return_data.size
            u = _648 + ceil32(return_data.size) + 32
            t = _648 + _650 + 32
            while t < _648 + _650 + (32 * _652) + 32:
                mem[u] = mem[t]
                u = u + 32
                t = t + 32
                continue 
            if 1 >= _652:
                revert with 0, 50
            if mem[_232 + 128] > !mem[_648 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_232 + 128] = mem[_232 + 128] + mem[_648 + ceil32(return_data.size) + 64]
            if v + _582 > !mem[_232 + 128]:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            t = 10^12 * _244 / _275 * Mask(112, 0, _265) / 10^12
            u = 10^12 * _244 / _275 * Mask(112, 0, _263) / 10^12
            v = _244
            v = _232
            v = stor9[idx].field_0
            v = v + _582 + mem[_232 + 128]
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        staticcall strategyInfo[stor9[idx].field_0].field_1280.info(address arg1) with:
                gas gas_remaining wei
               args this.address
        mem[mem[64] len 320] = ext_call.return_data[0 len 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _241 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 320
        _243 = mem[64]
        if mem[64] + 192 > test266151307() or mem[64] + 192 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 192
        mem[_243] = mem[_241]
        mem[_243 + 32] = mem[_241 + 32]
        mem[_243 + 64] = mem[_241 + 64]
        require return_data.size - 96 >= 96
        _249 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_249] = mem[_241 + 96]
        mem[_249 + 32] = mem[_241 + 128]
        mem[_249 + 64] = mem[_241 + 160]
        mem[_243 + 96] = _249
        mem[_243 + 128] = mem[_241 + 192]
        require return_data.size - 224 >= 96
        _257 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_257] = mem[_241 + 224]
        mem[_257 + 32] = mem[_241 + 256]
        mem[_257 + 64] = mem[_241 + 288]
        mem[_243 + 160] = _257
        _262 = mem[_243 + 64]
        if not mem[_243 + 64]:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            t = t
            u = u
            v = mem[_243 + 64]
            v = _232
            v = stor9[idx].field_0
            v = v
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
        staticcall strategyInfo[stor9[idx].field_0].field_256.getReserves() with:
                gas gas_remaining wei
        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _269 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 96
        _270 = mem[_269]
        require mem[_269] == mem[_269 + 18 len 14]
        _274 = mem[_269 + 32]
        require mem[_269 + 32] == mem[_269 + 50 len 14]
        require mem[_269 + 64] == mem[_269 + 92 len 4]
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
        staticcall strategyInfo[stor9[idx].field_0].field_256.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _279 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _280 = mem[_279]
        if _262 > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not mem[_279]:
            revert with 0, 18
        if 10^12 * _262 / mem[_279] and Mask(112, 0, _270) > -1 / 10^12 * _262 / mem[_279]:
            revert with 0, 17
        if 10^12 * _262 / mem[_279] and Mask(112, 0, _274) > -1 / 10^12 * _262 / mem[_279]:
            revert with 0, 17
        if 1 >= mem[352]:
            revert with 0, 50
        mem[416] = stor21
        if 0 >= mem[352]:
            revert with 0, 50
        if stor21 == strategyInfo[stor9[idx].field_0].field_1536:
            mem[384] = strategyInfo[stor9[idx].field_0].field_1792
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12
            mem[mem[64] + 36] = 64
            _328 = mem[352]
            mem[mem[64] + 68] = mem[352]
            s = 0
            t = 384
            u = mem[64] + 100
            while s < _328:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12, 64, mem[mem[64] + 68 len (32 * _328) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _469 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _475 = mem[_469]
            require mem[_469] <= test266151307()
            require _469 + mem[_469] + 31 < _469 + return_data.size
            _481 = mem[_469 + mem[_469]]
            if mem[_469 + mem[_469]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_469 + mem[_469]]) + 1 < 0 or _469 + ceil32(return_data.size) + ceil32(32 * mem[_469 + mem[_469]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _469 + ceil32(return_data.size) + ceil32(32 * mem[_469 + mem[_469]]) + 1
            mem[_469 + ceil32(return_data.size)] = _481
            require _475 + (32 * _481) + 32 <= return_data.size
            t = _469 + ceil32(return_data.size) + 32
            s = _469 + _475 + 32
            while s < _469 + _475 + (32 * _481) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _481:
                revert with 0, 50
            _581 = mem[_469 + ceil32(return_data.size) + 64]
            if 10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12 > !mem[_469 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_232 + 128] = (10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12) + mem[_469 + ceil32(return_data.size) + 64]
            if v > !((10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12) + _581):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _469 + ceil32(return_data.size)
            t = 10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12
            u = 10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12
            v = _262
            v = _232
            v = stor9[idx].field_0
            v = v + (10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12) + _581
            continue 
        mem[384] = strategyInfo[stor9[idx].field_0].field_1536
        if stor21 == strategyInfo[stor9[idx].field_0].field_1792:
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12
            mem[mem[64] + 36] = 64
            _330 = mem[352]
            mem[mem[64] + 68] = mem[352]
            s = 0
            t = 384
            w = mem[64] + 100
            while s < _330:
                mem[w] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                w = w + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12, 64, mem[mem[64] + 68 len (32 * _330) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _468 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _474 = mem[_468]
            require mem[_468] <= test266151307()
            require _468 + mem[_468] + 31 < _468 + return_data.size
            _480 = mem[_468 + mem[_468]]
            if mem[_468 + mem[_468]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_468 + mem[_468]]) + 1 < 0 or _468 + ceil32(return_data.size) + ceil32(32 * mem[_468 + mem[_468]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _468 + ceil32(return_data.size) + ceil32(32 * mem[_468 + mem[_468]]) + 1
            mem[_468 + ceil32(return_data.size)] = _480
            require _474 + (32 * _480) + 32 <= return_data.size
            t = _468 + ceil32(return_data.size) + 32
            s = _468 + _474 + 32
            while s < _468 + _474 + (32 * _480) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _480:
                revert with 0, 50
            _580 = mem[_468 + ceil32(return_data.size) + 64]
            if 10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12 > !mem[_468 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_232 + 128] = (10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12) + mem[_468 + ceil32(return_data.size) + 64]
            if v > !((10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12) + _580):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _468 + ceil32(return_data.size)
            t = 10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12
            s = 10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12
            v = _262
            v = _232
            v = stor9[idx].field_0
            v = v + (10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12) + _580
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
        staticcall strategyInfo[stor9[idx].field_0].field_1536.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _333 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _338 = mem[_333]
        mem[mem[64] + 4] = this.address
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
        staticcall strategyInfo[stor9[idx].field_0].field_1536.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _346 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _352 = mem[_346]
        if mem[_346] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _338:
            revert with 0, 18
        mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args strategyInfo[stor9[idx].field_0].field_0
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _370 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _375 = mem[_370]
        if 10^12 * _352 / _338 and mem[_370] > -1 / 10^12 * _352 / _338:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _352 / _338 * _375 / 10^12
        mem[mem[64] + 36] = 64
        _381 = mem[352]
        mem[mem[64] + 68] = mem[352]
        t = 0
        u = 384
        w = mem[64] + 100
        while t < _381:
            mem[w] = mem[u + 12 len 20]
            t = t + 1
            u = u + 32
            w = w + 32
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
        staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 10^12 * _352 / _338 * _375 / 10^12, 64, mem[mem[64] + 68 len (32 * _381) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _467 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _473 = mem[_467]
        require mem[_467] <= test266151307()
        require _467 + mem[_467] + 31 < _467 + return_data.size
        _479 = mem[_467 + mem[_467]]
        if mem[_467 + mem[_467]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_467 + mem[_467]]) + 1 < 0 or _467 + ceil32(return_data.size) + ceil32(32 * mem[_467 + mem[_467]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _467 + ceil32(return_data.size) + ceil32(32 * mem[_467 + mem[_467]]) + 1
        mem[_467 + ceil32(return_data.size)] = _479
        require _473 + (32 * _479) + 32 <= return_data.size
        u = _467 + ceil32(return_data.size) + 32
        t = _467 + _473 + 32
        while t < _467 + _473 + (32 * _479) + 32:
            mem[u] = mem[t]
            u = u + 32
            t = t + 32
            continue 
        if 1 >= _479:
            revert with 0, 50
        _579 = mem[_467 + ceil32(return_data.size) + 64]
        mem[_232 + 128] = mem[_467 + ceil32(return_data.size) + 64]
        if v > !_579:
            revert with 0, 17
        if 0 >= mem[352]:
            revert with 0, 50
        mem[384] = mem[_232 + 236 len 20]
        _589 = mem[_232 + 224]
        _590 = mem[_232]
        require ext_code.size(mem[_232 + 236 len 20])
        staticcall mem[_232 + 236 len 20].0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _597 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _599 = mem[_597]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_589))
        staticcall address(_589).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _605 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _607 = mem[_605]
        if mem[_605] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _599:
            revert with 0, 18
        mem[mem[64] + 4] = address(_590)
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args address(_590)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _613 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _615 = mem[_613]
        if 10^12 * _607 / _599 and mem[_613] > -1 / 10^12 * _607 / _599:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _607 / _599 * _615 / 10^12
        mem[mem[64] + 36] = 64
        _619 = mem[352]
        mem[mem[64] + 68] = mem[352]
        t = 0
        u = 384
        w = mem[64] + 100
        while t < _619:
            mem[w] = mem[u + 12 len 20]
            t = t + 1
            u = u + 32
            w = w + 32
            continue 
        require ext_code.size(address(_590))
        staticcall address(_590).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 10^12 * _607 / _599 * _615 / 10^12, 64, mem[mem[64] + 68 len (32 * _619) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _647 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _649 = mem[_647]
        require mem[_647] <= test266151307()
        require _647 + mem[_647] + 31 < _647 + return_data.size
        _651 = mem[_647 + mem[_647]]
        if mem[_647 + mem[_647]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_647 + mem[_647]]) + 1 < 0 or _647 + ceil32(return_data.size) + ceil32(32 * mem[_647 + mem[_647]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _647 + ceil32(return_data.size) + ceil32(32 * mem[_647 + mem[_647]]) + 1
        mem[_647 + ceil32(return_data.size)] = _651
        require _649 + (32 * _651) + 32 <= return_data.size
        u = _647 + ceil32(return_data.size) + 32
        t = _647 + _649 + 32
        while t < _647 + _649 + (32 * _651) + 32:
            mem[u] = mem[t]
            u = u + 32
            t = t + 32
            continue 
        if 1 >= _651:
            revert with 0, 50
        if mem[_232 + 128] > !mem[_647 + ceil32(return_data.size) + 64]:
            revert with 0, 17
        mem[_232 + 128] = mem[_232 + 128] + mem[_647 + ceil32(return_data.size) + 64]
        if v + _579 > !mem[_232 + 128]:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s
        t = 10^12 * _262 / _280 * Mask(112, 0, _274) / 10^12
        u = 10^12 * _262 / _280 * Mask(112, 0, _270) / 10^12
        v = _262
        v = _232
        v = stor9[idx].field_0
        v = v + _579 + mem[_232 + 128]
        continue 
    return v
}

function autoCompound() {
    mem[96] = 2
    mem[128 len 64] = call.data[calldata.size len 64]
    mem[64] = 448
    mem[192] = 0
    mem[224] = 0
    mem[256] = 0
    mem[288] = 0
    mem[320] = 0
    mem[352] = 0
    mem[384] = 0
    mem[416] = 0
    idx = 0
    s = 192
    s = 0
    s = 0
    while idx < stor9.length:
        mem[0] = stor9[idx].field_0
        mem[32] = 6
        _508 = mem[64]
        mem[64] = mem[64] + 256
        mem[_508] = strategyInfo[stor9[idx].field_0].field_0
        mem[_508 + 32] = strategyInfo[stor9[idx].field_0].field_256
        mem[_508 + 64] = strategyInfo[stor9[idx].field_0].field_512
        mem[_508 + 96] = strategyInfo[stor9[idx].field_0].field_768
        mem[_508 + 128] = strategyInfo[stor9[idx].field_0].field_1024
        mem[_508 + 160] = strategyInfo[stor9[idx].field_0].field_1280
        mem[_508 + 192] = strategyInfo[stor9[idx].field_0].field_1536
        mem[_508 + 224] = strategyInfo[stor9[idx].field_0].field_1792
        if 999999 > strategyInfo[stor9[idx].field_0].field_512:
            mem[mem[64] + 36] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.0x93f1a40b with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_512, this.address
            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _519 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 64
            _528 = mem[_519]
            if not mem[_519]:
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _508
                s = mem[_519]
                s = stor9[idx].field_0
                continue 
            mem[0] = stor9[idx].field_0
            mem[32] = 6
            _548 = mem[64]
            mem[64] = mem[64] + 256
            mem[_548] = strategyInfo[stor9[idx].field_0].field_0
            mem[_548 + 32] = strategyInfo[stor9[idx].field_0].field_256
            mem[_548 + 64] = strategyInfo[stor9[idx].field_0].field_512
            mem[_548 + 96] = strategyInfo[stor9[idx].field_0].field_768
            mem[_548 + 128] = strategyInfo[stor9[idx].field_0].field_1024
            mem[_548 + 160] = strategyInfo[stor9[idx].field_0].field_1280
            mem[_548 + 192] = strategyInfo[stor9[idx].field_0].field_1536
            mem[_548 + 224] = strategyInfo[stor9[idx].field_0].field_1792
            if 999999 <= strategyInfo[stor9[idx].field_0].field_512:
                mem[mem[64] + 4] = _528
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
                call strategyInfo[stor9[idx].field_0].field_1280.0x2e1a7d4d with:
                     gas gas_remaining wei
                    args _528
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
                staticcall strategyInfo[stor9[idx].field_0].field_1280.SUSHI() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _583 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _593 = mem[_583]
                require mem[_583] == mem[_583 + 12 len 20]
                if 0 >= mem[96]:
                    revert with 0, 50
                mem[128] = mem[_583 + 12 len 20]
                if 1 >= mem[96]:
                    revert with 0, 50
                mem[160] = stor21
                require ext_code.size(address(_593))
                staticcall address(_593).0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _627 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _631 = mem[_627]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_593))
                staticcall address(_593).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _645 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _653 = mem[_645]
                if mem[_645] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                    revert with 0, 17
                if not _631:
                    revert with 0, 18
                mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args strategyInfo[stor9[idx].field_0].field_0
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _673 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _675 = mem[_673]
                if 10^12 * _653 / _631 and mem[_673] > -1 / 10^12 * _653 / _631:
                    revert with 0, 17
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _653 / _631 * _675 / 10^12
                mem[mem[64] + 36] = 64
                _705 = mem[96]
                mem[mem[64] + 68] = mem[96]
                s = 0
                t = 128
                u = mem[64] + 100
                while s < mem[96]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (32 * _705) + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1294 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1301 = mem[_1294]
                require mem[_1294] <= test266151307()
                require _1294 + mem[_1294] + 31 < _1294 + return_data.size
                _1308 = mem[_1294 + mem[_1294]]
                if mem[_1294 + mem[_1294]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_1294 + mem[_1294]]) + 1 < 0 or _1294 + ceil32(return_data.size) + ceil32(32 * mem[_1294 + mem[_1294]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _1294 + ceil32(return_data.size) + ceil32(32 * mem[_1294 + mem[_1294]]) + 1
                mem[_1294 + ceil32(return_data.size)] = _1308
                require _1301 + (32 * _1308) + 32 <= return_data.size
                t = _1294 + ceil32(return_data.size) + 32
                s = _1294 + _1301 + 32
                while s < _1294 + _1301 + (32 * _1308) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _1308:
                    revert with 0, 50
                _2520 = mem[_1294 + ceil32(return_data.size) + 64]
                if mem[_1294 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_1294 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_1294 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if mem[_1294 + ceil32(return_data.size) + 64] < 100 * mem[_1294 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                _2560 = mem[_508]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_593))
                staticcall address(_593).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2584 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2592 = mem[_2584]
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _2592
                mem[mem[64] + 36] = _2520 - (100 * _2520 / 10000)
                mem[mem[64] + 68] = 160
                _2612 = mem[96]
                mem[mem[64] + 164] = mem[96]
                s = 0
                t = 128
                u = mem[64] + 196
                while s < mem[96]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 100] = this.address
                mem[mem[64] + 132] = block.timestamp + 60
                require ext_code.size(address(_2560))
                call address(_2560).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len 96], address(this.address), block.timestamp + 60, mem[mem[64] + 164 len (32 * _2612) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3836 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3844 = mem[_3836]
                require mem[_3836] <= test266151307()
                require _3836 + mem[_3836] + 31 < _3836 + return_data.size
                _3856 = mem[_3836 + mem[_3836]]
                if mem[_3836 + mem[_3836]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_3836 + mem[_3836]]) + 1 < 0 or _3836 + ceil32(return_data.size) + ceil32(32 * mem[_3836 + mem[_3836]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _3836 + ceil32(return_data.size) + ceil32(32 * mem[_3836 + mem[_3836]]) + 1
                mem[_3836 + ceil32(return_data.size)] = _3856
                require _3844 + (32 * _3856) + 32 <= return_data.size
                t = _3836 + ceil32(return_data.size) + 32
                s = _3836 + _3844 + 32
                while s < _3836 + _3844 + (32 * _3856) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                _5312 = mem[_508]
                _5313 = mem[_508 + 192]
                _5314 = mem[_508 + 224]
                _5324 = mem[64]
                mem[mem[64]] = 2
                mem[64] = mem[64] + 96
                mem[_5324 + 32 len 64] = call.data[calldata.size len 64]
                if not mem[_5324]:
                    revert with 0, 50
                mem[_5324 + 32] = stor21
                if stor21 == address(_5313):
                    if stor21 == address(_5314):
                        mem[_5324 + 100] = this.address
                        require ext_code.size(address(_5313))
                        staticcall address(_5313).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5324 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_5324 + ceil32(return_data.size) + 100] = this.address
                        require ext_code.size(address(_5314))
                        staticcall address(_5314).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5324 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 'Desired value is zero'
                        if not ext_call.return_data[0]:
                            revert with 0, 'Desired value is zero'
                        mem[_5324 + (2 * ceil32(return_data.size)) + 100] = address(_5312)
                        mem[_5324 + (2 * ceil32(return_data.size)) + 132] = -1
                        require ext_code.size(address(_5313))
                        call address(_5313).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_5312), -1
                        mem[_5324 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_5324 + (4 * ceil32(return_data.size)) + 100] = address(_5312)
                        mem[_5324 + (4 * ceil32(return_data.size)) + 132] = -1
                        require ext_code.size(address(_5314))
                        call address(_5314).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_5312), -1
                        mem[_5324 + (4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                            revert with 0, 17
                        if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_5324 + (6 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
                        mem[_5324 + (6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                        mem[_5324 + (6 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                        mem[_5324 + (6 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                        mem[_5324 + (6 * ceil32(return_data.size)) + 292] = this.address
                        mem[_5324 + (6 * ceil32(return_data.size)) + 324] = block.timestamp + 60
                        require ext_code.size(address(_5312))
                        call address(_5312).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args address(_5313), address(_5314), ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
                        mem[_5324 + (6 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5324 + (7 * ceil32(return_data.size)) + 96
                        require return_data.size >= 96
                        _5642 = mem[_508 + 160]
                        _5643 = mem[_508 + 64]
                        _5644 = mem[_508 + 32]
                        mem[_5324 + (7 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_5644))
                        staticcall address(_5644).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5324 + (7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5324 + (8 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        if _5643 >= 999999:
                            mem[_5324 + (8 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                            require ext_code.size(address(_5642))
                            call address(_5642).deposit(uint256 arg1) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5324 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            emit Earn(ext_call.return_data[0]);
                            _5784 = mem[_508 + 32]
                            mem[_5324 + (8 * ceil32(return_data.size)) + 100] = this.address
                            require ext_code.size(address(_5784))
                            staticcall address(_5784).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_5324 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[_508 + 96] = ext_call.return_data[0]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[_5324 + (10 * ceil32(return_data.size)) + 100] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_5324 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5324 + (11 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5994 = mem[_508]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            mem[_5324 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[_5324 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                            mem[_5324 + (11 * ceil32(return_data.size)) + 132] = 128
                            mem[_5324 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                            s = 0
                            t = 128
                            u = _5324 + (11 * ceil32(return_data.size)) + 260
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_5324 + (11 * ceil32(return_data.size)) + 164] = this.address
                            mem[_5324 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                            require ext_code.size(address(_5994))
                            call address(_5994).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                               value ext_call.return_data[0] wei
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_5324 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5324 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5324 + (12 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6892 = mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                            require mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                            require _5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _5324 + (11 * ceil32(return_data.size)) + return_data.size + 96
                            _6908 = mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                            if mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _5324 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                                revert with 0, 65
                            mem[64] = _5324 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                            mem[_5324 + (12 * ceil32(return_data.size)) + 96] = _6908
                            require _6892 + (32 * _6908) + 32 <= return_data.size
                            t = _5324 + (12 * ceil32(return_data.size)) + 128
                            s = _5324 + (11 * ceil32(return_data.size)) + _6892 + 128
                            while s < _5324 + (11 * ceil32(return_data.size)) + _6892 + (32 * _6908) + 128:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8132 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_8132]
                        else:
                            mem[_5324 + (8 * ceil32(return_data.size)) + 100] = _5643
                            mem[_5324 + (8 * ceil32(return_data.size)) + 132] = ext_call.return_data[0]
                            require ext_code.size(address(_5642))
                            call address(_5642).0xe2bbb158 with:
                                 gas gas_remaining wei
                                args _5643, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5324 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            emit Earn(ext_call.return_data[0]);
                            _5785 = mem[_508 + 32]
                            mem[_5324 + (8 * ceil32(return_data.size)) + 100] = this.address
                            require ext_code.size(address(_5785))
                            staticcall address(_5785).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_5324 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[_508 + 96] = ext_call.return_data[0]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[_5324 + (10 * ceil32(return_data.size)) + 100] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_5324 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5324 + (11 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5995 = mem[_508]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            mem[_5324 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[_5324 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                            mem[_5324 + (11 * ceil32(return_data.size)) + 132] = 128
                            mem[_5324 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                            s = 0
                            t = 128
                            u = _5324 + (11 * ceil32(return_data.size)) + 260
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_5324 + (11 * ceil32(return_data.size)) + 164] = this.address
                            mem[_5324 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                            require ext_code.size(address(_5995))
                            call address(_5995).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                               value ext_call.return_data[0] wei
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_5324 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5324 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5324 + (12 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6893 = mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                            require mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                            require _5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _5324 + (11 * ceil32(return_data.size)) + return_data.size + 96
                            _6909 = mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                            if mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _5324 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                                revert with 0, 65
                            mem[64] = _5324 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5324 + (11 * ceil32(return_data.size)) + mem[_5324 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                            mem[_5324 + (12 * ceil32(return_data.size)) + 96] = _6909
                            require _6893 + (32 * _6909) + 32 <= return_data.size
                            t = _5324 + (12 * ceil32(return_data.size)) + 128
                            s = _5324 + (11 * ceil32(return_data.size)) + _6893 + 128
                            while s < _5324 + (11 * ceil32(return_data.size)) + _6893 + (32 * _6909) + 128:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _8133 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_8133]
                    else:
                        if 1 >= mem[_5324]:
                            revert with 0, 50
                        mem[_5324 + 64] = address(_5314)
                        mem[_5324 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_5324 + 100] = eth.balance(this.address) / 2
                        mem[_5324 + 132] = 64
                        mem[_5324 + 164] = mem[_5324]
                        s = 0
                        t = _5324 + 32
                        u = _5324 + 196
                        while s < mem[_5324]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        require ext_code.size(address(_5312))
                        staticcall address(_5312).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _5324 + (32 * mem[_5324]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6882 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6900 = mem[_6882]
                        require mem[_6882] <= test266151307()
                        require _6882 + mem[_6882] + 31 < _6882 + return_data.size
                        _6916 = mem[_6882 + mem[_6882]]
                        if mem[_6882 + mem[_6882]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_6882 + mem[_6882]]) + 1 < 0 or _6882 + ceil32(return_data.size) + ceil32(32 * mem[_6882 + mem[_6882]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _6882 + ceil32(return_data.size) + ceil32(32 * mem[_6882 + mem[_6882]]) + 1
                        mem[_6882 + ceil32(return_data.size)] = _6916
                        require _6900 + (32 * _6916) + 32 <= return_data.size
                        t = _6882 + ceil32(return_data.size) + 32
                        s = _6882 + _6900 + 32
                        while s < _6882 + _6900 + (32 * _6916) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        if 1 >= _6916:
                            revert with 0, 50
                        _8108 = mem[_6882 + ceil32(return_data.size) + 64]
                        if mem[_6882 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_6882 + ceil32(return_data.size) + 64]:
                            revert with 0, 17
                        if mem[_6882 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if 1 >= _6916:
                            revert with 0, 50
                        _8156 = mem[_6882 + ceil32(return_data.size) + 64]
                        if mem[_6882 + ceil32(return_data.size) + 64] < 100 * mem[_6882 + ceil32(return_data.size) + 64] / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _8164 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _8156 - (100 * _8108 / 10000)
                        mem[mem[64] + 36] = 128
                        _8172 = mem[_5324]
                        mem[mem[64] + 132] = mem[_5324]
                        s = 0
                        t = _5324 + 32
                        u = mem[64] + 164
                        while s < _8172:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_8164 + 68] = this.address
                        mem[_8164 + 100] = block.timestamp + 60
                        require ext_code.size(address(_5312))
                        call address(_5312).mem[mem[64] len 4] with:
                           value _8156 - (100 * _8108 / 10000) wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _8164 + (32 * _8172) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9332 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _9340 = mem[_9332]
                        require mem[_9332] <= test266151307()
                        require _9332 + mem[_9332] + 31 < _9332 + return_data.size
                        _9348 = mem[_9332 + mem[_9332]]
                        if mem[_9332 + mem[_9332]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_9332 + mem[_9332]]) + 1 < 0 or _9332 + ceil32(return_data.size) + ceil32(32 * mem[_9332 + mem[_9332]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _9332 + ceil32(return_data.size) + ceil32(32 * mem[_9332 + mem[_9332]]) + 1
                        mem[_9332 + ceil32(return_data.size)] = _9348
                        require _9340 + (32 * _9348) + 32 <= return_data.size
                        t = _9332 + ceil32(return_data.size) + 32
                        s = _9332 + _9340 + 32
                        while s < _9332 + _9340 + (32 * _9348) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_5313))
                        staticcall address(_5313).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10550 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _10560 = mem[_10550]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_5314))
                        staticcall address(_5314).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10594 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _10604 = mem[_10594]
                        if not _10560:
                            revert with 0, 'Desired value is zero'
                        if not mem[_10594]:
                            revert with 0, 'Desired value is zero'
                        mem[mem[64] + 4] = address(_5312)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_5313))
                        call address(_5313).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_5312), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10676 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_10676] == bool(mem[_10676])
                        mem[mem[64] + 4] = address(_5312)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_5314))
                        call address(_5314).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_5312), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10716 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_10716] == bool(mem[_10716])
                        if _10560 and 1 > -1 / _10560:
                            revert with 0, 17
                        if _10560 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _10560 < 100 * _10560 / 10000:
                            revert with 0, 17
                        if _10604 and 1 > -1 / _10604:
                            revert with 0, 17
                        if _10604 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _10604 < 100 * _10604 / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64] + 68] = _10560
                        mem[mem[64] + 100] = _10604
                        mem[mem[64] + 132] = _10560 - (100 * _10560 / 10000)
                        mem[mem[64] + 164] = _10604 - (100 * _10604 / 10000)
                        mem[mem[64] + 196] = this.address
                        mem[mem[64] + 228] = block.timestamp + 60
                        require ext_code.size(address(_5312))
                        call address(_5312).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args address(_5313), address(_5314), _10560, _10604, _10560 - (100 * _10560 / 10000), _10604 - (100 * _10604 / 10000), address(this.address), block.timestamp + 60
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _10834 = mem[_508 + 160]
                        _10835 = mem[_508 + 64]
                        _10836 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_10836))
                        staticcall address(_10836).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10878 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _10890 = mem[_10878]
                        if _10835 >= 999999:
                            mem[mem[64] + 4] = mem[_10878]
                            require ext_code.size(address(_10834))
                            call address(_10834).deposit(uint256 arg1) with:
                                 gas gas_remaining wei
                                args _10890
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _10890
                            emit Earn(_10890);
                            _10974 = mem[_508 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_10974))
                            staticcall address(_10974).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11032 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_508 + 96] = mem[_11032]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11164 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11186 = mem[_11164]
                            _11206 = mem[_508]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _11224 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _11186
                            mem[mem[64] + 36] = 128
                            _11240 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[mem[64] + 68] = this.address
                            mem[_11224 + 100] = block.timestamp + 60
                            require ext_code.size(address(_11206))
                            call address(_11206).mem[mem[64] len 4] with:
                               value _11186 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _11224 + (32 * _11240) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11760 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11780 = mem[_11760]
                            require mem[_11760] <= test266151307()
                            require _11760 + mem[_11760] + 31 < _11760 + return_data.size
                            _11800 = mem[_11760 + mem[_11760]]
                            if mem[_11760 + mem[_11760]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11760 + mem[_11760]]) + 1 < 0 or _11760 + ceil32(return_data.size) + ceil32(32 * mem[_11760 + mem[_11760]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11760 + ceil32(return_data.size) + ceil32(32 * mem[_11760 + mem[_11760]]) + 1
                            mem[_11760 + ceil32(return_data.size)] = _11800
                            require _11780 + (32 * _11800) + 32 <= return_data.size
                            t = _11760 + ceil32(return_data.size) + 32
                            s = _11760 + _11780 + 32
                            while s < _11760 + _11780 + (32 * _11800) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12400 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_12400]
                        else:
                            mem[mem[64] + 4] = _10835
                            mem[mem[64] + 36] = _10890
                            require ext_code.size(address(_10834))
                            call address(_10834).0xe2bbb158 with:
                                 gas gas_remaining wei
                                args _10835, _10890
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _10890
                            emit Earn(_10890);
                            _10975 = mem[_508 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_10975))
                            staticcall address(_10975).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11033 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_508 + 96] = mem[_11033]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11165 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11187 = mem[_11165]
                            _11207 = mem[_508]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _11225 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _11187
                            mem[mem[64] + 36] = 128
                            _11241 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < _11241:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_11225 + 68] = this.address
                            mem[_11225 + 100] = block.timestamp + 60
                            require ext_code.size(address(_11207))
                            call address(_11207).mem[mem[64] len 4] with:
                               value _11187 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _11225 + (32 * _11241) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11761 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11781 = mem[_11761]
                            require mem[_11761] <= test266151307()
                            require _11761 + mem[_11761] + 31 < _11761 + return_data.size
                            _11801 = mem[_11761 + mem[_11761]]
                            if mem[_11761 + mem[_11761]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11761 + mem[_11761]]) + 1 < 0 or _11761 + ceil32(return_data.size) + ceil32(32 * mem[_11761 + mem[_11761]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11761 + ceil32(return_data.size) + ceil32(32 * mem[_11761 + mem[_11761]]) + 1
                            mem[_11761 + ceil32(return_data.size)] = _11801
                            require _11781 + (32 * _11801) + 32 <= return_data.size
                            t = _11761 + ceil32(return_data.size) + 32
                            s = _11761 + _11781 + 32
                            while s < _11761 + _11781 + (32 * _11801) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12401 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_12401]
                else:
                    if 1 >= mem[_5324]:
                        revert with 0, 50
                    mem[_5324 + 64] = address(_5313)
                    mem[_5324 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[_5324 + 100] = eth.balance(this.address) / 2
                    mem[_5324 + 132] = 64
                    mem[_5324 + 164] = mem[_5324]
                    s = 0
                    t = _5324 + 32
                    u = _5324 + 196
                    while s < mem[_5324]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_5312))
                    staticcall address(_5312).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _5324 + (32 * mem[_5324]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6883 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _6901 = mem[_6883]
                    require mem[_6883] <= test266151307()
                    require _6883 + mem[_6883] + 31 < _6883 + return_data.size
                    _6917 = mem[_6883 + mem[_6883]]
                    if mem[_6883 + mem[_6883]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_6883 + mem[_6883]]) + 1 < 0 or _6883 + ceil32(return_data.size) + ceil32(32 * mem[_6883 + mem[_6883]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _6883 + ceil32(return_data.size) + ceil32(32 * mem[_6883 + mem[_6883]]) + 1
                    mem[_6883 + ceil32(return_data.size)] = _6917
                    require _6901 + (32 * _6917) + 32 <= return_data.size
                    t = _6883 + ceil32(return_data.size) + 32
                    s = _6883 + _6901 + 32
                    while s < _6883 + _6901 + (32 * _6917) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _6917:
                        revert with 0, 50
                    _8109 = mem[_6883 + ceil32(return_data.size) + 64]
                    if mem[_6883 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_6883 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_6883 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _6917:
                        revert with 0, 50
                    _8157 = mem[_6883 + ceil32(return_data.size) + 64]
                    if mem[_6883 + ceil32(return_data.size) + 64] < 100 * mem[_6883 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _8165 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _8157 - (100 * _8109 / 10000)
                    mem[mem[64] + 36] = 128
                    _8173 = mem[_5324]
                    mem[mem[64] + 132] = mem[_5324]
                    s = 0
                    t = _5324 + 32
                    u = mem[64] + 164
                    while s < _8173:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_8165 + 68] = this.address
                    mem[_8165 + 100] = block.timestamp + 60
                    require ext_code.size(address(_5312))
                    call address(_5312).mem[mem[64] len 4] with:
                       value _8157 - (100 * _8109 / 10000) wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _8165 + (32 * _8173) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9333 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _9341 = mem[_9333]
                    require mem[_9333] <= test266151307()
                    require _9333 + mem[_9333] + 31 < _9333 + return_data.size
                    _9349 = mem[_9333 + mem[_9333]]
                    if mem[_9333 + mem[_9333]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_9333 + mem[_9333]]) + 1 < 0 or _9333 + ceil32(return_data.size) + ceil32(32 * mem[_9333 + mem[_9333]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _9333 + ceil32(return_data.size) + ceil32(32 * mem[_9333 + mem[_9333]]) + 1
                    mem[_9333 + ceil32(return_data.size)] = _9349
                    require _9341 + (32 * _9349) + 32 <= return_data.size
                    t = _9333 + ceil32(return_data.size) + 32
                    s = _9333 + _9341 + 32
                    while s < _9333 + _9341 + (32 * _9349) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if stor21 == address(_5314):
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_5313))
                        staticcall address(_5313).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10554 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _10566 = mem[_10554]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_5314))
                        staticcall address(_5314).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10598 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _10610 = mem[_10598]
                        if not _10566:
                            revert with 0, 'Desired value is zero'
                        if not mem[_10598]:
                            revert with 0, 'Desired value is zero'
                        mem[mem[64] + 4] = address(_5312)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_5313))
                        call address(_5313).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_5312), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10682 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_10682] == bool(mem[_10682])
                        mem[mem[64] + 4] = address(_5312)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_5314))
                        call address(_5314).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_5312), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10724 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_10724] == bool(mem[_10724])
                        if _10566 and 1 > -1 / _10566:
                            revert with 0, 17
                        if _10566 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _10566 < 100 * _10566 / 10000:
                            revert with 0, 17
                        if _10610 and 1 > -1 / _10610:
                            revert with 0, 17
                        if _10610 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _10610 < 100 * _10610 / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64] + 68] = _10566
                        mem[mem[64] + 100] = _10610
                        mem[mem[64] + 132] = _10566 - (100 * _10566 / 10000)
                        mem[mem[64] + 164] = _10610 - (100 * _10610 / 10000)
                        mem[mem[64] + 196] = this.address
                        mem[mem[64] + 228] = block.timestamp + 60
                        require ext_code.size(address(_5312))
                        call address(_5312).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args address(_5313), address(_5314), _10566, _10610, _10566 - (100 * _10566 / 10000), _10610 - (100 * _10610 / 10000), address(this.address), block.timestamp + 60
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _10852 = mem[_508 + 160]
                        _10853 = mem[_508 + 64]
                        _10854 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_10854))
                        staticcall address(_10854).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10884 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _10896 = mem[_10884]
                        if _10853 >= 999999:
                            mem[mem[64] + 4] = mem[_10884]
                            require ext_code.size(address(_10852))
                            call address(_10852).deposit(uint256 arg1) with:
                                 gas gas_remaining wei
                                args _10896
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _10896
                            emit Earn(_10896);
                            _11004 = mem[_508 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_11004))
                            staticcall address(_11004).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11042 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_508 + 96] = mem[_11042]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11176 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11196 = mem[_11176]
                            _11216 = mem[_508]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _11232 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _11196
                            mem[mem[64] + 36] = 128
                            _11248 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[mem[64] + 68] = this.address
                            mem[_11232 + 100] = block.timestamp + 60
                            require ext_code.size(address(_11216))
                            call address(_11216).mem[mem[64] len 4] with:
                               value _11196 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _11232 + (32 * _11248) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11762 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11782 = mem[_11762]
                            require mem[_11762] <= test266151307()
                            require _11762 + mem[_11762] + 31 < _11762 + return_data.size
                            _11802 = mem[_11762 + mem[_11762]]
                            if mem[_11762 + mem[_11762]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11762 + mem[_11762]]) + 1 < 0 or _11762 + ceil32(return_data.size) + ceil32(32 * mem[_11762 + mem[_11762]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11762 + ceil32(return_data.size) + ceil32(32 * mem[_11762 + mem[_11762]]) + 1
                            mem[_11762 + ceil32(return_data.size)] = _11802
                            require _11782 + (32 * _11802) + 32 <= return_data.size
                            t = _11762 + ceil32(return_data.size) + 32
                            s = _11762 + _11782 + 32
                            while s < _11762 + _11782 + (32 * _11802) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12402 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_12402]
                        else:
                            mem[mem[64] + 4] = _10853
                            mem[mem[64] + 36] = _10896
                            require ext_code.size(address(_10852))
                            call address(_10852).0xe2bbb158 with:
                                 gas gas_remaining wei
                                args _10853, _10896
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _10896
                            emit Earn(_10896);
                            _11005 = mem[_508 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_11005))
                            staticcall address(_11005).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11043 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_508 + 96] = mem[_11043]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11177 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11197 = mem[_11177]
                            _11217 = mem[_508]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _11233 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _11197
                            mem[mem[64] + 36] = 128
                            _11249 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[mem[64] + 68] = this.address
                            mem[_11233 + 100] = block.timestamp + 60
                            require ext_code.size(address(_11217))
                            call address(_11217).mem[mem[64] len 4] with:
                               value _11197 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _11233 + (32 * _11249) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _11763 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _11783 = mem[_11763]
                            require mem[_11763] <= test266151307()
                            require _11763 + mem[_11763] + 31 < _11763 + return_data.size
                            _11803 = mem[_11763 + mem[_11763]]
                            if mem[_11763 + mem[_11763]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_11763 + mem[_11763]]) + 1 < 0 or _11763 + ceil32(return_data.size) + ceil32(32 * mem[_11763 + mem[_11763]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _11763 + ceil32(return_data.size) + ceil32(32 * mem[_11763 + mem[_11763]]) + 1
                            mem[_11763 + ceil32(return_data.size)] = _11803
                            require _11783 + (32 * _11803) + 32 <= return_data.size
                            t = _11763 + ceil32(return_data.size) + 32
                            s = _11763 + _11783 + 32
                            while s < _11763 + _11783 + (32 * _11803) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _12403 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_12403]
                    else:
                        if 1 >= mem[_5324]:
                            revert with 0, 50
                        mem[_5324 + 64] = address(_5314)
                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = eth.balance(this.address) / 2
                        mem[mem[64] + 36] = 64
                        _10570 = mem[_5324]
                        mem[mem[64] + 68] = mem[_5324]
                        s = 0
                        t = _5324 + 32
                        u = mem[64] + 100
                        while s < _10570:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        require ext_code.size(address(_5312))
                        staticcall address(_5312).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args Mask(255, 1, eth.balance(this.address)), 64, mem[mem[64] + 68 len (32 * _10570) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11770 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11790 = mem[_11770]
                        require mem[_11770] <= test266151307()
                        require _11770 + mem[_11770] + 31 < _11770 + return_data.size
                        _11810 = mem[_11770 + mem[_11770]]
                        if mem[_11770 + mem[_11770]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11770 + mem[_11770]]) + 1 < 0 or _11770 + ceil32(return_data.size) + ceil32(32 * mem[_11770 + mem[_11770]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11770 + ceil32(return_data.size) + ceil32(32 * mem[_11770 + mem[_11770]]) + 1
                        mem[_11770 + ceil32(return_data.size)] = _11810
                        require _11790 + (32 * _11810) + 32 <= return_data.size
                        t = _11770 + ceil32(return_data.size) + 32
                        s = _11770 + _11790 + 32
                        while s < _11770 + _11790 + (32 * _11810) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        if 1 >= _11810:
                            revert with 0, 50
                        _12358 = mem[_11770 + ceil32(return_data.size) + 64]
                        if mem[_11770 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_11770 + ceil32(return_data.size) + 64]:
                            revert with 0, 17
                        if mem[_11770 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if 1 >= _11810:
                            revert with 0, 50
                        _12430 = mem[_11770 + ceil32(return_data.size) + 64]
                        if mem[_11770 + ceil32(return_data.size) + 64] < 100 * mem[_11770 + ceil32(return_data.size) + 64] / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _12430 - (100 * _12358 / 10000)
                        mem[mem[64] + 36] = 128
                        _12438 = mem[_5324]
                        mem[mem[64] + 132] = mem[_5324]
                        s = 0
                        t = _5324 + 32
                        u = mem[64] + 164
                        while s < _12438:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[mem[64] + 100] = block.timestamp + 60
                        require ext_code.size(address(_5312))
                        call address(_5312).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value _12430 - (100 * _12358 / 10000) wei
                             gas gas_remaining wei
                            args _12430 - (100 * _12358 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _12438) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12842 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _12846 = mem[_12842]
                        require mem[_12842] <= test266151307()
                        require _12842 + mem[_12842] + 31 < _12842 + return_data.size
                        _12850 = mem[_12842 + mem[_12842]]
                        if mem[_12842 + mem[_12842]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_12842 + mem[_12842]]) + 1 < 0 or _12842 + ceil32(return_data.size) + ceil32(32 * mem[_12842 + mem[_12842]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _12842 + ceil32(return_data.size) + ceil32(32 * mem[_12842 + mem[_12842]]) + 1
                        mem[_12842 + ceil32(return_data.size)] = _12850
                        require _12846 + (32 * _12850) + 32 <= return_data.size
                        t = _12842 + ceil32(return_data.size) + 32
                        s = _12842 + _12846 + 32
                        while s < _12842 + _12846 + (32 * _12850) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_5313))
                        staticcall address(_5313).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13238 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13242 = mem[_13238]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_5314))
                        staticcall address(_5314).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13254 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13258 = mem[_13254]
                        if not _13242:
                            revert with 0, 'Desired value is zero'
                        if not mem[_13254]:
                            revert with 0, 'Desired value is zero'
                        mem[mem[64] + 4] = address(_5312)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_5313))
                        call address(_5313).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_5312), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13286 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_13286] == bool(mem[_13286])
                        mem[mem[64] + 4] = address(_5312)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_5314))
                        call address(_5314).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_5312), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13302 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_13302] == bool(mem[_13302])
                        if _13242 and 1 > -1 / _13242:
                            revert with 0, 17
                        if _13242 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _13242 < 100 * _13242 / 10000:
                            revert with 0, 17
                        if _13258 and 1 > -1 / _13258:
                            revert with 0, 17
                        if _13258 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _13258 < 100 * _13258 / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64] + 68] = _13242
                        mem[mem[64] + 100] = _13258
                        mem[mem[64] + 132] = _13242 - (100 * _13242 / 10000)
                        mem[mem[64] + 164] = _13258 - (100 * _13258 / 10000)
                        mem[mem[64] + 196] = this.address
                        mem[mem[64] + 228] = block.timestamp + 60
                        require ext_code.size(address(_5312))
                        call address(_5312).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args address(_5313), address(_5314), _13242, _13258, _13242 - (100 * _13242 / 10000), _13258 - (100 * _13258 / 10000), address(this.address), block.timestamp + 60
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _13338 = mem[_508 + 160]
                        _13339 = mem[_508 + 64]
                        _13340 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13340))
                        staticcall address(_13340).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13354 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13358 = mem[_13354]
                        if _13339 >= 999999:
                            mem[mem[64] + 4] = mem[_13354]
                            require ext_code.size(address(_13338))
                            call address(_13338).deposit(uint256 arg1) with:
                                 gas gas_remaining wei
                                args _13358
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _13358
                            emit Earn(_13358);
                            _13396 = mem[_508 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_13396))
                            staticcall address(_13396).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13420 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_508 + 96] = mem[_13420]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13468 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _13476 = mem[_13468]
                            _13484 = mem[_508]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _13492 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _13476
                            mem[mem[64] + 36] = 128
                            _13500 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[mem[64] + 68] = this.address
                            mem[_13492 + 100] = block.timestamp + 60
                            require ext_code.size(address(_13484))
                            call address(_13484).mem[mem[64] len 4] with:
                               value _13476 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _13492 + (32 * _13500) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13612 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _13620 = mem[_13612]
                            require mem[_13612] <= test266151307()
                            require _13612 + mem[_13612] + 31 < _13612 + return_data.size
                            _13628 = mem[_13612 + mem[_13612]]
                            if mem[_13612 + mem[_13612]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_13612 + mem[_13612]]) + 1 < 0 or _13612 + ceil32(return_data.size) + ceil32(32 * mem[_13612 + mem[_13612]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _13612 + ceil32(return_data.size) + ceil32(32 * mem[_13612 + mem[_13612]]) + 1
                            mem[_13612 + ceil32(return_data.size)] = _13628
                            require _13620 + (32 * _13628) + 32 <= return_data.size
                            t = _13612 + ceil32(return_data.size) + 32
                            s = _13612 + _13620 + 32
                            while s < _13612 + _13620 + (32 * _13628) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13708 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_13708]
                        else:
                            mem[mem[64] + 4] = _13339
                            mem[mem[64] + 36] = _13358
                            require ext_code.size(address(_13338))
                            call address(_13338).0xe2bbb158 with:
                                 gas gas_remaining wei
                                args _13339, _13358
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _13358
                            emit Earn(_13358);
                            _13397 = mem[_508 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_13397))
                            staticcall address(_13397).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13421 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_508 + 96] = mem[_13421]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13469 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _13477 = mem[_13469]
                            _13485 = mem[_508]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _13493 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _13477
                            mem[mem[64] + 36] = 128
                            _13501 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[mem[64] + 68] = this.address
                            mem[_13493 + 100] = block.timestamp + 60
                            require ext_code.size(address(_13485))
                            call address(_13485).mem[mem[64] len 4] with:
                               value _13477 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _13493 + (32 * _13501) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13613 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _13621 = mem[_13613]
                            require mem[_13613] <= test266151307()
                            require _13613 + mem[_13613] + 31 < _13613 + return_data.size
                            _13629 = mem[_13613 + mem[_13613]]
                            if mem[_13613 + mem[_13613]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_13613 + mem[_13613]]) + 1 < 0 or _13613 + ceil32(return_data.size) + ceil32(32 * mem[_13613 + mem[_13613]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _13613 + ceil32(return_data.size) + ceil32(32 * mem[_13613 + mem[_13613]]) + 1
                            mem[_13613 + ceil32(return_data.size)] = _13629
                            require _13621 + (32 * _13629) + 32 <= return_data.size
                            t = _13613 + ceil32(return_data.size) + 32
                            s = _13613 + _13621 + 32
                            while s < _13613 + _13621 + (32 * _13629) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13709 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_13709]
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _508
                s = _2520 - (100 * _2520 / 10000)
                s = stor9[idx].field_0
                continue 
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_512
            mem[mem[64] + 36] = _528
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            call strategyInfo[stor9[idx].field_0].field_1280.0x441a3e70 with:
                 gas gas_remaining wei
                args strategyInfo[stor9[idx].field_0].field_512, _528
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.SUSHI() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _584 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _594 = mem[_584]
            require mem[_584] == mem[_584 + 12 len 20]
            if 0 >= mem[96]:
                revert with 0, 50
            mem[128] = mem[_584 + 12 len 20]
            if 1 >= mem[96]:
                revert with 0, 50
            mem[160] = stor21
            require ext_code.size(address(_594))
            staticcall address(_594).0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _628 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _632 = mem[_628]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_594))
            staticcall address(_594).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _646 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _654 = mem[_646]
            if mem[_646] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _632:
                revert with 0, 18
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_0
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _674 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _676 = mem[_674]
            if 10^12 * _654 / _632 and mem[_674] > -1 / 10^12 * _654 / _632:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _654 / _632 * _676 / 10^12
            mem[mem[64] + 36] = 64
            _706 = mem[96]
            mem[mem[64] + 68] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 100
            while s < mem[96]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * _706) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1295 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1302 = mem[_1295]
            require mem[_1295] <= test266151307()
            require _1295 + mem[_1295] + 31 < _1295 + return_data.size
            _1309 = mem[_1295 + mem[_1295]]
            if mem[_1295 + mem[_1295]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_1295 + mem[_1295]]) + 1 < 0 or _1295 + ceil32(return_data.size) + ceil32(32 * mem[_1295 + mem[_1295]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1295 + ceil32(return_data.size) + ceil32(32 * mem[_1295 + mem[_1295]]) + 1
            mem[_1295 + ceil32(return_data.size)] = _1309
            require _1302 + (32 * _1309) + 32 <= return_data.size
            t = _1295 + ceil32(return_data.size) + 32
            s = _1295 + _1302 + 32
            while s < _1295 + _1302 + (32 * _1309) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _1309:
                revert with 0, 50
            _2521 = mem[_1295 + ceil32(return_data.size) + 64]
            if mem[_1295 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_1295 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_1295 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if mem[_1295 + ceil32(return_data.size) + 64] < 100 * mem[_1295 + ceil32(return_data.size) + 64] / 10000:
                revert with 0, 17
            _2561 = mem[_508]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_594))
            staticcall address(_594).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2585 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2593 = mem[_2585]
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _2593
            mem[mem[64] + 36] = _2521 - (100 * _2521 / 10000)
            mem[mem[64] + 68] = 160
            _2613 = mem[96]
            mem[mem[64] + 164] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 196
            while s < mem[96]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp + 60
            require ext_code.size(address(_2561))
            call address(_2561).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len 96], address(this.address), block.timestamp + 60, mem[mem[64] + 164 len (32 * _2613) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3837 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3845 = mem[_3837]
            require mem[_3837] <= test266151307()
            require _3837 + mem[_3837] + 31 < _3837 + return_data.size
            _3857 = mem[_3837 + mem[_3837]]
            if mem[_3837 + mem[_3837]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_3837 + mem[_3837]]) + 1 < 0 or _3837 + ceil32(return_data.size) + ceil32(32 * mem[_3837 + mem[_3837]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _3837 + ceil32(return_data.size) + ceil32(32 * mem[_3837 + mem[_3837]]) + 1
            mem[_3837 + ceil32(return_data.size)] = _3857
            require _3845 + (32 * _3857) + 32 <= return_data.size
            t = _3837 + ceil32(return_data.size) + 32
            s = _3837 + _3845 + 32
            while s < _3837 + _3845 + (32 * _3857) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            _5315 = mem[_508]
            _5316 = mem[_508 + 192]
            _5317 = mem[_508 + 224]
            _5326 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            mem[_5326 + 32 len 64] = call.data[calldata.size len 64]
            if not mem[_5326]:
                revert with 0, 50
            mem[_5326 + 32] = stor21
            if stor21 == address(_5316):
                if stor21 == address(_5317):
                    mem[_5326 + 100] = this.address
                    require ext_code.size(address(_5316))
                    staticcall address(_5316).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5326 + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_5326 + ceil32(return_data.size) + 100] = this.address
                    require ext_code.size(address(_5317))
                    staticcall address(_5317).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5326 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 'Desired value is zero'
                    if not ext_call.return_data[0]:
                        revert with 0, 'Desired value is zero'
                    mem[_5326 + (2 * ceil32(return_data.size)) + 100] = address(_5315)
                    mem[_5326 + (2 * ceil32(return_data.size)) + 132] = -1
                    require ext_code.size(address(_5316))
                    call address(_5316).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5315), -1
                    mem[_5326 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    mem[_5326 + (4 * ceil32(return_data.size)) + 100] = address(_5315)
                    mem[_5326 + (4 * ceil32(return_data.size)) + 132] = -1
                    require ext_code.size(address(_5317))
                    call address(_5317).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5315), -1
                    mem[_5326 + (4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                        revert with 0, 17
                    if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                        revert with 0, 17
                    if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                        revert with 0, 17
                    if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[_5326 + (6 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
                    mem[_5326 + (6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                    mem[_5326 + (6 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                    mem[_5326 + (6 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                    mem[_5326 + (6 * ceil32(return_data.size)) + 292] = this.address
                    mem[_5326 + (6 * ceil32(return_data.size)) + 324] = block.timestamp + 60
                    require ext_code.size(address(_5315))
                    call address(_5315).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_5316), address(_5317), ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
                    mem[_5326 + (6 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _5326 + (7 * ceil32(return_data.size)) + 96
                    require return_data.size >= 96
                    _5646 = mem[_508 + 160]
                    _5647 = mem[_508 + 64]
                    _5648 = mem[_508 + 32]
                    mem[_5326 + (7 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(address(_5648))
                    staticcall address(_5648).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5326 + (7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _5326 + (8 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    if _5647 >= 999999:
                        mem[_5326 + (8 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        require ext_code.size(address(_5646))
                        call address(_5646).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5326 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        emit Earn(ext_call.return_data[0]);
                        _5787 = mem[_508 + 32]
                        mem[_5326 + (8 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_5787))
                        staticcall address(_5787).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5326 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_508 + 96] = ext_call.return_data[0]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[_5326 + (10 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5326 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5326 + (11 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5996 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_5326 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[_5326 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        mem[_5326 + (11 * ceil32(return_data.size)) + 132] = 128
                        mem[_5326 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                        s = 0
                        t = 128
                        u = _5326 + (11 * ceil32(return_data.size)) + 260
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_5326 + (11 * ceil32(return_data.size)) + 164] = this.address
                        mem[_5326 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                        require ext_code.size(address(_5996))
                        call address(_5996).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value ext_call.return_data[0] wei
                             gas gas_remaining wei
                            args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_5326 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5326 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _5326 + (12 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _6894 = mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                        require mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                        require _5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _5326 + (11 * ceil32(return_data.size)) + return_data.size + 96
                        _6910 = mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        if mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _5326 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                            revert with 0, 65
                        mem[64] = _5326 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                        mem[_5326 + (12 * ceil32(return_data.size)) + 96] = _6910
                        require _6894 + (32 * _6910) + 32 <= return_data.size
                        t = _5326 + (12 * ceil32(return_data.size)) + 128
                        s = _5326 + (11 * ceil32(return_data.size)) + _6894 + 128
                        while s < _5326 + (11 * ceil32(return_data.size)) + _6894 + (32 * _6910) + 128:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8134 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_8134]
                    else:
                        mem[_5326 + (8 * ceil32(return_data.size)) + 100] = _5647
                        mem[_5326 + (8 * ceil32(return_data.size)) + 132] = ext_call.return_data[0]
                        require ext_code.size(address(_5646))
                        call address(_5646).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _5647, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5326 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        emit Earn(ext_call.return_data[0]);
                        _5788 = mem[_508 + 32]
                        mem[_5326 + (8 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_5788))
                        staticcall address(_5788).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5326 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_508 + 96] = ext_call.return_data[0]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[_5326 + (10 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5326 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5326 + (11 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5997 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_5326 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[_5326 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        mem[_5326 + (11 * ceil32(return_data.size)) + 132] = 128
                        mem[_5326 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                        s = 0
                        t = 128
                        u = _5326 + (11 * ceil32(return_data.size)) + 260
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_5326 + (11 * ceil32(return_data.size)) + 164] = this.address
                        mem[_5326 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                        require ext_code.size(address(_5997))
                        call address(_5997).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value ext_call.return_data[0] wei
                             gas gas_remaining wei
                            args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_5326 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5326 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _5326 + (12 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _6895 = mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                        require mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                        require _5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _5326 + (11 * ceil32(return_data.size)) + return_data.size + 96
                        _6911 = mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        if mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _5326 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                            revert with 0, 65
                        mem[64] = _5326 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5326 + (11 * ceil32(return_data.size)) + mem[_5326 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                        mem[_5326 + (12 * ceil32(return_data.size)) + 96] = _6911
                        require _6895 + (32 * _6911) + 32 <= return_data.size
                        t = _5326 + (12 * ceil32(return_data.size)) + 128
                        s = _5326 + (11 * ceil32(return_data.size)) + _6895 + 128
                        while s < _5326 + (11 * ceil32(return_data.size)) + _6895 + (32 * _6911) + 128:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8135 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_8135]
                else:
                    if 1 >= mem[_5326]:
                        revert with 0, 50
                    mem[_5326 + 64] = address(_5317)
                    mem[_5326 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[_5326 + 100] = eth.balance(this.address) / 2
                    mem[_5326 + 132] = 64
                    mem[_5326 + 164] = mem[_5326]
                    s = 0
                    t = _5326 + 32
                    u = _5326 + 196
                    while s < mem[_5326]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_5315))
                    staticcall address(_5315).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _5326 + (32 * mem[_5326]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6884 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _6902 = mem[_6884]
                    require mem[_6884] <= test266151307()
                    require _6884 + mem[_6884] + 31 < _6884 + return_data.size
                    _6918 = mem[_6884 + mem[_6884]]
                    if mem[_6884 + mem[_6884]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_6884 + mem[_6884]]) + 1 < 0 or _6884 + ceil32(return_data.size) + ceil32(32 * mem[_6884 + mem[_6884]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _6884 + ceil32(return_data.size) + ceil32(32 * mem[_6884 + mem[_6884]]) + 1
                    mem[_6884 + ceil32(return_data.size)] = _6918
                    require _6902 + (32 * _6918) + 32 <= return_data.size
                    t = _6884 + ceil32(return_data.size) + 32
                    s = _6884 + _6902 + 32
                    while s < _6884 + _6902 + (32 * _6918) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _6918:
                        revert with 0, 50
                    _8110 = mem[_6884 + ceil32(return_data.size) + 64]
                    if mem[_6884 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_6884 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_6884 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _6918:
                        revert with 0, 50
                    _8158 = mem[_6884 + ceil32(return_data.size) + 64]
                    if mem[_6884 + ceil32(return_data.size) + 64] < 100 * mem[_6884 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _8158 - (100 * _8110 / 10000)
                    mem[mem[64] + 36] = 128
                    _8174 = mem[_5326]
                    mem[mem[64] + 132] = mem[_5326]
                    s = 0
                    t = _5326 + 32
                    u = mem[64] + 164
                    while s < _8174:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[mem[64] + 100] = block.timestamp + 60
                    require ext_code.size(address(_5315))
                    call address(_5315).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                       value _8158 - (100 * _8110 / 10000) wei
                         gas gas_remaining wei
                        args _8158 - (100 * _8110 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _8174) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9334 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _9342 = mem[_9334]
                    require mem[_9334] <= test266151307()
                    require _9334 + mem[_9334] + 31 < _9334 + return_data.size
                    _9350 = mem[_9334 + mem[_9334]]
                    if mem[_9334 + mem[_9334]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_9334 + mem[_9334]]) + 1 < 0 or _9334 + ceil32(return_data.size) + ceil32(32 * mem[_9334 + mem[_9334]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _9334 + ceil32(return_data.size) + ceil32(32 * mem[_9334 + mem[_9334]]) + 1
                    mem[_9334 + ceil32(return_data.size)] = _9350
                    require _9342 + (32 * _9350) + 32 <= return_data.size
                    t = _9334 + ceil32(return_data.size) + 32
                    s = _9334 + _9342 + 32
                    while s < _9334 + _9342 + (32 * _9350) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5316))
                    staticcall address(_5316).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10551 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10562 = mem[_10551]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5317))
                    staticcall address(_5317).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10595 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10606 = mem[_10595]
                    if not _10562:
                        revert with 0, 'Desired value is zero'
                    if not mem[_10595]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_5315)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5316))
                    call address(_5316).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5315), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10678 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_10678] == bool(mem[_10678])
                    mem[mem[64] + 4] = address(_5315)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5317))
                    call address(_5317).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5315), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10718 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_10718] == bool(mem[_10718])
                    if _10562 and 1 > -1 / _10562:
                        revert with 0, 17
                    if _10562 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _10562 < 100 * _10562 / 10000:
                        revert with 0, 17
                    if _10606 and 1 > -1 / _10606:
                        revert with 0, 17
                    if _10606 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _10606 < 100 * _10606 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _10562
                    mem[mem[64] + 100] = _10606
                    mem[mem[64] + 132] = _10562 - (100 * _10562 / 10000)
                    mem[mem[64] + 164] = _10606 - (100 * _10606 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_5315))
                    call address(_5315).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_5316), address(_5317), _10562, _10606, _10562 - (100 * _10562 / 10000), _10606 - (100 * _10606 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _10837 = mem[_508 + 160]
                    _10838 = mem[_508 + 64]
                    _10839 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_10839))
                    staticcall address(_10839).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10879 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10891 = mem[_10879]
                    if _10838 >= 999999:
                        mem[mem[64] + 4] = mem[_10879]
                        require ext_code.size(address(_10837))
                        call address(_10837).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _10891
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _10891
                        emit Earn(_10891);
                        _10981 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_10981))
                        staticcall address(_10981).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11034 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_11034]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11168 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11189 = mem[_11168]
                        _11209 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _11226 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _11189
                        mem[mem[64] + 36] = 128
                        _11242 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_11226 + 100] = block.timestamp + 60
                        require ext_code.size(address(_11209))
                        call address(_11209).mem[mem[64] len 4] with:
                           value _11189 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11226 + (32 * _11242) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11764 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11784 = mem[_11764]
                        require mem[_11764] <= test266151307()
                        require _11764 + mem[_11764] + 31 < _11764 + return_data.size
                        _11804 = mem[_11764 + mem[_11764]]
                        if mem[_11764 + mem[_11764]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11764 + mem[_11764]]) + 1 < 0 or _11764 + ceil32(return_data.size) + ceil32(32 * mem[_11764 + mem[_11764]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11764 + ceil32(return_data.size) + ceil32(32 * mem[_11764 + mem[_11764]]) + 1
                        mem[_11764 + ceil32(return_data.size)] = _11804
                        require _11784 + (32 * _11804) + 32 <= return_data.size
                        t = _11764 + ceil32(return_data.size) + 32
                        s = _11764 + _11784 + 32
                        while s < _11764 + _11784 + (32 * _11804) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12404 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_12404]
                    else:
                        mem[mem[64] + 4] = _10838
                        mem[mem[64] + 36] = _10891
                        require ext_code.size(address(_10837))
                        call address(_10837).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _10838, _10891
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _10891
                        emit Earn(_10891);
                        _10982 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_10982))
                        staticcall address(_10982).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11035 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_11035]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11169 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11190 = mem[_11169]
                        _11210 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _11227 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _11190
                        mem[mem[64] + 36] = 128
                        _11243 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_11227 + 100] = block.timestamp + 60
                        require ext_code.size(address(_11210))
                        call address(_11210).mem[mem[64] len 4] with:
                           value _11190 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11227 + (32 * _11243) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11765 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11785 = mem[_11765]
                        require mem[_11765] <= test266151307()
                        require _11765 + mem[_11765] + 31 < _11765 + return_data.size
                        _11805 = mem[_11765 + mem[_11765]]
                        if mem[_11765 + mem[_11765]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11765 + mem[_11765]]) + 1 < 0 or _11765 + ceil32(return_data.size) + ceil32(32 * mem[_11765 + mem[_11765]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11765 + ceil32(return_data.size) + ceil32(32 * mem[_11765 + mem[_11765]]) + 1
                        mem[_11765 + ceil32(return_data.size)] = _11805
                        require _11785 + (32 * _11805) + 32 <= return_data.size
                        t = _11765 + ceil32(return_data.size) + 32
                        s = _11765 + _11785 + 32
                        while s < _11765 + _11785 + (32 * _11805) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12405 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_12405]
            else:
                if 1 >= mem[_5326]:
                    revert with 0, 50
                mem[_5326 + 64] = address(_5316)
                mem[_5326 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[_5326 + 100] = eth.balance(this.address) / 2
                mem[_5326 + 132] = 64
                mem[_5326 + 164] = mem[_5326]
                s = 0
                t = _5326 + 32
                u = _5326 + 196
                while s < mem[_5326]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(_5315))
                staticcall address(_5315).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _5326 + (32 * mem[_5326]) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6885 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _6903 = mem[_6885]
                require mem[_6885] <= test266151307()
                require _6885 + mem[_6885] + 31 < _6885 + return_data.size
                _6919 = mem[_6885 + mem[_6885]]
                if mem[_6885 + mem[_6885]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_6885 + mem[_6885]]) + 1 < 0 or _6885 + ceil32(return_data.size) + ceil32(32 * mem[_6885 + mem[_6885]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _6885 + ceil32(return_data.size) + ceil32(32 * mem[_6885 + mem[_6885]]) + 1
                mem[_6885 + ceil32(return_data.size)] = _6919
                require _6903 + (32 * _6919) + 32 <= return_data.size
                t = _6885 + ceil32(return_data.size) + 32
                s = _6885 + _6903 + 32
                while s < _6885 + _6903 + (32 * _6919) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _6919:
                    revert with 0, 50
                _8111 = mem[_6885 + ceil32(return_data.size) + 64]
                if mem[_6885 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_6885 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_6885 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 1 >= _6919:
                    revert with 0, 50
                _8159 = mem[_6885 + ceil32(return_data.size) + 64]
                if mem[_6885 + ceil32(return_data.size) + 64] < 100 * mem[_6885 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _8159 - (100 * _8111 / 10000)
                mem[mem[64] + 36] = 128
                _8175 = mem[_5326]
                mem[mem[64] + 132] = mem[_5326]
                s = 0
                t = _5326 + 32
                u = mem[64] + 164
                while s < _8175:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 68] = this.address
                mem[mem[64] + 100] = block.timestamp + 60
                require ext_code.size(address(_5315))
                call address(_5315).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value _8159 - (100 * _8111 / 10000) wei
                     gas gas_remaining wei
                    args _8159 - (100 * _8111 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _8175) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9335 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _9343 = mem[_9335]
                require mem[_9335] <= test266151307()
                require _9335 + mem[_9335] + 31 < _9335 + return_data.size
                _9351 = mem[_9335 + mem[_9335]]
                if mem[_9335 + mem[_9335]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_9335 + mem[_9335]]) + 1 < 0 or _9335 + ceil32(return_data.size) + ceil32(32 * mem[_9335 + mem[_9335]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _9335 + ceil32(return_data.size) + ceil32(32 * mem[_9335 + mem[_9335]]) + 1
                mem[_9335 + ceil32(return_data.size)] = _9351
                require _9343 + (32 * _9351) + 32 <= return_data.size
                t = _9335 + ceil32(return_data.size) + 32
                s = _9335 + _9343 + 32
                while s < _9335 + _9343 + (32 * _9351) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if stor21 == address(_5317):
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5316))
                    staticcall address(_5316).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10555 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10567 = mem[_10555]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5317))
                    staticcall address(_5317).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10599 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10611 = mem[_10599]
                    if not _10567:
                        revert with 0, 'Desired value is zero'
                    if not mem[_10599]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_5315)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5316))
                    call address(_5316).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5315), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10683 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_10683] == bool(mem[_10683])
                    mem[mem[64] + 4] = address(_5315)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5317))
                    call address(_5317).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5315), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10726 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_10726] == bool(mem[_10726])
                    if _10567 and 1 > -1 / _10567:
                        revert with 0, 17
                    if _10567 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _10567 < 100 * _10567 / 10000:
                        revert with 0, 17
                    if _10611 and 1 > -1 / _10611:
                        revert with 0, 17
                    if _10611 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _10611 < 100 * _10611 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _10567
                    mem[mem[64] + 100] = _10611
                    mem[mem[64] + 132] = _10567 - (100 * _10567 / 10000)
                    mem[mem[64] + 164] = _10611 - (100 * _10611 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_5315))
                    call address(_5315).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_5316), address(_5317), _10567, _10611, _10567 - (100 * _10567 / 10000), _10611 - (100 * _10611 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _10857 = mem[_508 + 160]
                    _10858 = mem[_508 + 64]
                    _10859 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_10859))
                    staticcall address(_10859).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10886 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10898 = mem[_10886]
                    if _10858 >= 999999:
                        mem[mem[64] + 4] = mem[_10886]
                        require ext_code.size(address(_10857))
                        call address(_10857).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _10898
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _10898
                        emit Earn(_10898);
                        _11010 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_11010))
                        staticcall address(_11010).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11045 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_11045]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11178 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11198 = mem[_11178]
                        _11218 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _11234 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _11198
                        mem[mem[64] + 36] = 128
                        _11250 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_11234 + 100] = block.timestamp + 60
                        require ext_code.size(address(_11218))
                        call address(_11218).mem[mem[64] len 4] with:
                           value _11198 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11234 + (32 * _11250) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11766 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11786 = mem[_11766]
                        require mem[_11766] <= test266151307()
                        require _11766 + mem[_11766] + 31 < _11766 + return_data.size
                        _11806 = mem[_11766 + mem[_11766]]
                        if mem[_11766 + mem[_11766]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11766 + mem[_11766]]) + 1 < 0 or _11766 + ceil32(return_data.size) + ceil32(32 * mem[_11766 + mem[_11766]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11766 + ceil32(return_data.size) + ceil32(32 * mem[_11766 + mem[_11766]]) + 1
                        mem[_11766 + ceil32(return_data.size)] = _11806
                        require _11786 + (32 * _11806) + 32 <= return_data.size
                        t = _11766 + ceil32(return_data.size) + 32
                        s = _11766 + _11786 + 32
                        while s < _11766 + _11786 + (32 * _11806) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12406 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_12406]
                    else:
                        mem[mem[64] + 4] = _10858
                        mem[mem[64] + 36] = _10898
                        require ext_code.size(address(_10857))
                        call address(_10857).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _10858, _10898
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _10898
                        emit Earn(_10898);
                        _11011 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_11011))
                        staticcall address(_11011).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11046 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_11046]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11179 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11199 = mem[_11179]
                        _11219 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _11235 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _11199
                        mem[mem[64] + 36] = 128
                        _11251 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_11235 + 100] = block.timestamp + 60
                        require ext_code.size(address(_11219))
                        call address(_11219).mem[mem[64] len 4] with:
                           value _11199 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11235 + (32 * _11251) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11767 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11787 = mem[_11767]
                        require mem[_11767] <= test266151307()
                        require _11767 + mem[_11767] + 31 < _11767 + return_data.size
                        _11807 = mem[_11767 + mem[_11767]]
                        if mem[_11767 + mem[_11767]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11767 + mem[_11767]]) + 1 < 0 or _11767 + ceil32(return_data.size) + ceil32(32 * mem[_11767 + mem[_11767]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11767 + ceil32(return_data.size) + ceil32(32 * mem[_11767 + mem[_11767]]) + 1
                        mem[_11767 + ceil32(return_data.size)] = _11807
                        require _11787 + (32 * _11807) + 32 <= return_data.size
                        t = _11767 + ceil32(return_data.size) + 32
                        s = _11767 + _11787 + 32
                        while s < _11767 + _11787 + (32 * _11807) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12407 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_12407]
                else:
                    if 1 >= mem[_5326]:
                        revert with 0, 50
                    mem[_5326 + 64] = address(_5317)
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = eth.balance(this.address) / 2
                    mem[mem[64] + 36] = 64
                    _10571 = mem[_5326]
                    mem[mem[64] + 68] = mem[_5326]
                    s = 0
                    t = _5326 + 32
                    u = mem[64] + 100
                    while s < _10571:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_5315))
                    staticcall address(_5315).getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args Mask(255, 1, eth.balance(this.address)), 64, mem[mem[64] + 68 len (32 * _10571) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11771 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11791 = mem[_11771]
                    require mem[_11771] <= test266151307()
                    require _11771 + mem[_11771] + 31 < _11771 + return_data.size
                    _11811 = mem[_11771 + mem[_11771]]
                    if mem[_11771 + mem[_11771]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11771 + mem[_11771]]) + 1 < 0 or _11771 + ceil32(return_data.size) + ceil32(32 * mem[_11771 + mem[_11771]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11771 + ceil32(return_data.size) + ceil32(32 * mem[_11771 + mem[_11771]]) + 1
                    mem[_11771 + ceil32(return_data.size)] = _11811
                    require _11791 + (32 * _11811) + 32 <= return_data.size
                    t = _11771 + ceil32(return_data.size) + 32
                    s = _11771 + _11791 + 32
                    while s < _11771 + _11791 + (32 * _11811) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _11811:
                        revert with 0, 50
                    _12359 = mem[_11771 + ceil32(return_data.size) + 64]
                    if mem[_11771 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_11771 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_11771 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _11811:
                        revert with 0, 50
                    _12431 = mem[_11771 + ceil32(return_data.size) + 64]
                    if mem[_11771 + ceil32(return_data.size) + 64] < 100 * mem[_11771 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _12435 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _12431 - (100 * _12359 / 10000)
                    mem[mem[64] + 36] = 128
                    _12439 = mem[_5326]
                    mem[mem[64] + 132] = mem[_5326]
                    s = 0
                    t = _5326 + 32
                    u = mem[64] + 164
                    while s < _12439:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_12435 + 68] = this.address
                    mem[_12435 + 100] = block.timestamp + 60
                    require ext_code.size(address(_5315))
                    call address(_5315).mem[mem[64] len 4] with:
                       value _12431 - (100 * _12359 / 10000) wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _12435 + (32 * _12439) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12843 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12847 = mem[_12843]
                    require mem[_12843] <= test266151307()
                    require _12843 + mem[_12843] + 31 < _12843 + return_data.size
                    _12851 = mem[_12843 + mem[_12843]]
                    if mem[_12843 + mem[_12843]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_12843 + mem[_12843]]) + 1 < 0 or _12843 + ceil32(return_data.size) + ceil32(32 * mem[_12843 + mem[_12843]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _12843 + ceil32(return_data.size) + ceil32(32 * mem[_12843 + mem[_12843]]) + 1
                    mem[_12843 + ceil32(return_data.size)] = _12851
                    require _12847 + (32 * _12851) + 32 <= return_data.size
                    t = _12843 + ceil32(return_data.size) + 32
                    s = _12843 + _12847 + 32
                    while s < _12843 + _12847 + (32 * _12851) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5316))
                    staticcall address(_5316).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13239 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13243 = mem[_13239]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5317))
                    staticcall address(_5317).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13255 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13259 = mem[_13255]
                    if not _13243:
                        revert with 0, 'Desired value is zero'
                    if not mem[_13255]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_5315)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5316))
                    call address(_5316).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5315), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13287 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13287] == bool(mem[_13287])
                    mem[mem[64] + 4] = address(_5315)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5317))
                    call address(_5317).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5315), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13303 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13303] == bool(mem[_13303])
                    if _13243 and 1 > -1 / _13243:
                        revert with 0, 17
                    if _13243 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13243 < 100 * _13243 / 10000:
                        revert with 0, 17
                    if _13259 and 1 > -1 / _13259:
                        revert with 0, 17
                    if _13259 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13259 < 100 * _13259 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _13243
                    mem[mem[64] + 100] = _13259
                    mem[mem[64] + 132] = _13243 - (100 * _13243 / 10000)
                    mem[mem[64] + 164] = _13259 - (100 * _13259 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_5315))
                    call address(_5315).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_5316), address(_5317), _13243, _13259, _13243 - (100 * _13243 / 10000), _13259 - (100 * _13259 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13341 = mem[_508 + 160]
                    _13342 = mem[_508 + 64]
                    _13343 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13343))
                    staticcall address(_13343).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13355 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13359 = mem[_13355]
                    if _13342 >= 999999:
                        mem[mem[64] + 4] = mem[_13355]
                        require ext_code.size(address(_13341))
                        call address(_13341).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _13359
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13359
                        emit Earn(_13359);
                        _13398 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13398))
                        staticcall address(_13398).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13422 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_13422]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13470 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13478 = mem[_13470]
                        _13486 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13494 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13478
                        mem[mem[64] + 36] = 128
                        _13502 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13494 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13486))
                        call address(_13486).mem[mem[64] len 4] with:
                           value _13478 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13494 + (32 * _13502) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13614 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13622 = mem[_13614]
                        require mem[_13614] <= test266151307()
                        require _13614 + mem[_13614] + 31 < _13614 + return_data.size
                        _13630 = mem[_13614 + mem[_13614]]
                        if mem[_13614 + mem[_13614]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_13614 + mem[_13614]]) + 1 < 0 or _13614 + ceil32(return_data.size) + ceil32(32 * mem[_13614 + mem[_13614]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _13614 + ceil32(return_data.size) + ceil32(32 * mem[_13614 + mem[_13614]]) + 1
                        mem[_13614 + ceil32(return_data.size)] = _13630
                        require _13622 + (32 * _13630) + 32 <= return_data.size
                        t = _13614 + ceil32(return_data.size) + 32
                        s = _13614 + _13622 + 32
                        while s < _13614 + _13622 + (32 * _13630) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13710 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_13710]
                    else:
                        mem[mem[64] + 4] = _13342
                        mem[mem[64] + 36] = _13359
                        require ext_code.size(address(_13341))
                        call address(_13341).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _13342, _13359
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13359
                        emit Earn(_13359);
                        _13399 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13399))
                        staticcall address(_13399).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13423 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_13423]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13471 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13479 = mem[_13471]
                        _13487 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13495 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13479
                        mem[mem[64] + 36] = 128
                        _13503 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13495 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13487))
                        call address(_13487).mem[mem[64] len 4] with:
                           value _13479 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13495 + (32 * _13503) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13615 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13623 = mem[_13615]
                        require mem[_13615] <= test266151307()
                        require _13615 + mem[_13615] + 31 < _13615 + return_data.size
                        _13631 = mem[_13615 + mem[_13615]]
                        if mem[_13615 + mem[_13615]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_13615 + mem[_13615]]) + 1 < 0 or _13615 + ceil32(return_data.size) + ceil32(32 * mem[_13615 + mem[_13615]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _13615 + ceil32(return_data.size) + ceil32(32 * mem[_13615 + mem[_13615]]) + 1
                        mem[_13615 + ceil32(return_data.size)] = _13631
                        require _13623 + (32 * _13631) + 32 <= return_data.size
                        t = _13615 + ceil32(return_data.size) + 32
                        s = _13615 + _13623 + 32
                        while s < _13615 + _13623 + (32 * _13631) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13711 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_13711]
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _508
            s = _2521 - (100 * _2521 / 10000)
            s = stor9[idx].field_0
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        staticcall strategyInfo[stor9[idx].field_0].field_1280.info(address arg1) with:
                gas gas_remaining wei
               args this.address
        mem[mem[64] len 320] = ext_call.return_data[0 len 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _518 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 320
        _527 = mem[64]
        if mem[64] + 192 > test266151307() or mem[64] + 192 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 192
        mem[_527] = mem[_518]
        mem[_527 + 32] = mem[_518 + 32]
        mem[_527 + 64] = mem[_518 + 64]
        require return_data.size - 96 >= 96
        _539 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_539] = mem[_518 + 96]
        mem[_539 + 32] = mem[_518 + 128]
        mem[_539 + 64] = mem[_518 + 160]
        mem[_527 + 96] = _539
        mem[_527 + 128] = mem[_518 + 192]
        require return_data.size - 224 >= 96
        _557 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_557] = mem[_518 + 224]
        mem[_557 + 32] = mem[_518 + 256]
        mem[_557 + 64] = mem[_518 + 288]
        mem[_527 + 160] = _557
        _569 = mem[_527 + 64]
        if not mem[_527 + 64]:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _508
            s = mem[_527 + 64]
            s = stor9[idx].field_0
            continue 
        mem[0] = stor9[idx].field_0
        mem[32] = 6
        _586 = mem[64]
        mem[64] = mem[64] + 256
        mem[_586] = strategyInfo[stor9[idx].field_0].field_0
        mem[_586 + 32] = strategyInfo[stor9[idx].field_0].field_256
        mem[_586 + 64] = strategyInfo[stor9[idx].field_0].field_512
        mem[_586 + 96] = strategyInfo[stor9[idx].field_0].field_768
        mem[_586 + 128] = strategyInfo[stor9[idx].field_0].field_1024
        mem[_586 + 160] = strategyInfo[stor9[idx].field_0].field_1280
        mem[_586 + 192] = strategyInfo[stor9[idx].field_0].field_1536
        mem[_586 + 224] = strategyInfo[stor9[idx].field_0].field_1792
        if 999999 <= strategyInfo[stor9[idx].field_0].field_512:
            mem[mem[64] + 4] = _569
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            call strategyInfo[stor9[idx].field_0].field_1280.0x2e1a7d4d with:
                 gas gas_remaining wei
                args _569
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.SUSHI() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _614 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _618 = mem[_614]
            require mem[_614] == mem[_614 + 12 len 20]
            if 0 >= mem[96]:
                revert with 0, 50
            mem[128] = mem[_614 + 12 len 20]
            if 1 >= mem[96]:
                revert with 0, 50
            mem[160] = stor21
            require ext_code.size(address(_618))
            staticcall address(_618).0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _655 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _658 = mem[_655]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_618))
            staticcall address(_618).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _665 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _671 = mem[_665]
            if mem[_665] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _658:
                revert with 0, 18
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_0
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _692 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _703 = mem[_692]
            if 10^12 * _671 / _658 and mem[_692] > -1 / 10^12 * _671 / _658:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _671 / _658 * _703 / 10^12
            mem[mem[64] + 36] = 64
            _746 = mem[96]
            mem[mem[64] + 68] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 100
            while s < mem[96]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len (32 * _746) + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1292 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1299 = mem[_1292]
            require mem[_1292] <= test266151307()
            require _1292 + mem[_1292] + 31 < _1292 + return_data.size
            _1306 = mem[_1292 + mem[_1292]]
            if mem[_1292 + mem[_1292]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_1292 + mem[_1292]]) + 1 < 0 or _1292 + ceil32(return_data.size) + ceil32(32 * mem[_1292 + mem[_1292]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1292 + ceil32(return_data.size) + ceil32(32 * mem[_1292 + mem[_1292]]) + 1
            mem[_1292 + ceil32(return_data.size)] = _1306
            require _1299 + (32 * _1306) + 32 <= return_data.size
            t = _1292 + ceil32(return_data.size) + 32
            s = _1292 + _1299 + 32
            while s < _1292 + _1299 + (32 * _1306) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _1306:
                revert with 0, 50
            _2518 = mem[_1292 + ceil32(return_data.size) + 64]
            if mem[_1292 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_1292 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_1292 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if mem[_1292 + ceil32(return_data.size) + 64] < 100 * mem[_1292 + ceil32(return_data.size) + 64] / 10000:
                revert with 0, 17
            _2558 = mem[_508]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_618))
            staticcall address(_618).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2582 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2590 = mem[_2582]
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _2590
            mem[mem[64] + 36] = _2518 - (100 * _2518 / 10000)
            mem[mem[64] + 68] = 160
            _2610 = mem[96]
            mem[mem[64] + 164] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 196
            while s < mem[96]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp + 60
            require ext_code.size(address(_2558))
            call address(_2558).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len 96], address(this.address), block.timestamp + 60, mem[mem[64] + 164 len (32 * _2610) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3834 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3842 = mem[_3834]
            require mem[_3834] <= test266151307()
            require _3834 + mem[_3834] + 31 < _3834 + return_data.size
            _3854 = mem[_3834 + mem[_3834]]
            if mem[_3834 + mem[_3834]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_3834 + mem[_3834]]) + 1 < 0 or _3834 + ceil32(return_data.size) + ceil32(32 * mem[_3834 + mem[_3834]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _3834 + ceil32(return_data.size) + ceil32(32 * mem[_3834 + mem[_3834]]) + 1
            mem[_3834 + ceil32(return_data.size)] = _3854
            require _3842 + (32 * _3854) + 32 <= return_data.size
            t = _3834 + ceil32(return_data.size) + 32
            s = _3834 + _3842 + 32
            while s < _3834 + _3842 + (32 * _3854) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            _5306 = mem[_508]
            _5307 = mem[_508 + 192]
            _5308 = mem[_508 + 224]
            _5320 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            mem[_5320 + 32 len 64] = call.data[calldata.size len 64]
            if not mem[_5320]:
                revert with 0, 50
            mem[_5320 + 32] = stor21
            if stor21 == address(_5307):
                if stor21 == address(_5308):
                    mem[_5320 + 100] = this.address
                    require ext_code.size(address(_5307))
                    staticcall address(_5307).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5320 + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_5320 + ceil32(return_data.size) + 100] = this.address
                    require ext_code.size(address(_5308))
                    staticcall address(_5308).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5320 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 'Desired value is zero'
                    if not ext_call.return_data[0]:
                        revert with 0, 'Desired value is zero'
                    mem[_5320 + (2 * ceil32(return_data.size)) + 100] = address(_5306)
                    mem[_5320 + (2 * ceil32(return_data.size)) + 132] = -1
                    require ext_code.size(address(_5307))
                    call address(_5307).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5306), -1
                    mem[_5320 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    mem[_5320 + (4 * ceil32(return_data.size)) + 100] = address(_5306)
                    mem[_5320 + (4 * ceil32(return_data.size)) + 132] = -1
                    require ext_code.size(address(_5308))
                    call address(_5308).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5306), -1
                    mem[_5320 + (4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                        revert with 0, 17
                    if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                        revert with 0, 17
                    if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                        revert with 0, 17
                    if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[_5320 + (6 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
                    mem[_5320 + (6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                    mem[_5320 + (6 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                    mem[_5320 + (6 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                    mem[_5320 + (6 * ceil32(return_data.size)) + 292] = this.address
                    mem[_5320 + (6 * ceil32(return_data.size)) + 324] = block.timestamp + 60
                    require ext_code.size(address(_5306))
                    call address(_5306).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_5307), address(_5308), ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
                    mem[_5320 + (6 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _5320 + (7 * ceil32(return_data.size)) + 96
                    require return_data.size >= 96
                    _5634 = mem[_508 + 160]
                    _5635 = mem[_508 + 64]
                    _5636 = mem[_508 + 32]
                    mem[_5320 + (7 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(address(_5636))
                    staticcall address(_5636).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5320 + (7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _5320 + (8 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    if _5635 >= 999999:
                        mem[_5320 + (8 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        require ext_code.size(address(_5634))
                        call address(_5634).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5320 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        emit Earn(ext_call.return_data[0]);
                        _5778 = mem[_508 + 32]
                        mem[_5320 + (8 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_5778))
                        staticcall address(_5778).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5320 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_508 + 96] = ext_call.return_data[0]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[_5320 + (10 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5320 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5320 + (11 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5990 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_5320 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[_5320 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        mem[_5320 + (11 * ceil32(return_data.size)) + 132] = 128
                        mem[_5320 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                        s = 0
                        t = 128
                        u = _5320 + (11 * ceil32(return_data.size)) + 260
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_5320 + (11 * ceil32(return_data.size)) + 164] = this.address
                        mem[_5320 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                        require ext_code.size(address(_5990))
                        call address(_5990).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value ext_call.return_data[0] wei
                             gas gas_remaining wei
                            args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_5320 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5320 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _5320 + (12 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _6888 = mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                        require mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                        require _5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _5320 + (11 * ceil32(return_data.size)) + return_data.size + 96
                        _6904 = mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        if mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _5320 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                            revert with 0, 65
                        mem[64] = _5320 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                        mem[_5320 + (12 * ceil32(return_data.size)) + 96] = mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        require _6888 + (32 * _6904) + 32 <= return_data.size
                        t = _5320 + (12 * ceil32(return_data.size)) + 128
                        s = _5320 + (11 * ceil32(return_data.size)) + _6888 + 128
                        while s < _5320 + (11 * ceil32(return_data.size)) + _6888 + (32 * _6904) + 128:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8128 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_8128]
                    else:
                        mem[_5320 + (8 * ceil32(return_data.size)) + 100] = _5635
                        mem[_5320 + (8 * ceil32(return_data.size)) + 132] = ext_call.return_data[0]
                        require ext_code.size(address(_5634))
                        call address(_5634).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _5635, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5320 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        emit Earn(ext_call.return_data[0]);
                        _5779 = mem[_508 + 32]
                        mem[_5320 + (8 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_5779))
                        staticcall address(_5779).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5320 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_508 + 96] = ext_call.return_data[0]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[_5320 + (10 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_5320 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5320 + (11 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5991 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_5320 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[_5320 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        mem[_5320 + (11 * ceil32(return_data.size)) + 132] = 128
                        mem[_5320 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                        s = 0
                        t = 128
                        u = _5320 + (11 * ceil32(return_data.size)) + 260
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_5320 + (11 * ceil32(return_data.size)) + 164] = this.address
                        mem[_5320 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                        require ext_code.size(address(_5991))
                        call address(_5991).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value ext_call.return_data[0] wei
                             gas gas_remaining wei
                            args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_5320 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5320 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _5320 + (12 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _6889 = mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                        require mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                        require _5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _5320 + (11 * ceil32(return_data.size)) + return_data.size + 96
                        _6905 = mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        if mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _5320 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                            revert with 0, 65
                        mem[64] = _5320 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                        mem[_5320 + (12 * ceil32(return_data.size)) + 96] = mem[_5320 + (11 * ceil32(return_data.size)) + mem[_5320 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        require _6889 + (32 * _6905) + 32 <= return_data.size
                        t = _5320 + (12 * ceil32(return_data.size)) + 128
                        s = _5320 + (11 * ceil32(return_data.size)) + _6889 + 128
                        while s < _5320 + (11 * ceil32(return_data.size)) + _6889 + (32 * _6905) + 128:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8129 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_8129]
                else:
                    if 1 >= mem[_5320]:
                        revert with 0, 50
                    mem[_5320 + 64] = address(_5308)
                    mem[_5320 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[_5320 + 100] = eth.balance(this.address) / 2
                    mem[_5320 + 132] = 64
                    mem[_5320 + 164] = mem[_5320]
                    s = 0
                    t = _5320 + 32
                    u = _5320 + 196
                    while s < mem[_5320]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_5306))
                    staticcall address(_5306).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _5320 + (32 * mem[_5320]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6878 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _6896 = mem[_6878]
                    require mem[_6878] <= test266151307()
                    require _6878 + mem[_6878] + 31 < _6878 + return_data.size
                    _6912 = mem[_6878 + mem[_6878]]
                    if mem[_6878 + mem[_6878]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_6878 + mem[_6878]]) + 1 < 0 or _6878 + ceil32(return_data.size) + ceil32(32 * mem[_6878 + mem[_6878]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _6878 + ceil32(return_data.size) + ceil32(32 * mem[_6878 + mem[_6878]]) + 1
                    mem[_6878 + ceil32(return_data.size)] = _6912
                    require _6896 + (32 * _6912) + 32 <= return_data.size
                    t = _6878 + ceil32(return_data.size) + 32
                    s = _6878 + _6896 + 32
                    while s < _6878 + _6896 + (32 * _6912) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _6912:
                        revert with 0, 50
                    _8104 = mem[_6878 + ceil32(return_data.size) + 64]
                    if mem[_6878 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_6878 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_6878 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _6912:
                        revert with 0, 50
                    _8152 = mem[_6878 + ceil32(return_data.size) + 64]
                    if mem[_6878 + ceil32(return_data.size) + 64] < 100 * mem[_6878 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _8160 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _8152 - (100 * _8104 / 10000)
                    mem[mem[64] + 36] = 128
                    _8168 = mem[_5320]
                    mem[mem[64] + 132] = mem[_5320]
                    s = 0
                    t = _5320 + 32
                    u = mem[64] + 164
                    while s < _8168:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_8160 + 68] = this.address
                    mem[_8160 + 100] = block.timestamp + 60
                    require ext_code.size(address(_5306))
                    call address(_5306).mem[mem[64] len 4] with:
                       value _8152 - (100 * _8104 / 10000) wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _8160 + (32 * _8168) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9328 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _9336 = mem[_9328]
                    require mem[_9328] <= test266151307()
                    require _9328 + mem[_9328] + 31 < _9328 + return_data.size
                    _9344 = mem[_9328 + mem[_9328]]
                    if mem[_9328 + mem[_9328]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_9328 + mem[_9328]]) + 1 < 0 or _9328 + ceil32(return_data.size) + ceil32(32 * mem[_9328 + mem[_9328]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _9328 + ceil32(return_data.size) + ceil32(32 * mem[_9328 + mem[_9328]]) + 1
                    mem[_9328 + ceil32(return_data.size)] = _9344
                    require _9336 + (32 * _9344) + 32 <= return_data.size
                    t = _9328 + ceil32(return_data.size) + 32
                    s = _9328 + _9336 + 32
                    while s < _9328 + _9336 + (32 * _9344) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5307))
                    staticcall address(_5307).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10548 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10556 = mem[_10548]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5308))
                    staticcall address(_5308).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10592 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10600 = mem[_10592]
                    if not _10556:
                        revert with 0, 'Desired value is zero'
                    if not mem[_10592]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_5306)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5307))
                    call address(_5307).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5306), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10672 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_10672] == bool(mem[_10672])
                    mem[mem[64] + 4] = address(_5306)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5308))
                    call address(_5308).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5306), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10712 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_10712] == bool(mem[_10712])
                    if _10556 and 1 > -1 / _10556:
                        revert with 0, 17
                    if _10556 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _10556 < 100 * _10556 / 10000:
                        revert with 0, 17
                    if _10600 and 1 > -1 / _10600:
                        revert with 0, 17
                    if _10600 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _10600 < 100 * _10600 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _10556
                    mem[mem[64] + 100] = _10600
                    mem[mem[64] + 132] = _10556 - (100 * _10556 / 10000)
                    mem[mem[64] + 164] = _10600 - (100 * _10600 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_5306))
                    call address(_5306).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_5307), address(_5308), _10556, _10600, _10556 - (100 * _10556 / 10000), _10600 - (100 * _10600 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _10828 = mem[_508 + 160]
                    _10829 = mem[_508 + 64]
                    _10830 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_10830))
                    staticcall address(_10830).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10876 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10888 = mem[_10876]
                    if _10829 >= 999999:
                        mem[mem[64] + 4] = mem[_10876]
                        require ext_code.size(address(_10828))
                        call address(_10828).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _10888
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _10888
                        emit Earn(_10888);
                        _10960 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_10960))
                        staticcall address(_10960).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11028 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_11028]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11156 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11180 = mem[_11156]
                        _11200 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _11220 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _11180
                        mem[mem[64] + 36] = 128
                        _11236 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_11220 + 100] = block.timestamp + 60
                        require ext_code.size(address(_11200))
                        call address(_11200).mem[mem[64] len 4] with:
                           value _11180 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11220 + (32 * _11236) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11752 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11772 = mem[_11752]
                        require mem[_11752] <= test266151307()
                        require _11752 + mem[_11752] + 31 < _11752 + return_data.size
                        _11792 = mem[_11752 + mem[_11752]]
                        if mem[_11752 + mem[_11752]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11752 + mem[_11752]]) + 1 < 0 or _11752 + ceil32(return_data.size) + ceil32(32 * mem[_11752 + mem[_11752]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11752 + ceil32(return_data.size) + ceil32(32 * mem[_11752 + mem[_11752]]) + 1
                        mem[_11752 + ceil32(return_data.size)] = _11792
                        require _11772 + (32 * _11792) + 32 <= return_data.size
                        t = _11752 + ceil32(return_data.size) + 32
                        s = _11752 + _11772 + 32
                        while s < _11752 + _11772 + (32 * _11792) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12392 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_12392]
                    else:
                        mem[mem[64] + 4] = _10829
                        mem[mem[64] + 36] = _10888
                        require ext_code.size(address(_10828))
                        call address(_10828).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _10829, _10888
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _10888
                        emit Earn(_10888);
                        _10961 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_10961))
                        staticcall address(_10961).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11029 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_11029]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11157 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11181 = mem[_11157]
                        _11201 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _11221 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _11181
                        mem[mem[64] + 36] = 128
                        _11237 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < _11237:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_11221 + 68] = this.address
                        mem[_11221 + 100] = block.timestamp + 60
                        require ext_code.size(address(_11201))
                        call address(_11201).mem[mem[64] len 4] with:
                           value _11181 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11221 + (32 * _11237) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11753 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11773 = mem[_11753]
                        require mem[_11753] <= test266151307()
                        require _11753 + mem[_11753] + 31 < _11753 + return_data.size
                        _11793 = mem[_11753 + mem[_11753]]
                        if mem[_11753 + mem[_11753]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11753 + mem[_11753]]) + 1 < 0 or _11753 + ceil32(return_data.size) + ceil32(32 * mem[_11753 + mem[_11753]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11753 + ceil32(return_data.size) + ceil32(32 * mem[_11753 + mem[_11753]]) + 1
                        mem[_11753 + ceil32(return_data.size)] = _11793
                        require _11773 + (32 * _11793) + 32 <= return_data.size
                        t = _11753 + ceil32(return_data.size) + 32
                        s = _11753 + _11773 + 32
                        while s < _11753 + _11773 + (32 * _11793) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12393 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_12393]
            else:
                if 1 >= mem[_5320]:
                    revert with 0, 50
                mem[_5320 + 64] = address(_5307)
                mem[_5320 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[_5320 + 100] = eth.balance(this.address) / 2
                mem[_5320 + 132] = 64
                mem[_5320 + 164] = mem[_5320]
                s = 0
                t = _5320 + 32
                u = _5320 + 196
                while s < mem[_5320]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(_5306))
                staticcall address(_5306).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _5320 + (32 * mem[_5320]) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6879 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _6897 = mem[_6879]
                require mem[_6879] <= test266151307()
                require _6879 + mem[_6879] + 31 < _6879 + return_data.size
                _6913 = mem[_6879 + mem[_6879]]
                if mem[_6879 + mem[_6879]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_6879 + mem[_6879]]) + 1 < 0 or _6879 + ceil32(return_data.size) + ceil32(32 * mem[_6879 + mem[_6879]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _6879 + ceil32(return_data.size) + ceil32(32 * mem[_6879 + mem[_6879]]) + 1
                mem[_6879 + ceil32(return_data.size)] = _6913
                require _6897 + (32 * _6913) + 32 <= return_data.size
                t = _6879 + ceil32(return_data.size) + 32
                s = _6879 + _6897 + 32
                while s < _6879 + _6897 + (32 * _6913) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _6913:
                    revert with 0, 50
                _8105 = mem[_6879 + ceil32(return_data.size) + 64]
                if mem[_6879 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_6879 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_6879 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 1 >= _6913:
                    revert with 0, 50
                _8153 = mem[_6879 + ceil32(return_data.size) + 64]
                if mem[_6879 + ceil32(return_data.size) + 64] < 100 * mem[_6879 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _8153 - (100 * _8105 / 10000)
                mem[mem[64] + 36] = 128
                _8169 = mem[_5320]
                mem[mem[64] + 132] = mem[_5320]
                s = 0
                t = _5320 + 32
                u = mem[64] + 164
                while s < _8169:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 68] = this.address
                mem[mem[64] + 100] = block.timestamp + 60
                require ext_code.size(address(_5306))
                call address(_5306).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value _8153 - (100 * _8105 / 10000) wei
                     gas gas_remaining wei
                    args _8153 - (100 * _8105 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _8169) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9329 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _9337 = mem[_9329]
                require mem[_9329] <= test266151307()
                require _9329 + mem[_9329] + 31 < _9329 + return_data.size
                _9345 = mem[_9329 + mem[_9329]]
                if mem[_9329 + mem[_9329]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_9329 + mem[_9329]]) + 1 < 0 or _9329 + ceil32(return_data.size) + ceil32(32 * mem[_9329 + mem[_9329]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _9329 + ceil32(return_data.size) + ceil32(32 * mem[_9329 + mem[_9329]]) + 1
                mem[_9329 + ceil32(return_data.size)] = _9345
                require _9337 + (32 * _9345) + 32 <= return_data.size
                t = _9329 + ceil32(return_data.size) + 32
                s = _9329 + _9337 + 32
                while s < _9329 + _9337 + (32 * _9345) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if stor21 == address(_5308):
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5307))
                    staticcall address(_5307).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10552 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10564 = mem[_10552]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5308))
                    staticcall address(_5308).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10596 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10608 = mem[_10596]
                    if not _10564:
                        revert with 0, 'Desired value is zero'
                    if not mem[_10596]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_5306)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5307))
                    call address(_5307).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5306), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10680 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_10680] == bool(mem[_10680])
                    mem[mem[64] + 4] = address(_5306)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5308))
                    call address(_5308).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5306), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10720 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_10720] == bool(mem[_10720])
                    if _10564 and 1 > -1 / _10564:
                        revert with 0, 17
                    if _10564 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _10564 < 100 * _10564 / 10000:
                        revert with 0, 17
                    if _10608 and 1 > -1 / _10608:
                        revert with 0, 17
                    if _10608 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _10608 < 100 * _10608 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _10564
                    mem[mem[64] + 100] = _10608
                    mem[mem[64] + 132] = _10564 - (100 * _10564 / 10000)
                    mem[mem[64] + 164] = _10608 - (100 * _10608 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_5306))
                    call address(_5306).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_5307), address(_5308), _10564, _10608, _10564 - (100 * _10564 / 10000), _10608 - (100 * _10608 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _10842 = mem[_508 + 160]
                    _10843 = mem[_508 + 64]
                    _10844 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_10844))
                    staticcall address(_10844).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10880 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _10892 = mem[_10880]
                    if _10843 >= 999999:
                        mem[mem[64] + 4] = mem[_10880]
                        require ext_code.size(address(_10842))
                        call address(_10842).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _10892
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _10892
                        emit Earn(_10892);
                        _10992 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_10992))
                        staticcall address(_10992).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11036 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_11036]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11172 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11192 = mem[_11172]
                        _11212 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _11228 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _11192
                        mem[mem[64] + 36] = 128
                        _11244 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_11228 + 100] = block.timestamp + 60
                        require ext_code.size(address(_11212))
                        call address(_11212).mem[mem[64] len 4] with:
                           value _11192 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11228 + (32 * _11244) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11754 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11774 = mem[_11754]
                        require mem[_11754] <= test266151307()
                        require _11754 + mem[_11754] + 31 < _11754 + return_data.size
                        _11794 = mem[_11754 + mem[_11754]]
                        if mem[_11754 + mem[_11754]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11754 + mem[_11754]]) + 1 < 0 or _11754 + ceil32(return_data.size) + ceil32(32 * mem[_11754 + mem[_11754]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11754 + ceil32(return_data.size) + ceil32(32 * mem[_11754 + mem[_11754]]) + 1
                        mem[_11754 + ceil32(return_data.size)] = _11794
                        require _11774 + (32 * _11794) + 32 <= return_data.size
                        t = _11754 + ceil32(return_data.size) + 32
                        s = _11754 + _11774 + 32
                        while s < _11754 + _11774 + (32 * _11794) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12394 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_12394]
                    else:
                        mem[mem[64] + 4] = _10843
                        mem[mem[64] + 36] = _10892
                        require ext_code.size(address(_10842))
                        call address(_10842).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _10843, _10892
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _10892
                        emit Earn(_10892);
                        _10993 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_10993))
                        staticcall address(_10993).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11037 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_11037]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11173 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11193 = mem[_11173]
                        _11213 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _11229 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _11193
                        mem[mem[64] + 36] = 128
                        _11245 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_11229 + 100] = block.timestamp + 60
                        require ext_code.size(address(_11213))
                        call address(_11213).mem[mem[64] len 4] with:
                           value _11193 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _11229 + (32 * _11245) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11755 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11775 = mem[_11755]
                        require mem[_11755] <= test266151307()
                        require _11755 + mem[_11755] + 31 < _11755 + return_data.size
                        _11795 = mem[_11755 + mem[_11755]]
                        if mem[_11755 + mem[_11755]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11755 + mem[_11755]]) + 1 < 0 or _11755 + ceil32(return_data.size) + ceil32(32 * mem[_11755 + mem[_11755]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11755 + ceil32(return_data.size) + ceil32(32 * mem[_11755 + mem[_11755]]) + 1
                        mem[_11755 + ceil32(return_data.size)] = _11795
                        require _11775 + (32 * _11795) + 32 <= return_data.size
                        t = _11755 + ceil32(return_data.size) + 32
                        s = _11755 + _11775 + 32
                        while s < _11755 + _11775 + (32 * _11795) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _12395 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_12395]
                else:
                    if 1 >= mem[_5320]:
                        revert with 0, 50
                    mem[_5320 + 64] = address(_5308)
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = eth.balance(this.address) / 2
                    mem[mem[64] + 36] = 64
                    _10568 = mem[_5320]
                    mem[mem[64] + 68] = mem[_5320]
                    s = 0
                    t = _5320 + 32
                    u = mem[64] + 100
                    while s < _10568:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_5306))
                    staticcall address(_5306).getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args Mask(255, 1, eth.balance(this.address)), 64, mem[mem[64] + 68 len (32 * _10568) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11768 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11788 = mem[_11768]
                    require mem[_11768] <= test266151307()
                    require _11768 + mem[_11768] + 31 < _11768 + return_data.size
                    _11808 = mem[_11768 + mem[_11768]]
                    if mem[_11768 + mem[_11768]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11768 + mem[_11768]]) + 1 < 0 or _11768 + ceil32(return_data.size) + ceil32(32 * mem[_11768 + mem[_11768]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11768 + ceil32(return_data.size) + ceil32(32 * mem[_11768 + mem[_11768]]) + 1
                    mem[_11768 + ceil32(return_data.size)] = _11808
                    require _11788 + (32 * _11808) + 32 <= return_data.size
                    t = _11768 + ceil32(return_data.size) + 32
                    s = _11768 + _11788 + 32
                    while s < _11768 + _11788 + (32 * _11808) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _11808:
                        revert with 0, 50
                    _12356 = mem[_11768 + ceil32(return_data.size) + 64]
                    if mem[_11768 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_11768 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_11768 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _11808:
                        revert with 0, 50
                    _12428 = mem[_11768 + ceil32(return_data.size) + 64]
                    if mem[_11768 + ceil32(return_data.size) + 64] < 100 * mem[_11768 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _12432 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _12428 - (100 * _12356 / 10000)
                    mem[mem[64] + 36] = 128
                    _12436 = mem[_5320]
                    mem[mem[64] + 132] = mem[_5320]
                    s = 0
                    t = _5320 + 32
                    u = mem[64] + 164
                    while s < _12436:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_12432 + 68] = this.address
                    mem[_12432 + 100] = block.timestamp + 60
                    require ext_code.size(address(_5306))
                    call address(_5306).mem[mem[64] len 4] with:
                       value _12428 - (100 * _12356 / 10000) wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _12432 + (32 * _12436) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12840 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _12844 = mem[_12840]
                    require mem[_12840] <= test266151307()
                    require _12840 + mem[_12840] + 31 < _12840 + return_data.size
                    _12848 = mem[_12840 + mem[_12840]]
                    if mem[_12840 + mem[_12840]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_12840 + mem[_12840]]) + 1 < 0 or _12840 + ceil32(return_data.size) + ceil32(32 * mem[_12840 + mem[_12840]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _12840 + ceil32(return_data.size) + ceil32(32 * mem[_12840 + mem[_12840]]) + 1
                    mem[_12840 + ceil32(return_data.size)] = _12848
                    require _12844 + (32 * _12848) + 32 <= return_data.size
                    t = _12840 + ceil32(return_data.size) + 32
                    s = _12840 + _12844 + 32
                    while s < _12840 + _12844 + (32 * _12848) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5307))
                    staticcall address(_5307).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13236 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13240 = mem[_13236]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_5308))
                    staticcall address(_5308).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13252 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13256 = mem[_13252]
                    if not _13240:
                        revert with 0, 'Desired value is zero'
                    if not mem[_13252]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_5306)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5307))
                    call address(_5307).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5306), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13284 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13284] == bool(mem[_13284])
                    mem[mem[64] + 4] = address(_5306)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_5308))
                    call address(_5308).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_5306), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13300 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13300] == bool(mem[_13300])
                    if _13240 and 1 > -1 / _13240:
                        revert with 0, 17
                    if _13240 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13240 < 100 * _13240 / 10000:
                        revert with 0, 17
                    if _13256 and 1 > -1 / _13256:
                        revert with 0, 17
                    if _13256 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13256 < 100 * _13256 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _13240
                    mem[mem[64] + 100] = _13256
                    mem[mem[64] + 132] = _13240 - (100 * _13240 / 10000)
                    mem[mem[64] + 164] = _13256 - (100 * _13256 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_5306))
                    call address(_5306).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_5307), address(_5308), _13240, _13256, _13240 - (100 * _13240 / 10000), _13256 - (100 * _13256 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13332 = mem[_508 + 160]
                    _13333 = mem[_508 + 64]
                    _13334 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13334))
                    staticcall address(_13334).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13352 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13356 = mem[_13352]
                    if _13333 >= 999999:
                        mem[mem[64] + 4] = mem[_13352]
                        require ext_code.size(address(_13332))
                        call address(_13332).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _13356
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13356
                        emit Earn(_13356);
                        _13392 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13392))
                        staticcall address(_13392).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13416 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_13416]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13464 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13472 = mem[_13464]
                        _13480 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13488 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13472
                        mem[mem[64] + 36] = 128
                        _13496 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < _13496:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_13488 + 68] = this.address
                        mem[_13488 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13480))
                        call address(_13480).mem[mem[64] len 4] with:
                           value _13472 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13488 + (32 * _13496) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13608 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13616 = mem[_13608]
                        require mem[_13608] <= test266151307()
                        require _13608 + mem[_13608] + 31 < _13608 + return_data.size
                        _13624 = mem[_13608 + mem[_13608]]
                        if mem[_13608 + mem[_13608]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_13608 + mem[_13608]]) + 1 < 0 or _13608 + ceil32(return_data.size) + ceil32(32 * mem[_13608 + mem[_13608]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _13608 + ceil32(return_data.size) + ceil32(32 * mem[_13608 + mem[_13608]]) + 1
                        mem[_13608 + ceil32(return_data.size)] = _13624
                        require _13616 + (32 * _13624) + 32 <= return_data.size
                        t = _13608 + ceil32(return_data.size) + 32
                        s = _13608 + _13616 + 32
                        while s < _13608 + _13616 + (32 * _13624) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13704 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_13704]
                    else:
                        mem[mem[64] + 4] = _13333
                        mem[mem[64] + 36] = _13356
                        require ext_code.size(address(_13332))
                        call address(_13332).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _13333, _13356
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13356
                        emit Earn(_13356);
                        _13393 = mem[_508 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13393))
                        staticcall address(_13393).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13417 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_508 + 96] = mem[_13417]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13465 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13473 = mem[_13465]
                        _13481 = mem[_508]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13489 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13473
                        mem[mem[64] + 36] = 128
                        _13497 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13489 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13481))
                        call address(_13481).mem[mem[64] len 4] with:
                           value _13473 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13489 + (32 * _13497) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13609 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13617 = mem[_13609]
                        require mem[_13609] <= test266151307()
                        require _13609 + mem[_13609] + 31 < _13609 + return_data.size
                        _13625 = mem[_13609 + mem[_13609]]
                        if mem[_13609 + mem[_13609]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_13609 + mem[_13609]]) + 1 < 0 or _13609 + ceil32(return_data.size) + ceil32(32 * mem[_13609 + mem[_13609]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _13609 + ceil32(return_data.size) + ceil32(32 * mem[_13609 + mem[_13609]]) + 1
                        mem[_13609 + ceil32(return_data.size)] = _13625
                        require _13617 + (32 * _13625) + 32 <= return_data.size
                        t = _13609 + ceil32(return_data.size) + 32
                        s = _13609 + _13617 + 32
                        while s < _13609 + _13617 + (32 * _13625) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13705 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_13705]
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _508
            s = _2518 - (100 * _2518 / 10000)
            s = stor9[idx].field_0
            continue 
        mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_512
        mem[mem[64] + 36] = _569
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        call strategyInfo[stor9[idx].field_0].field_1280.0x441a3e70 with:
             gas gas_remaining wei
            args strategyInfo[stor9[idx].field_0].field_512, _569
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        staticcall strategyInfo[stor9[idx].field_0].field_1280.SUSHI() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _615 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _619 = mem[_615]
        require mem[_615] == mem[_615 + 12 len 20]
        if 0 >= mem[96]:
            revert with 0, 50
        mem[128] = mem[_615 + 12 len 20]
        if 1 >= mem[96]:
            revert with 0, 50
        mem[160] = stor21
        require ext_code.size(address(_619))
        staticcall address(_619).0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _656 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _659 = mem[_656]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_619))
        staticcall address(_619).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _666 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _672 = mem[_666]
        if mem[_666] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _659:
            revert with 0, 18
        mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args strategyInfo[stor9[idx].field_0].field_0
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _693 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _704 = mem[_693]
        if 10^12 * _672 / _659 and mem[_693] > -1 / 10^12 * _672 / _659:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _672 / _659 * _704 / 10^12
        mem[mem[64] + 36] = 64
        _747 = mem[96]
        mem[mem[64] + 68] = mem[96]
        s = 0
        t = 128
        u = mem[64] + 100
        while s < mem[96]:
            mem[u] = mem[t + 12 len 20]
            s = s + 1
            t = t + 32
            u = u + 32
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
        staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len (32 * _747) + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1293 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1300 = mem[_1293]
        require mem[_1293] <= test266151307()
        require _1293 + mem[_1293] + 31 < _1293 + return_data.size
        _1307 = mem[_1293 + mem[_1293]]
        if mem[_1293 + mem[_1293]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_1293 + mem[_1293]]) + 1 < 0 or _1293 + ceil32(return_data.size) + ceil32(32 * mem[_1293 + mem[_1293]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _1293 + ceil32(return_data.size) + ceil32(32 * mem[_1293 + mem[_1293]]) + 1
        mem[_1293 + ceil32(return_data.size)] = _1307
        require _1300 + (32 * _1307) + 32 <= return_data.size
        t = _1293 + ceil32(return_data.size) + 32
        s = _1293 + _1300 + 32
        while s < _1293 + _1300 + (32 * _1307) + 32:
            mem[t] = mem[s]
            t = t + 32
            s = s + 32
            continue 
        if 1 >= _1307:
            revert with 0, 50
        _2519 = mem[_1293 + ceil32(return_data.size) + 64]
        if mem[_1293 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_1293 + ceil32(return_data.size) + 64]:
            revert with 0, 17
        if mem[_1293 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if mem[_1293 + ceil32(return_data.size) + 64] < 100 * mem[_1293 + ceil32(return_data.size) + 64] / 10000:
            revert with 0, 17
        _2559 = mem[_508]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_619))
        staticcall address(_619).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2583 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2591 = mem[_2583]
        if 60 > !block.timestamp:
            revert with 0, 17
        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _2591
        mem[mem[64] + 36] = _2519 - (100 * _2519 / 10000)
        mem[mem[64] + 68] = 160
        _2611 = mem[96]
        mem[mem[64] + 164] = mem[96]
        s = 0
        t = 128
        u = mem[64] + 196
        while s < mem[96]:
            mem[u] = mem[t + 12 len 20]
            s = s + 1
            t = t + 32
            u = u + 32
            continue 
        mem[mem[64] + 100] = this.address
        mem[mem[64] + 132] = block.timestamp + 60
        require ext_code.size(address(_2559))
        call address(_2559).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len 96], address(this.address), block.timestamp + 60, mem[mem[64] + 164 len (32 * _2611) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3835 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3843 = mem[_3835]
        require mem[_3835] <= test266151307()
        require _3835 + mem[_3835] + 31 < _3835 + return_data.size
        _3855 = mem[_3835 + mem[_3835]]
        if mem[_3835 + mem[_3835]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_3835 + mem[_3835]]) + 1 < 0 or _3835 + ceil32(return_data.size) + ceil32(32 * mem[_3835 + mem[_3835]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _3835 + ceil32(return_data.size) + ceil32(32 * mem[_3835 + mem[_3835]]) + 1
        mem[_3835 + ceil32(return_data.size)] = _3855
        require _3843 + (32 * _3855) + 32 <= return_data.size
        t = _3835 + ceil32(return_data.size) + 32
        s = _3835 + _3843 + 32
        while s < _3835 + _3843 + (32 * _3855) + 32:
            mem[t] = mem[s]
            t = t + 32
            s = s + 32
            continue 
        _5309 = mem[_508]
        _5310 = mem[_508 + 192]
        _5311 = mem[_508 + 224]
        _5322 = mem[64]
        mem[mem[64]] = 2
        mem[64] = mem[64] + 96
        mem[_5322 + 32 len 64] = call.data[calldata.size len 64]
        if not mem[_5322]:
            revert with 0, 50
        mem[_5322 + 32] = stor21
        if stor21 == address(_5310):
            if stor21 == address(_5311):
                mem[_5322 + 100] = this.address
                require ext_code.size(address(_5310))
                staticcall address(_5310).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[_5322 + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_5322 + ceil32(return_data.size) + 100] = this.address
                require ext_code.size(address(_5311))
                staticcall address(_5311).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[_5322 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 'Desired value is zero'
                if not ext_call.return_data[0]:
                    revert with 0, 'Desired value is zero'
                mem[_5322 + (2 * ceil32(return_data.size)) + 100] = address(_5309)
                mem[_5322 + (2 * ceil32(return_data.size)) + 132] = -1
                require ext_code.size(address(_5310))
                call address(_5310).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_5309), -1
                mem[_5322 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                mem[_5322 + (4 * ceil32(return_data.size)) + 100] = address(_5309)
                mem[_5322 + (4 * ceil32(return_data.size)) + 132] = -1
                require ext_code.size(address(_5311))
                call address(_5311).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_5309), -1
                mem[_5322 + (4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                    revert with 0, 17
                if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[_5322 + (6 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
                mem[_5322 + (6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                mem[_5322 + (6 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                mem[_5322 + (6 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                mem[_5322 + (6 * ceil32(return_data.size)) + 292] = this.address
                mem[_5322 + (6 * ceil32(return_data.size)) + 324] = block.timestamp + 60
                require ext_code.size(address(_5309))
                call address(_5309).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                     gas gas_remaining wei
                    args address(_5310), address(_5311), ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
                mem[_5322 + (6 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _5322 + (7 * ceil32(return_data.size)) + 96
                require return_data.size >= 96
                _5638 = mem[_508 + 160]
                _5639 = mem[_508 + 64]
                _5640 = mem[_508 + 32]
                mem[_5322 + (7 * ceil32(return_data.size)) + 100] = this.address
                require ext_code.size(address(_5640))
                staticcall address(_5640).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[_5322 + (7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _5322 + (8 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                if _5639 >= 999999:
                    mem[_5322 + (8 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                    require ext_code.size(address(_5638))
                    call address(_5638).deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_5322 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    emit Earn(ext_call.return_data[0]);
                    _5781 = mem[_508 + 32]
                    mem[_5322 + (8 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(address(_5781))
                    staticcall address(_5781).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5322 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_508 + 96] = ext_call.return_data[0]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[_5322 + (10 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5322 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _5322 + (11 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _5992 = mem[_508]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[_5322 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[_5322 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                    mem[_5322 + (11 * ceil32(return_data.size)) + 132] = 128
                    mem[_5322 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                    s = 0
                    t = 128
                    u = _5322 + (11 * ceil32(return_data.size)) + 260
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_5322 + (11 * ceil32(return_data.size)) + 164] = this.address
                    mem[_5322 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                    require ext_code.size(address(_5992))
                    call address(_5992).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                       value ext_call.return_data[0] wei
                         gas gas_remaining wei
                        args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_5322 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_5322 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _5322 + (12 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _6890 = mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                    require mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                    require _5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _5322 + (11 * ceil32(return_data.size)) + return_data.size + 96
                    _6906 = mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                    if mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _5322 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = _5322 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                    mem[_5322 + (12 * ceil32(return_data.size)) + 96] = _6906
                    require _6890 + (32 * _6906) + 32 <= return_data.size
                    t = _5322 + (12 * ceil32(return_data.size)) + 128
                    s = _5322 + (11 * ceil32(return_data.size)) + _6890 + 128
                    while s < _5322 + (11 * ceil32(return_data.size)) + _6890 + (32 * _6906) + 128:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8130 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_8130]
                else:
                    mem[_5322 + (8 * ceil32(return_data.size)) + 100] = _5639
                    mem[_5322 + (8 * ceil32(return_data.size)) + 132] = ext_call.return_data[0]
                    require ext_code.size(address(_5638))
                    call address(_5638).0xe2bbb158 with:
                         gas gas_remaining wei
                        args _5639, ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_5322 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    emit Earn(ext_call.return_data[0]);
                    _5782 = mem[_508 + 32]
                    mem[_5322 + (8 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(address(_5782))
                    staticcall address(_5782).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5322 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_508 + 96] = ext_call.return_data[0]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[_5322 + (10 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_5322 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _5322 + (11 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _5993 = mem[_508]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[_5322 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[_5322 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                    mem[_5322 + (11 * ceil32(return_data.size)) + 132] = 128
                    mem[_5322 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                    s = 0
                    t = 128
                    u = _5322 + (11 * ceil32(return_data.size)) + 260
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_5322 + (11 * ceil32(return_data.size)) + 164] = this.address
                    mem[_5322 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                    require ext_code.size(address(_5993))
                    call address(_5993).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                       value ext_call.return_data[0] wei
                         gas gas_remaining wei
                        args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_5322 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_5322 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _5322 + (12 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _6891 = mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                    require mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                    require _5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _5322 + (11 * ceil32(return_data.size)) + return_data.size + 96
                    _6907 = mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                    if mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _5322 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = _5322 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_5322 + (11 * ceil32(return_data.size)) + mem[_5322 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                    mem[_5322 + (12 * ceil32(return_data.size)) + 96] = _6907
                    require _6891 + (32 * _6907) + 32 <= return_data.size
                    t = _5322 + (12 * ceil32(return_data.size)) + 128
                    s = _5322 + (11 * ceil32(return_data.size)) + _6891 + 128
                    while s < _5322 + (11 * ceil32(return_data.size)) + _6891 + (32 * _6907) + 128:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8131 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_8131]
            else:
                if 1 >= mem[_5322]:
                    revert with 0, 50
                mem[_5322 + 64] = address(_5311)
                mem[_5322 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[_5322 + 100] = eth.balance(this.address) / 2
                mem[_5322 + 132] = 64
                mem[_5322 + 164] = mem[_5322]
                s = 0
                t = _5322 + 32
                u = _5322 + 196
                while s < mem[_5322]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(_5309))
                staticcall address(_5309).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _5322 + (32 * mem[_5322]) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6880 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _6898 = mem[_6880]
                require mem[_6880] <= test266151307()
                require _6880 + mem[_6880] + 31 < _6880 + return_data.size
                _6914 = mem[_6880 + mem[_6880]]
                if mem[_6880 + mem[_6880]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_6880 + mem[_6880]]) + 1 < 0 or _6880 + ceil32(return_data.size) + ceil32(32 * mem[_6880 + mem[_6880]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _6880 + ceil32(return_data.size) + ceil32(32 * mem[_6880 + mem[_6880]]) + 1
                mem[_6880 + ceil32(return_data.size)] = _6914
                require _6898 + (32 * _6914) + 32 <= return_data.size
                t = _6880 + ceil32(return_data.size) + 32
                s = _6880 + _6898 + 32
                while s < _6880 + _6898 + (32 * _6914) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _6914:
                    revert with 0, 50
                _8106 = mem[_6880 + ceil32(return_data.size) + 64]
                if mem[_6880 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_6880 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_6880 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 1 >= _6914:
                    revert with 0, 50
                _8154 = mem[_6880 + ceil32(return_data.size) + 64]
                if mem[_6880 + ceil32(return_data.size) + 64] < 100 * mem[_6880 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _8154 - (100 * _8106 / 10000)
                mem[mem[64] + 36] = 128
                _8170 = mem[_5322]
                mem[mem[64] + 132] = mem[_5322]
                s = 0
                t = _5322 + 32
                u = mem[64] + 164
                while s < _8170:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 68] = this.address
                mem[mem[64] + 100] = block.timestamp + 60
                require ext_code.size(address(_5309))
                call address(_5309).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value _8154 - (100 * _8106 / 10000) wei
                     gas gas_remaining wei
                    args _8154 - (100 * _8106 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _8170) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9330 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _9338 = mem[_9330]
                require mem[_9330] <= test266151307()
                require _9330 + mem[_9330] + 31 < _9330 + return_data.size
                _9346 = mem[_9330 + mem[_9330]]
                if mem[_9330 + mem[_9330]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_9330 + mem[_9330]]) + 1 < 0 or _9330 + ceil32(return_data.size) + ceil32(32 * mem[_9330 + mem[_9330]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _9330 + ceil32(return_data.size) + ceil32(32 * mem[_9330 + mem[_9330]]) + 1
                mem[_9330 + ceil32(return_data.size)] = _9346
                require _9338 + (32 * _9346) + 32 <= return_data.size
                t = _9330 + ceil32(return_data.size) + 32
                s = _9330 + _9338 + 32
                while s < _9330 + _9338 + (32 * _9346) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_5310))
                staticcall address(_5310).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10549 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _10558 = mem[_10549]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_5311))
                staticcall address(_5311).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10593 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _10602 = mem[_10593]
                if not _10558:
                    revert with 0, 'Desired value is zero'
                if not mem[_10593]:
                    revert with 0, 'Desired value is zero'
                mem[mem[64] + 4] = address(_5309)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_5310))
                call address(_5310).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_5309), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10674 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_10674] == bool(mem[_10674])
                mem[mem[64] + 4] = address(_5309)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_5311))
                call address(_5311).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_5309), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10714 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_10714] == bool(mem[_10714])
                if _10558 and 1 > -1 / _10558:
                    revert with 0, 17
                if _10558 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _10558 < 100 * _10558 / 10000:
                    revert with 0, 17
                if _10602 and 1 > -1 / _10602:
                    revert with 0, 17
                if _10602 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _10602 < 100 * _10602 / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64] + 68] = _10558
                mem[mem[64] + 100] = _10602
                mem[mem[64] + 132] = _10558 - (100 * _10558 / 10000)
                mem[mem[64] + 164] = _10602 - (100 * _10602 / 10000)
                mem[mem[64] + 196] = this.address
                mem[mem[64] + 228] = block.timestamp + 60
                require ext_code.size(address(_5309))
                call address(_5309).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                     gas gas_remaining wei
                    args address(_5310), address(_5311), _10558, _10602, _10558 - (100 * _10558 / 10000), _10602 - (100 * _10602 / 10000), address(this.address), block.timestamp + 60
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                _10831 = mem[_508 + 160]
                _10832 = mem[_508 + 64]
                _10833 = mem[_508 + 32]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_10833))
                staticcall address(_10833).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10877 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _10889 = mem[_10877]
                if _10832 >= 999999:
                    mem[mem[64] + 4] = mem[_10877]
                    require ext_code.size(address(_10831))
                    call address(_10831).deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args _10889
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _10889
                    emit Earn(_10889);
                    _10967 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_10967))
                    staticcall address(_10967).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11030 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_508 + 96] = mem[_11030]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11160 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11183 = mem[_11160]
                    _11203 = mem[_508]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _11222 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _11183
                    mem[mem[64] + 36] = 128
                    _11238 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[_11222 + 100] = block.timestamp + 60
                    require ext_code.size(address(_11203))
                    call address(_11203).mem[mem[64] len 4] with:
                       value _11183 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _11222 + (32 * _11238) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11756 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11776 = mem[_11756]
                    require mem[_11756] <= test266151307()
                    require _11756 + mem[_11756] + 31 < _11756 + return_data.size
                    _11796 = mem[_11756 + mem[_11756]]
                    if mem[_11756 + mem[_11756]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11756 + mem[_11756]]) + 1 < 0 or _11756 + ceil32(return_data.size) + ceil32(32 * mem[_11756 + mem[_11756]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11756 + ceil32(return_data.size) + ceil32(32 * mem[_11756 + mem[_11756]]) + 1
                    mem[_11756 + ceil32(return_data.size)] = _11796
                    require _11776 + (32 * _11796) + 32 <= return_data.size
                    t = _11756 + ceil32(return_data.size) + 32
                    s = _11756 + _11776 + 32
                    while s < _11756 + _11776 + (32 * _11796) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12396 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_12396]
                else:
                    mem[mem[64] + 4] = _10832
                    mem[mem[64] + 36] = _10889
                    require ext_code.size(address(_10831))
                    call address(_10831).0xe2bbb158 with:
                         gas gas_remaining wei
                        args _10832, _10889
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _10889
                    emit Earn(_10889);
                    _10968 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_10968))
                    staticcall address(_10968).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11031 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_508 + 96] = mem[_11031]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11161 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11184 = mem[_11161]
                    _11204 = mem[_508]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _11223 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _11184
                    mem[mem[64] + 36] = 128
                    _11239 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[_11223 + 100] = block.timestamp + 60
                    require ext_code.size(address(_11204))
                    call address(_11204).mem[mem[64] len 4] with:
                       value _11184 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _11223 + (32 * _11239) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11757 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11777 = mem[_11757]
                    require mem[_11757] <= test266151307()
                    require _11757 + mem[_11757] + 31 < _11757 + return_data.size
                    _11797 = mem[_11757 + mem[_11757]]
                    if mem[_11757 + mem[_11757]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11757 + mem[_11757]]) + 1 < 0 or _11757 + ceil32(return_data.size) + ceil32(32 * mem[_11757 + mem[_11757]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11757 + ceil32(return_data.size) + ceil32(32 * mem[_11757 + mem[_11757]]) + 1
                    mem[_11757 + ceil32(return_data.size)] = _11797
                    require _11777 + (32 * _11797) + 32 <= return_data.size
                    t = _11757 + ceil32(return_data.size) + 32
                    s = _11757 + _11777 + 32
                    while s < _11757 + _11777 + (32 * _11797) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12397 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_12397]
        else:
            if 1 >= mem[_5322]:
                revert with 0, 50
            mem[_5322 + 64] = address(_5310)
            mem[_5322 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[_5322 + 100] = eth.balance(this.address) / 2
            mem[_5322 + 132] = 64
            mem[_5322 + 164] = mem[_5322]
            s = 0
            t = _5322 + 32
            u = _5322 + 196
            while s < mem[_5322]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(address(_5309))
            staticcall address(_5309).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _5322 + (32 * mem[_5322]) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _6881 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _6899 = mem[_6881]
            require mem[_6881] <= test266151307()
            require _6881 + mem[_6881] + 31 < _6881 + return_data.size
            _6915 = mem[_6881 + mem[_6881]]
            if mem[_6881 + mem[_6881]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_6881 + mem[_6881]]) + 1 < 0 or _6881 + ceil32(return_data.size) + ceil32(32 * mem[_6881 + mem[_6881]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _6881 + ceil32(return_data.size) + ceil32(32 * mem[_6881 + mem[_6881]]) + 1
            mem[_6881 + ceil32(return_data.size)] = _6915
            require _6899 + (32 * _6915) + 32 <= return_data.size
            t = _6881 + ceil32(return_data.size) + 32
            s = _6881 + _6899 + 32
            while s < _6881 + _6899 + (32 * _6915) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _6915:
                revert with 0, 50
            _8107 = mem[_6881 + ceil32(return_data.size) + 64]
            if mem[_6881 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_6881 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_6881 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if 1 >= _6915:
                revert with 0, 50
            _8155 = mem[_6881 + ceil32(return_data.size) + 64]
            if mem[_6881 + ceil32(return_data.size) + 64] < 100 * mem[_6881 + ceil32(return_data.size) + 64] / 10000:
                revert with 0, 17
            if 60 > !block.timestamp:
                revert with 0, 17
            _8163 = mem[64]
            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _8155 - (100 * _8107 / 10000)
            mem[mem[64] + 36] = 128
            _8171 = mem[_5322]
            mem[mem[64] + 132] = mem[_5322]
            s = 0
            t = _5322 + 32
            u = mem[64] + 164
            while s < _8171:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            mem[_8163 + 68] = this.address
            mem[_8163 + 100] = block.timestamp + 60
            require ext_code.size(address(_5309))
            call address(_5309).mem[mem[64] len 4] with:
               value _8155 - (100 * _8107 / 10000) wei
                 gas gas_remaining wei
                args mem[mem[64] + 4 len _8163 + (32 * _8171) + -mem[64] + 160]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9331 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _9339 = mem[_9331]
            require mem[_9331] <= test266151307()
            require _9331 + mem[_9331] + 31 < _9331 + return_data.size
            _9347 = mem[_9331 + mem[_9331]]
            if mem[_9331 + mem[_9331]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_9331 + mem[_9331]]) + 1 < 0 or _9331 + ceil32(return_data.size) + ceil32(32 * mem[_9331 + mem[_9331]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _9331 + ceil32(return_data.size) + ceil32(32 * mem[_9331 + mem[_9331]]) + 1
            mem[_9331 + ceil32(return_data.size)] = _9347
            require _9339 + (32 * _9347) + 32 <= return_data.size
            t = _9331 + ceil32(return_data.size) + 32
            s = _9331 + _9339 + 32
            while s < _9331 + _9339 + (32 * _9347) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if stor21 == address(_5311):
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_5310))
                staticcall address(_5310).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10553 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _10565 = mem[_10553]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_5311))
                staticcall address(_5311).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10597 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _10609 = mem[_10597]
                if not _10565:
                    revert with 0, 'Desired value is zero'
                if not mem[_10597]:
                    revert with 0, 'Desired value is zero'
                mem[mem[64] + 4] = address(_5309)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_5310))
                call address(_5310).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_5309), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10681 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_10681] == bool(mem[_10681])
                mem[mem[64] + 4] = address(_5309)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_5311))
                call address(_5311).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_5309), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10722 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_10722] == bool(mem[_10722])
                if _10565 and 1 > -1 / _10565:
                    revert with 0, 17
                if _10565 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _10565 < 100 * _10565 / 10000:
                    revert with 0, 17
                if _10609 and 1 > -1 / _10609:
                    revert with 0, 17
                if _10609 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _10609 < 100 * _10609 / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64] + 68] = _10565
                mem[mem[64] + 100] = _10609
                mem[mem[64] + 132] = _10565 - (100 * _10565 / 10000)
                mem[mem[64] + 164] = _10609 - (100 * _10609 / 10000)
                mem[mem[64] + 196] = this.address
                mem[mem[64] + 228] = block.timestamp + 60
                require ext_code.size(address(_5309))
                call address(_5309).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                     gas gas_remaining wei
                    args address(_5310), address(_5311), _10565, _10609, _10565 - (100 * _10565 / 10000), _10609 - (100 * _10609 / 10000), address(this.address), block.timestamp + 60
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                _10847 = mem[_508 + 160]
                _10848 = mem[_508 + 64]
                _10849 = mem[_508 + 32]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_10849))
                staticcall address(_10849).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10882 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _10894 = mem[_10882]
                if _10848 >= 999999:
                    mem[mem[64] + 4] = mem[_10882]
                    require ext_code.size(address(_10847))
                    call address(_10847).deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args _10894
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _10894
                    emit Earn(_10894);
                    _10998 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_10998))
                    staticcall address(_10998).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11039 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_508 + 96] = mem[_11039]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11174 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11194 = mem[_11174]
                    _11214 = mem[_508]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _11230 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _11194
                    mem[mem[64] + 36] = 128
                    _11246 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[_11230 + 100] = block.timestamp + 60
                    require ext_code.size(address(_11214))
                    call address(_11214).mem[mem[64] len 4] with:
                       value _11194 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _11230 + (32 * _11246) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11758 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11778 = mem[_11758]
                    require mem[_11758] <= test266151307()
                    require _11758 + mem[_11758] + 31 < _11758 + return_data.size
                    _11798 = mem[_11758 + mem[_11758]]
                    if mem[_11758 + mem[_11758]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11758 + mem[_11758]]) + 1 < 0 or _11758 + ceil32(return_data.size) + ceil32(32 * mem[_11758 + mem[_11758]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11758 + ceil32(return_data.size) + ceil32(32 * mem[_11758 + mem[_11758]]) + 1
                    mem[_11758 + ceil32(return_data.size)] = _11798
                    require _11778 + (32 * _11798) + 32 <= return_data.size
                    t = _11758 + ceil32(return_data.size) + 32
                    s = _11758 + _11778 + 32
                    while s < _11758 + _11778 + (32 * _11798) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12398 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_12398]
                else:
                    mem[mem[64] + 4] = _10848
                    mem[mem[64] + 36] = _10894
                    require ext_code.size(address(_10847))
                    call address(_10847).0xe2bbb158 with:
                         gas gas_remaining wei
                        args _10848, _10894
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _10894
                    emit Earn(_10894);
                    _10999 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_10999))
                    staticcall address(_10999).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11040 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_508 + 96] = mem[_11040]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11175 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11195 = mem[_11175]
                    _11215 = mem[_508]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _11231 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _11195
                    mem[mem[64] + 36] = 128
                    _11247 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[_11231 + 100] = block.timestamp + 60
                    require ext_code.size(address(_11215))
                    call address(_11215).mem[mem[64] len 4] with:
                       value _11195 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _11231 + (32 * _11247) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11759 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11779 = mem[_11759]
                    require mem[_11759] <= test266151307()
                    require _11759 + mem[_11759] + 31 < _11759 + return_data.size
                    _11799 = mem[_11759 + mem[_11759]]
                    if mem[_11759 + mem[_11759]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11759 + mem[_11759]]) + 1 < 0 or _11759 + ceil32(return_data.size) + ceil32(32 * mem[_11759 + mem[_11759]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11759 + ceil32(return_data.size) + ceil32(32 * mem[_11759 + mem[_11759]]) + 1
                    mem[_11759 + ceil32(return_data.size)] = _11799
                    require _11779 + (32 * _11799) + 32 <= return_data.size
                    t = _11759 + ceil32(return_data.size) + 32
                    s = _11759 + _11779 + 32
                    while s < _11759 + _11779 + (32 * _11799) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _12399 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_12399]
            else:
                if 1 >= mem[_5322]:
                    revert with 0, 50
                mem[_5322 + 64] = address(_5311)
                _10559 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = eth.balance(this.address) / 2
                mem[mem[64] + 36] = 64
                _10569 = mem[_5322]
                mem[mem[64] + 68] = mem[_5322]
                s = 0
                t = _5322 + 32
                u = mem[64] + 100
                while s < _10569:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(_5309))
                staticcall address(_5309).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _10559 + (32 * _10569) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _11769 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _11789 = mem[_11769]
                require mem[_11769] <= test266151307()
                require _11769 + mem[_11769] + 31 < _11769 + return_data.size
                _11809 = mem[_11769 + mem[_11769]]
                if mem[_11769 + mem[_11769]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_11769 + mem[_11769]]) + 1 < 0 or _11769 + ceil32(return_data.size) + ceil32(32 * mem[_11769 + mem[_11769]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _11769 + ceil32(return_data.size) + ceil32(32 * mem[_11769 + mem[_11769]]) + 1
                mem[_11769 + ceil32(return_data.size)] = _11809
                require _11789 + (32 * _11809) + 32 <= return_data.size
                t = _11769 + ceil32(return_data.size) + 32
                s = _11769 + _11789 + 32
                while s < _11769 + _11789 + (32 * _11809) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _11809:
                    revert with 0, 50
                _12357 = mem[_11769 + ceil32(return_data.size) + 64]
                if mem[_11769 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_11769 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_11769 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 1 >= _11809:
                    revert with 0, 50
                _12429 = mem[_11769 + ceil32(return_data.size) + 64]
                if mem[_11769 + ceil32(return_data.size) + 64] < 100 * mem[_11769 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _12429 - (100 * _12357 / 10000)
                mem[mem[64] + 36] = 128
                _12437 = mem[_5322]
                mem[mem[64] + 132] = mem[_5322]
                s = 0
                t = _5322 + 32
                u = mem[64] + 164
                while s < _12437:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 68] = this.address
                mem[mem[64] + 100] = block.timestamp + 60
                require ext_code.size(address(_5309))
                call address(_5309).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value _12429 - (100 * _12357 / 10000) wei
                     gas gas_remaining wei
                    args _12429 - (100 * _12357 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _12437) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _12841 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _12845 = mem[_12841]
                require mem[_12841] <= test266151307()
                require _12841 + mem[_12841] + 31 < _12841 + return_data.size
                _12849 = mem[_12841 + mem[_12841]]
                if mem[_12841 + mem[_12841]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_12841 + mem[_12841]]) + 1 < 0 or _12841 + ceil32(return_data.size) + ceil32(32 * mem[_12841 + mem[_12841]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _12841 + ceil32(return_data.size) + ceil32(32 * mem[_12841 + mem[_12841]]) + 1
                mem[_12841 + ceil32(return_data.size)] = _12849
                require _12845 + (32 * _12849) + 32 <= return_data.size
                t = _12841 + ceil32(return_data.size) + 32
                s = _12841 + _12845 + 32
                while s < _12841 + _12845 + (32 * _12849) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_5310))
                staticcall address(_5310).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13237 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13241 = mem[_13237]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_5311))
                staticcall address(_5311).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13253 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13257 = mem[_13253]
                if not _13241:
                    revert with 0, 'Desired value is zero'
                if not mem[_13253]:
                    revert with 0, 'Desired value is zero'
                mem[mem[64] + 4] = address(_5309)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_5310))
                call address(_5310).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_5309), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13285 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_13285] == bool(mem[_13285])
                mem[mem[64] + 4] = address(_5309)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_5311))
                call address(_5311).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_5309), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13301 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_13301] == bool(mem[_13301])
                if _13241 and 1 > -1 / _13241:
                    revert with 0, 17
                if _13241 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _13241 < 100 * _13241 / 10000:
                    revert with 0, 17
                if _13257 and 1 > -1 / _13257:
                    revert with 0, 17
                if _13257 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _13257 < 100 * _13257 / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64] + 68] = _13241
                mem[mem[64] + 100] = _13257
                mem[mem[64] + 132] = _13241 - (100 * _13241 / 10000)
                mem[mem[64] + 164] = _13257 - (100 * _13257 / 10000)
                mem[mem[64] + 196] = this.address
                mem[mem[64] + 228] = block.timestamp + 60
                require ext_code.size(address(_5309))
                call address(_5309).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                     gas gas_remaining wei
                    args address(_5310), address(_5311), _13241, _13257, _13241 - (100 * _13241 / 10000), _13257 - (100 * _13257 / 10000), address(this.address), block.timestamp + 60
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                _13335 = mem[_508 + 160]
                _13336 = mem[_508 + 64]
                _13337 = mem[_508 + 32]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_13337))
                staticcall address(_13337).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13353 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13357 = mem[_13353]
                if _13336 >= 999999:
                    mem[mem[64] + 4] = mem[_13353]
                    require ext_code.size(address(_13335))
                    call address(_13335).deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args _13357
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _13357
                    emit Earn(_13357);
                    _13394 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13394))
                    staticcall address(_13394).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13418 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_508 + 96] = mem[_13418]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13466 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13474 = mem[_13466]
                    _13482 = mem[_508]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _13490 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _13474
                    mem[mem[64] + 36] = 128
                    _13498 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[_13490 + 100] = block.timestamp + 60
                    require ext_code.size(address(_13482))
                    call address(_13482).mem[mem[64] len 4] with:
                       value _13474 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _13490 + (32 * _13498) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13610 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13618 = mem[_13610]
                    require mem[_13610] <= test266151307()
                    require _13610 + mem[_13610] + 31 < _13610 + return_data.size
                    _13626 = mem[_13610 + mem[_13610]]
                    if mem[_13610 + mem[_13610]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_13610 + mem[_13610]]) + 1 < 0 or _13610 + ceil32(return_data.size) + ceil32(32 * mem[_13610 + mem[_13610]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _13610 + ceil32(return_data.size) + ceil32(32 * mem[_13610 + mem[_13610]]) + 1
                    mem[_13610 + ceil32(return_data.size)] = _13626
                    require _13618 + (32 * _13626) + 32 <= return_data.size
                    t = _13610 + ceil32(return_data.size) + 32
                    s = _13610 + _13618 + 32
                    while s < _13610 + _13618 + (32 * _13626) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13706 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_13706]
                else:
                    mem[mem[64] + 4] = _13336
                    mem[mem[64] + 36] = _13357
                    require ext_code.size(address(_13335))
                    call address(_13335).0xe2bbb158 with:
                         gas gas_remaining wei
                        args _13336, _13357
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _13357
                    emit Earn(_13357);
                    _13395 = mem[_508 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13395))
                    staticcall address(_13395).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13419 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_508 + 96] = mem[_13419]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13467 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13475 = mem[_13467]
                    _13483 = mem[_508]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _13491 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _13475
                    mem[mem[64] + 36] = 128
                    _13499 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[_13491 + 100] = block.timestamp + 60
                    require ext_code.size(address(_13483))
                    call address(_13483).mem[mem[64] len 4] with:
                       value _13475 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _13491 + (32 * _13499) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13611 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13619 = mem[_13611]
                    require mem[_13611] <= test266151307()
                    require _13611 + mem[_13611] + 31 < _13611 + return_data.size
                    _13627 = mem[_13611 + mem[_13611]]
                    if mem[_13611 + mem[_13611]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_13611 + mem[_13611]]) + 1 < 0 or _13611 + ceil32(return_data.size) + ceil32(32 * mem[_13611 + mem[_13611]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _13611 + ceil32(return_data.size) + ceil32(32 * mem[_13611 + mem[_13611]]) + 1
                    mem[_13611 + ceil32(return_data.size)] = _13627
                    require _13619 + (32 * _13627) + 32 <= return_data.size
                    t = _13611 + ceil32(return_data.size) + 32
                    s = _13611 + _13619 + 32
                    while s < _13611 + _13619 + (32 * _13627) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13707 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_13707]
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = _508
        s = _2519 - (100 * _2519 / 10000)
        s = stor9[idx].field_0
        continue 
    _509 = mem[64]
    mem[64] = mem[64] + 256
    mem[_509] = 0
    mem[_509 + 32] = 0
    mem[_509 + 64] = 0
    mem[_509 + 96] = 0
    mem[_509 + 128] = 0
    mem[_509 + 160] = 0
    mem[_509 + 192] = 0
    mem[_509 + 224] = 0
    _513 = mem[64]
    mem[mem[64]] = 2
    mem[64] = mem[64] + 96
    mem[_513 + 32 len 64] = call.data[calldata.size len 64]
    idx = 0
    s = 96
    t = 0
    u = 0
    v = 0
    v = _509
    v = 0
    v = 0
    while idx < stor9.length:
        mem[0] = stor9[idx].field_0
        mem[32] = 6
        _1278 = mem[64]
        mem[64] = mem[64] + 256
        mem[_1278] = strategyInfo[stor9[idx].field_0].field_0
        mem[_1278 + 32] = strategyInfo[stor9[idx].field_0].field_256
        mem[_1278 + 64] = strategyInfo[stor9[idx].field_0].field_512
        mem[_1278 + 96] = strategyInfo[stor9[idx].field_0].field_768
        mem[_1278 + 128] = strategyInfo[stor9[idx].field_0].field_1024
        mem[_1278 + 160] = strategyInfo[stor9[idx].field_0].field_1280
        mem[_1278 + 192] = strategyInfo[stor9[idx].field_0].field_1536
        mem[_1278 + 224] = strategyInfo[stor9[idx].field_0].field_1792
        if 999999 > strategyInfo[stor9[idx].field_0].field_512:
            mem[mem[64] + 36] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.0x93f1a40b with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_512, this.address
            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1291 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 64
            _1297 = mem[_1291]
            if not mem[_1291]:
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s
                t = t
                u = u
                v = mem[_1291]
                v = _1278
                v = stor9[idx].field_0
                v = v
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
            staticcall strategyInfo[stor9[idx].field_0].field_256.getReserves() with:
                    gas gas_remaining wei
            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1326 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 96
            _1336 = mem[_1326]
            require mem[_1326] == mem[_1326 + 18 len 14]
            _1342 = mem[_1326 + 32]
            require mem[_1326 + 32] == mem[_1326 + 50 len 14]
            require mem[_1326 + 64] == mem[_1326 + 92 len 4]
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
            staticcall strategyInfo[stor9[idx].field_0].field_256.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1350 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1352 = mem[_1350]
            if _1297 > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not mem[_1350]:
                revert with 0, 18
            if 10^12 * _1297 / mem[_1350] and Mask(112, 0, _1336) > -1 / 10^12 * _1297 / mem[_1350]:
                revert with 0, 17
            if 10^12 * _1297 / mem[_1350] and Mask(112, 0, _1342) > -1 / 10^12 * _1297 / mem[_1350]:
                revert with 0, 17
            if 1 >= mem[_513]:
                revert with 0, 50
            mem[_513 + 64] = stor21
            if 0 >= mem[_513]:
                revert with 0, 50
            if stor21 == strategyInfo[stor9[idx].field_0].field_1536:
                mem[_513 + 32] = strategyInfo[stor9[idx].field_0].field_1792
                _1412 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _1297 / _1352 * Mask(112, 0, _1342) / 10^12
                mem[mem[64] + 36] = 64
                _1423 = mem[_513]
                mem[mem[64] + 68] = mem[_513]
                s = 0
                t = _513 + 32
                u = mem[64] + 100
                while s < _1423:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _1412 + (32 * _1423) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2533 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2539 = mem[_2533]
                require mem[_2533] <= test266151307()
                require _2533 + mem[_2533] + 31 < _2533 + return_data.size
                _2545 = mem[_2533 + mem[_2533]]
                if mem[_2533 + mem[_2533]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_2533 + mem[_2533]]) + 1 < 0 or _2533 + ceil32(return_data.size) + ceil32(32 * mem[_2533 + mem[_2533]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _2533 + ceil32(return_data.size) + ceil32(32 * mem[_2533 + mem[_2533]]) + 1
                mem[_2533 + ceil32(return_data.size)] = _2545
                require _2539 + (32 * _2545) + 32 <= return_data.size
                t = _2533 + ceil32(return_data.size) + 32
                s = _2533 + _2539 + 32
                while s < _2533 + _2539 + (32 * _2545) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _2545:
                    revert with 0, 50
                _3829 = mem[_2533 + ceil32(return_data.size) + 64]
                if 10^12 * _1297 / _1352 * Mask(112, 0, _1336) / 10^12 > !mem[_2533 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                mem[_1278 + 128] = (10^12 * _1297 / _1352 * Mask(112, 0, _1336) / 10^12) + mem[_2533 + ceil32(return_data.size) + 64]
                if v > !((10^12 * _1297 / _1352 * Mask(112, 0, _1336) / 10^12) + _3829):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _2533 + ceil32(return_data.size)
                t = 10^12 * _1297 / _1352 * Mask(112, 0, _1342) / 10^12
                u = 10^12 * _1297 / _1352 * Mask(112, 0, _1336) / 10^12
                v = _1297
                v = _1278
                v = stor9[idx].field_0
                v = v + (10^12 * _1297 / _1352 * Mask(112, 0, _1336) / 10^12) + _3829
                continue 
            mem[_513 + 32] = strategyInfo[stor9[idx].field_0].field_1536
            if stor21 == strategyInfo[stor9[idx].field_0].field_1792:
                _1420 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _1297 / _1352 * Mask(112, 0, _1336) / 10^12
                mem[mem[64] + 36] = 64
                _1428 = mem[_513]
                mem[mem[64] + 68] = mem[_513]
                s = 0
                t = _513 + 32
                u = mem[64] + 100
                while s < _1428:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _1420 + (32 * _1428) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _2532 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _2538 = mem[_2532]
                require mem[_2532] <= test266151307()
                require _2532 + mem[_2532] + 31 < _2532 + return_data.size
                _2544 = mem[_2532 + mem[_2532]]
                if mem[_2532 + mem[_2532]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_2532 + mem[_2532]]) + 1 < 0 or _2532 + ceil32(return_data.size) + ceil32(32 * mem[_2532 + mem[_2532]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _2532 + ceil32(return_data.size) + ceil32(32 * mem[_2532 + mem[_2532]]) + 1
                mem[_2532 + ceil32(return_data.size)] = _2544
                require _2538 + (32 * _2544) + 32 <= return_data.size
                t = _2532 + ceil32(return_data.size) + 32
                s = _2532 + _2538 + 32
                while s < _2532 + _2538 + (32 * _2544) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _2544:
                    revert with 0, 50
                _3828 = mem[_2532 + ceil32(return_data.size) + 64]
                if 10^12 * _1297 / _1352 * Mask(112, 0, _1342) / 10^12 > !mem[_2532 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                mem[_1278 + 128] = (10^12 * _1297 / _1352 * Mask(112, 0, _1342) / 10^12) + mem[_2532 + ceil32(return_data.size) + 64]
                if v > !((10^12 * _1297 / _1352 * Mask(112, 0, _1342) / 10^12) + _3828):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _2532 + ceil32(return_data.size)
                t = 10^12 * _1297 / _1352 * Mask(112, 0, _1342) / 10^12
                u = 10^12 * _1297 / _1352 * Mask(112, 0, _1336) / 10^12
                v = _1297
                v = _1278
                v = stor9[idx].field_0
                v = v + (10^12 * _1297 / _1352 * Mask(112, 0, _1342) / 10^12) + _3828
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
            staticcall strategyInfo[stor9[idx].field_0].field_1536.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1429 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1433 = mem[_1429]
            mem[mem[64] + 4] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
            staticcall strategyInfo[stor9[idx].field_0].field_1536.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1469 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1484 = mem[_1469]
            if mem[_1469] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _1433:
                revert with 0, 18
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_0
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1566 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1580 = mem[_1566]
            if 10^12 * _1484 / _1433 and mem[_1566] > -1 / 10^12 * _1484 / _1433:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _1484 / _1433 * _1580 / 10^12
            mem[mem[64] + 36] = 64
            _1657 = mem[_513]
            mem[mem[64] + 68] = mem[_513]
            t = 0
            u = _513 + 32
            w = mem[64] + 100
            while t < _1657:
                mem[w] = mem[u + 12 len 20]
                t = t + 1
                u = u + 32
                w = w + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _1484 / _1433 * _1580 / 10^12, 64, mem[mem[64] + 68 len (32 * _1657) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2531 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2537 = mem[_2531]
            require mem[_2531] <= test266151307()
            require _2531 + mem[_2531] + 31 < _2531 + return_data.size
            _2543 = mem[_2531 + mem[_2531]]
            if mem[_2531 + mem[_2531]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_2531 + mem[_2531]]) + 1 < 0 or _2531 + ceil32(return_data.size) + ceil32(32 * mem[_2531 + mem[_2531]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _2531 + ceil32(return_data.size) + ceil32(32 * mem[_2531 + mem[_2531]]) + 1
            mem[_2531 + ceil32(return_data.size)] = _2543
            require _2537 + (32 * _2543) + 32 <= return_data.size
            u = _2531 + ceil32(return_data.size) + 32
            t = _2531 + _2537 + 32
            while t < _2531 + _2537 + (32 * _2543) + 32:
                mem[u] = mem[t]
                u = u + 32
                t = t + 32
                continue 
            if 1 >= _2543:
                revert with 0, 50
            _3827 = mem[_2531 + ceil32(return_data.size) + 64]
            mem[_1278 + 128] = mem[_2531 + ceil32(return_data.size) + 64]
            if v > !_3827:
                revert with 0, 17
            if 0 >= mem[_513]:
                revert with 0, 50
            mem[_513 + 32] = mem[_1278 + 236 len 20]
            _3848 = mem[_1278 + 224]
            _3849 = mem[_1278]
            require ext_code.size(mem[_1278 + 236 len 20])
            staticcall mem[_1278 + 236 len 20].0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3859 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3865 = mem[_3859]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_3848))
            staticcall address(_3848).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3875 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3889 = mem[_3875]
            if mem[_3875] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _3865:
                revert with 0, 18
            mem[mem[64] + 4] = address(_3849)
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args address(_3849)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3943 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3961 = mem[_3943]
            if 10^12 * _3889 / _3865 and mem[_3943] > -1 / 10^12 * _3889 / _3865:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _3889 / _3865 * _3961 / 10^12
            mem[mem[64] + 36] = 64
            _4017 = mem[_513]
            mem[mem[64] + 68] = mem[_513]
            t = 0
            u = _513 + 32
            w = mem[64] + 100
            while t < _4017:
                mem[w] = mem[u + 12 len 20]
                t = t + 1
                u = u + 32
                w = w + 32
                continue 
            require ext_code.size(address(_3849))
            staticcall address(_3849).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _3889 / _3865 * _3961 / 10^12, 64, mem[mem[64] + 68 len (32 * _4017) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5329 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5339 = mem[_5329]
            require mem[_5329] <= test266151307()
            require _5329 + mem[_5329] + 31 < _5329 + return_data.size
            _5349 = mem[_5329 + mem[_5329]]
            if mem[_5329 + mem[_5329]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_5329 + mem[_5329]]) + 1 < 0 or _5329 + ceil32(return_data.size) + ceil32(32 * mem[_5329 + mem[_5329]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _5329 + ceil32(return_data.size) + ceil32(32 * mem[_5329 + mem[_5329]]) + 1
            mem[_5329 + ceil32(return_data.size)] = _5349
            require _5339 + (32 * _5349) + 32 <= return_data.size
            u = _5329 + ceil32(return_data.size) + 32
            t = _5329 + _5339 + 32
            while t < _5329 + _5339 + (32 * _5349) + 32:
                mem[u] = mem[t]
                u = u + 32
                t = t + 32
                continue 
            if 1 >= _5349:
                revert with 0, 50
            if mem[_1278 + 128] > !mem[_5329 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_1278 + 128] = mem[_1278 + 128] + mem[_5329 + ceil32(return_data.size) + 64]
            if v + _3827 > !mem[_1278 + 128]:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            t = 10^12 * _1297 / _1352 * Mask(112, 0, _1342) / 10^12
            u = 10^12 * _1297 / _1352 * Mask(112, 0, _1336) / 10^12
            v = _1297
            v = _1278
            v = stor9[idx].field_0
            v = v + _3827 + mem[_1278 + 128]
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        staticcall strategyInfo[stor9[idx].field_0].field_1280.info(address arg1) with:
                gas gas_remaining wei
               args this.address
        mem[mem[64] len 320] = ext_call.return_data[0 len 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1290 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 320
        _1296 = mem[64]
        if mem[64] + 192 > test266151307() or mem[64] + 192 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 192
        mem[_1296] = mem[_1290]
        mem[_1296 + 32] = mem[_1290 + 32]
        mem[_1296 + 64] = mem[_1290 + 64]
        require return_data.size - 96 >= 96
        _1310 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_1310] = mem[_1290 + 96]
        mem[_1310 + 32] = mem[_1290 + 128]
        mem[_1310 + 64] = mem[_1290 + 160]
        mem[_1296 + 96] = _1310
        mem[_1296 + 128] = mem[_1290 + 192]
        require return_data.size - 224 >= 96
        _1322 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_1322] = mem[_1290 + 224]
        mem[_1322 + 32] = mem[_1290 + 256]
        mem[_1322 + 64] = mem[_1290 + 288]
        mem[_1296 + 160] = _1322
        _1331 = mem[_1296 + 64]
        if not mem[_1296 + 64]:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            t = t
            u = u
            v = mem[_1296 + 64]
            v = _1278
            v = stor9[idx].field_0
            v = v
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
        staticcall strategyInfo[stor9[idx].field_0].field_256.getReserves() with:
                gas gas_remaining wei
        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1346 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 96
        _1347 = mem[_1346]
        require mem[_1346] == mem[_1346 + 18 len 14]
        _1351 = mem[_1346 + 32]
        require mem[_1346 + 32] == mem[_1346 + 50 len 14]
        require mem[_1346 + 64] == mem[_1346 + 92 len 4]
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
        staticcall strategyInfo[stor9[idx].field_0].field_256.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1372 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1377 = mem[_1372]
        if _1331 > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not mem[_1372]:
            revert with 0, 18
        if 10^12 * _1331 / mem[_1372] and Mask(112, 0, _1347) > -1 / 10^12 * _1331 / mem[_1372]:
            revert with 0, 17
        if 10^12 * _1331 / mem[_1372] and Mask(112, 0, _1351) > -1 / 10^12 * _1331 / mem[_1372]:
            revert with 0, 17
        if 1 >= mem[_513]:
            revert with 0, 50
        mem[_513 + 64] = stor21
        if 0 >= mem[_513]:
            revert with 0, 50
        if stor21 == strategyInfo[stor9[idx].field_0].field_1536:
            mem[_513 + 32] = strategyInfo[stor9[idx].field_0].field_1792
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12
            mem[mem[64] + 36] = 64
            _1481 = mem[_513]
            mem[mem[64] + 68] = mem[_513]
            s = 0
            t = _513 + 32
            u = mem[64] + 100
            while s < _1481:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12, 64, mem[mem[64] + 68 len (32 * _1481) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2530 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2536 = mem[_2530]
            require mem[_2530] <= test266151307()
            require _2530 + mem[_2530] + 31 < _2530 + return_data.size
            _2542 = mem[_2530 + mem[_2530]]
            if mem[_2530 + mem[_2530]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_2530 + mem[_2530]]) + 1 < 0 or _2530 + ceil32(return_data.size) + ceil32(32 * mem[_2530 + mem[_2530]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _2530 + ceil32(return_data.size) + ceil32(32 * mem[_2530 + mem[_2530]]) + 1
            mem[_2530 + ceil32(return_data.size)] = _2542
            require _2536 + (32 * _2542) + 32 <= return_data.size
            t = _2530 + ceil32(return_data.size) + 32
            s = _2530 + _2536 + 32
            while s < _2530 + _2536 + (32 * _2542) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _2542:
                revert with 0, 50
            _3826 = mem[_2530 + ceil32(return_data.size) + 64]
            if 10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12 > !mem[_2530 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_1278 + 128] = (10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12) + mem[_2530 + ceil32(return_data.size) + 64]
            if v > !((10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12) + _3826):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _2530 + ceil32(return_data.size)
            t = 10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12
            u = 10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12
            v = _1331
            v = _1278
            v = stor9[idx].field_0
            v = v + (10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12) + _3826
            continue 
        mem[_513 + 32] = strategyInfo[stor9[idx].field_0].field_1536
        if stor21 == strategyInfo[stor9[idx].field_0].field_1792:
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12
            mem[mem[64] + 36] = 64
            _1483 = mem[_513]
            mem[mem[64] + 68] = mem[_513]
            s = 0
            t = _513 + 32
            w = mem[64] + 100
            while s < _1483:
                mem[w] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                w = w + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12, 64, mem[mem[64] + 68 len (32 * _1483) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2529 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2535 = mem[_2529]
            require mem[_2529] <= test266151307()
            require _2529 + mem[_2529] + 31 < _2529 + return_data.size
            _2541 = mem[_2529 + mem[_2529]]
            if mem[_2529 + mem[_2529]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_2529 + mem[_2529]]) + 1 < 0 or _2529 + ceil32(return_data.size) + ceil32(32 * mem[_2529 + mem[_2529]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _2529 + ceil32(return_data.size) + ceil32(32 * mem[_2529 + mem[_2529]]) + 1
            mem[_2529 + ceil32(return_data.size)] = _2541
            require _2535 + (32 * _2541) + 32 <= return_data.size
            t = _2529 + ceil32(return_data.size) + 32
            s = _2529 + _2535 + 32
            while s < _2529 + _2535 + (32 * _2541) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _2541:
                revert with 0, 50
            _3825 = mem[_2529 + ceil32(return_data.size) + 64]
            if 10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12 > !mem[_2529 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_1278 + 128] = (10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12) + mem[_2529 + ceil32(return_data.size) + 64]
            if v > !((10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12) + _3825):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _2529 + ceil32(return_data.size)
            t = 10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12
            s = 10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12
            v = _1331
            v = _1278
            v = stor9[idx].field_0
            v = v + (10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12) + _3825
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
        staticcall strategyInfo[stor9[idx].field_0].field_1536.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1490 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1507 = mem[_1490]
        mem[mem[64] + 4] = this.address
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
        staticcall strategyInfo[stor9[idx].field_0].field_1536.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1535 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1549 = mem[_1535]
        if mem[_1535] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _1507:
            revert with 0, 18
        mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args strategyInfo[stor9[idx].field_0].field_0
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1631 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1656 = mem[_1631]
        if 10^12 * _1549 / _1507 and mem[_1631] > -1 / 10^12 * _1549 / _1507:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _1549 / _1507 * _1656 / 10^12
        mem[mem[64] + 36] = 64
        _1710 = mem[_513]
        mem[mem[64] + 68] = mem[_513]
        t = 0
        u = _513 + 32
        w = mem[64] + 100
        while t < _1710:
            mem[w] = mem[u + 12 len 20]
            t = t + 1
            u = u + 32
            w = w + 32
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
        staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 10^12 * _1549 / _1507 * _1656 / 10^12, 64, mem[mem[64] + 68 len (32 * _1710) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2528 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2534 = mem[_2528]
        require mem[_2528] <= test266151307()
        require _2528 + mem[_2528] + 31 < _2528 + return_data.size
        _2540 = mem[_2528 + mem[_2528]]
        if mem[_2528 + mem[_2528]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_2528 + mem[_2528]]) + 1 < 0 or _2528 + ceil32(return_data.size) + ceil32(32 * mem[_2528 + mem[_2528]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _2528 + ceil32(return_data.size) + ceil32(32 * mem[_2528 + mem[_2528]]) + 1
        mem[_2528 + ceil32(return_data.size)] = _2540
        require _2534 + (32 * _2540) + 32 <= return_data.size
        u = _2528 + ceil32(return_data.size) + 32
        t = _2528 + _2534 + 32
        while t < _2528 + _2534 + (32 * _2540) + 32:
            mem[u] = mem[t]
            u = u + 32
            t = t + 32
            continue 
        if 1 >= _2540:
            revert with 0, 50
        _3824 = mem[_2528 + ceil32(return_data.size) + 64]
        mem[_1278 + 128] = mem[_2528 + ceil32(return_data.size) + 64]
        if v > !_3824:
            revert with 0, 17
        if 0 >= mem[_513]:
            revert with 0, 50
        mem[_513 + 32] = mem[_1278 + 236 len 20]
        _3846 = mem[_1278 + 224]
        _3847 = mem[_1278]
        require ext_code.size(mem[_1278 + 236 len 20])
        staticcall mem[_1278 + 236 len 20].0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3858 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3864 = mem[_3858]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_3846))
        staticcall address(_3846).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3874 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3888 = mem[_3874]
        if mem[_3874] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _3864:
            revert with 0, 18
        mem[mem[64] + 4] = address(_3847)
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args address(_3847)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3942 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3960 = mem[_3942]
        if 10^12 * _3888 / _3864 and mem[_3942] > -1 / 10^12 * _3888 / _3864:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _3888 / _3864 * _3960 / 10^12
        mem[mem[64] + 36] = 64
        _4016 = mem[_513]
        mem[mem[64] + 68] = mem[_513]
        t = 0
        u = _513 + 32
        w = mem[64] + 100
        while t < _4016:
            mem[w] = mem[u + 12 len 20]
            t = t + 1
            u = u + 32
            w = w + 32
            continue 
        require ext_code.size(address(_3847))
        staticcall address(_3847).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 10^12 * _3888 / _3864 * _3960 / 10^12, 64, mem[mem[64] + 68 len (32 * _4016) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5328 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _5338 = mem[_5328]
        require mem[_5328] <= test266151307()
        require _5328 + mem[_5328] + 31 < _5328 + return_data.size
        _5348 = mem[_5328 + mem[_5328]]
        if mem[_5328 + mem[_5328]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_5328 + mem[_5328]]) + 1 < 0 or _5328 + ceil32(return_data.size) + ceil32(32 * mem[_5328 + mem[_5328]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _5328 + ceil32(return_data.size) + ceil32(32 * mem[_5328 + mem[_5328]]) + 1
        mem[_5328 + ceil32(return_data.size)] = _5348
        require _5338 + (32 * _5348) + 32 <= return_data.size
        u = _5328 + ceil32(return_data.size) + 32
        t = _5328 + _5338 + 32
        while t < _5328 + _5338 + (32 * _5348) + 32:
            mem[u] = mem[t]
            u = u + 32
            t = t + 32
            continue 
        if 1 >= _5348:
            revert with 0, 50
        if mem[_1278 + 128] > !mem[_5328 + ceil32(return_data.size) + 64]:
            revert with 0, 17
        mem[_1278 + 128] = mem[_1278 + 128] + mem[_5328 + ceil32(return_data.size) + 64]
        if v + _3824 > !mem[_1278 + 128]:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s
        t = 10^12 * _1331 / _1377 * Mask(112, 0, _1351) / 10^12
        u = 10^12 * _1331 / _1377 * Mask(112, 0, _1347) / 10^12
        v = _1331
        v = _1278
        v = stor9[idx].field_0
        v = v + _3824 + mem[_1278 + 128]
        continue 
    emit 0xf9ede3d1 
}

function deposit() payable {
    mem[96] = 2
    mem[128 len 64] = call.data[calldata.size len 64]
    mem[64] = 448
    mem[192] = 0
    mem[224] = 0
    mem[256] = 0
    mem[288] = 0
    mem[320] = 0
    mem[352] = 0
    mem[384] = 0
    mem[416] = 0
    idx = 0
    s = 192
    s = 0
    s = 0
    while idx < stor9.length:
        mem[0] = stor9[idx].field_0
        mem[32] = 6
        _742 = mem[64]
        mem[64] = mem[64] + 256
        mem[_742] = strategyInfo[stor9[idx].field_0].field_0
        mem[_742 + 32] = strategyInfo[stor9[idx].field_0].field_256
        mem[_742 + 64] = strategyInfo[stor9[idx].field_0].field_512
        mem[_742 + 96] = strategyInfo[stor9[idx].field_0].field_768
        mem[_742 + 128] = strategyInfo[stor9[idx].field_0].field_1024
        mem[_742 + 160] = strategyInfo[stor9[idx].field_0].field_1280
        mem[_742 + 192] = strategyInfo[stor9[idx].field_0].field_1536
        mem[_742 + 224] = strategyInfo[stor9[idx].field_0].field_1792
        if 999999 > strategyInfo[stor9[idx].field_0].field_512:
            mem[mem[64] + 36] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.0x93f1a40b with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_512, this.address
            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _753 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 64
            _762 = mem[_753]
            if not mem[_753]:
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _742
                s = mem[_753]
                s = stor9[idx].field_0
                continue 
            mem[0] = stor9[idx].field_0
            mem[32] = 6
            _784 = mem[64]
            mem[64] = mem[64] + 256
            mem[_784] = strategyInfo[stor9[idx].field_0].field_0
            mem[_784 + 32] = strategyInfo[stor9[idx].field_0].field_256
            mem[_784 + 64] = strategyInfo[stor9[idx].field_0].field_512
            mem[_784 + 96] = strategyInfo[stor9[idx].field_0].field_768
            mem[_784 + 128] = strategyInfo[stor9[idx].field_0].field_1024
            mem[_784 + 160] = strategyInfo[stor9[idx].field_0].field_1280
            mem[_784 + 192] = strategyInfo[stor9[idx].field_0].field_1536
            mem[_784 + 224] = strategyInfo[stor9[idx].field_0].field_1792
            if 999999 <= strategyInfo[stor9[idx].field_0].field_512:
                mem[mem[64] + 4] = _762
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
                call strategyInfo[stor9[idx].field_0].field_1280.0x2e1a7d4d with:
                     gas gas_remaining wei
                    args _762
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
                staticcall strategyInfo[stor9[idx].field_0].field_1280.SUSHI() with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _827 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _840 = mem[_827]
                require mem[_827] == mem[_827 + 12 len 20]
                if 0 >= mem[96]:
                    revert with 0, 50
                mem[128] = mem[_827 + 12 len 20]
                if 1 >= mem[96]:
                    revert with 0, 50
                mem[160] = stor21
                require ext_code.size(address(_840))
                staticcall address(_840).0x18160ddd with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _889 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _900 = mem[_889]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_840))
                staticcall address(_840).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _917 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _930 = mem[_917]
                if mem[_917] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                    revert with 0, 17
                if not _900:
                    revert with 0, 18
                mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
                require ext_code.size(stor21)
                staticcall stor21.0x70a08231 with:
                        gas gas_remaining wei
                       args strategyInfo[stor9[idx].field_0].field_0
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _956 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _961 = mem[_956]
                if 10^12 * _930 / _900 and mem[_956] > -1 / 10^12 * _930 / _900:
                    revert with 0, 17
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _930 / _900 * _961 / 10^12
                mem[mem[64] + 36] = 64
                _995 = mem[96]
                mem[mem[64] + 68] = mem[96]
                s = 0
                t = 128
                u = mem[64] + 100
                while s < mem[96]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (32 * _995) + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1764 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1771 = mem[_1764]
                require mem[_1764] <= test266151307()
                require _1764 + mem[_1764] + 31 < _1764 + return_data.size
                _1786 = mem[_1764 + mem[_1764]]
                if mem[_1764 + mem[_1764]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_1764 + mem[_1764]]) + 1 < 0 or _1764 + ceil32(return_data.size) + ceil32(32 * mem[_1764 + mem[_1764]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _1764 + ceil32(return_data.size) + ceil32(32 * mem[_1764 + mem[_1764]]) + 1
                mem[_1764 + ceil32(return_data.size)] = _1786
                require _1771 + (32 * _1786) + 32 <= return_data.size
                t = _1764 + ceil32(return_data.size) + 32
                s = _1764 + _1771 + 32
                while s < _1764 + _1771 + (32 * _1786) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _1786:
                    revert with 0, 50
                _3456 = mem[_1764 + ceil32(return_data.size) + 64]
                if mem[_1764 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_1764 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_1764 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if mem[_1764 + ceil32(return_data.size) + 64] < 100 * mem[_1764 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                _3538 = mem[_742]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_840))
                staticcall address(_840).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3570 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3586 = mem[_3570]
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _3586
                mem[mem[64] + 36] = _3456 - (100 * _3456 / 10000)
                mem[mem[64] + 68] = 160
                _3624 = mem[96]
                mem[mem[64] + 164] = mem[96]
                s = 0
                t = 128
                u = mem[64] + 196
                while s < mem[96]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 100] = this.address
                mem[mem[64] + 132] = block.timestamp + 60
                require ext_code.size(address(_3538))
                call address(_3538).mem[mem[64] len 4] with:
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len 96], address(this.address), block.timestamp + 60, mem[mem[64] + 164 len (32 * _3624) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5305 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _5321 = mem[_5305]
                require mem[_5305] <= test266151307()
                require _5305 + mem[_5305] + 31 < _5305 + return_data.size
                _5341 = mem[_5305 + mem[_5305]]
                if mem[_5305 + mem[_5305]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_5305 + mem[_5305]]) + 1 < 0 or _5305 + ceil32(return_data.size) + ceil32(32 * mem[_5305 + mem[_5305]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _5305 + ceil32(return_data.size) + ceil32(32 * mem[_5305 + mem[_5305]]) + 1
                mem[_5305 + ceil32(return_data.size)] = _5341
                require _5321 + (32 * _5341) + 32 <= return_data.size
                t = _5305 + ceil32(return_data.size) + 32
                s = _5305 + _5321 + 32
                while s < _5305 + _5321 + (32 * _5341) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                _7133 = mem[_742]
                _7134 = mem[_742 + 192]
                _7135 = mem[_742 + 224]
                _7145 = mem[64]
                mem[mem[64]] = 2
                mem[64] = mem[64] + 96
                mem[_7145 + 32 len 64] = call.data[calldata.size len 64]
                if not mem[_7145]:
                    revert with 0, 50
                mem[_7145 + 32] = stor21
                if stor21 == address(_7134):
                    if stor21 == address(_7135):
                        mem[_7145 + 100] = this.address
                        require ext_code.size(address(_7134))
                        staticcall address(_7134).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7145 + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_7145 + ceil32(return_data.size) + 100] = this.address
                        require ext_code.size(address(_7135))
                        staticcall address(_7135).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7145 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 'Desired value is zero'
                        if not ext_call.return_data[0]:
                            revert with 0, 'Desired value is zero'
                        mem[_7145 + (2 * ceil32(return_data.size)) + 100] = address(_7133)
                        mem[_7145 + (2 * ceil32(return_data.size)) + 132] = -1
                        require ext_code.size(address(_7134))
                        call address(_7134).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_7133), -1
                        mem[_7145 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        mem[_7145 + (4 * ceil32(return_data.size)) + 100] = address(_7133)
                        mem[_7145 + (4 * ceil32(return_data.size)) + 132] = -1
                        require ext_code.size(address(_7135))
                        call address(_7135).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_7133), -1
                        mem[_7145 + (4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == bool(ext_call.return_data[0])
                        if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                            revert with 0, 17
                        if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                            revert with 0, 17
                        if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_7145 + (6 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
                        mem[_7145 + (6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                        mem[_7145 + (6 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                        mem[_7145 + (6 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                        mem[_7145 + (6 * ceil32(return_data.size)) + 292] = this.address
                        mem[_7145 + (6 * ceil32(return_data.size)) + 324] = block.timestamp + 60
                        require ext_code.size(address(_7133))
                        call address(_7133).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args address(_7134), address(_7135), ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
                        mem[_7145 + (6 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _7145 + (7 * ceil32(return_data.size)) + 96
                        require return_data.size >= 96
                        _7595 = mem[_742 + 160]
                        _7596 = mem[_742 + 64]
                        _7597 = mem[_742 + 32]
                        mem[_7145 + (7 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_7597))
                        staticcall address(_7597).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7145 + (7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _7145 + (8 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        if _7596 >= 999999:
                            mem[_7145 + (8 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                            require ext_code.size(address(_7595))
                            call address(_7595).deposit(uint256 arg1) with:
                                 gas gas_remaining wei
                                args ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_7145 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            emit Earn(ext_call.return_data[0]);
                            _7739 = mem[_742 + 32]
                            mem[_7145 + (8 * ceil32(return_data.size)) + 100] = this.address
                            require ext_code.size(address(_7739))
                            staticcall address(_7739).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_7145 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[_742 + 96] = ext_call.return_data[0]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[_7145 + (10 * ceil32(return_data.size)) + 100] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_7145 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _7145 + (11 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _7961 = mem[_742]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            mem[_7145 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[_7145 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                            mem[_7145 + (11 * ceil32(return_data.size)) + 132] = 128
                            mem[_7145 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                            s = 0
                            t = 128
                            u = _7145 + (11 * ceil32(return_data.size)) + 260
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_7145 + (11 * ceil32(return_data.size)) + 164] = this.address
                            mem[_7145 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                            require ext_code.size(address(_7961))
                            call address(_7961).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                               value ext_call.return_data[0] wei
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_7145 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_7145 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _7145 + (12 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _9020 = mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                            require mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                            require _7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _7145 + (11 * ceil32(return_data.size)) + return_data.size + 96
                            _9040 = mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                            if mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _7145 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                                revert with 0, 65
                            mem[64] = _7145 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                            mem[_7145 + (12 * ceil32(return_data.size)) + 96] = _9040
                            require _9020 + (32 * _9040) + 32 <= return_data.size
                            t = _7145 + (12 * ceil32(return_data.size)) + 128
                            s = _7145 + (11 * ceil32(return_data.size)) + _9020 + 128
                            while s < _7145 + (11 * ceil32(return_data.size)) + _9020 + (32 * _9040) + 128:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _10525 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_10525]
                        else:
                            mem[_7145 + (8 * ceil32(return_data.size)) + 100] = _7596
                            mem[_7145 + (8 * ceil32(return_data.size)) + 132] = ext_call.return_data[0]
                            require ext_code.size(address(_7595))
                            call address(_7595).0xe2bbb158 with:
                                 gas gas_remaining wei
                                args _7596, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_7145 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            emit Earn(ext_call.return_data[0]);
                            _7740 = mem[_742 + 32]
                            mem[_7145 + (8 * ceil32(return_data.size)) + 100] = this.address
                            require ext_code.size(address(_7740))
                            staticcall address(_7740).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_7145 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[_742 + 96] = ext_call.return_data[0]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[_7145 + (10 * ceil32(return_data.size)) + 100] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[_7145 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _7145 + (11 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _7962 = mem[_742]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            mem[_7145 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[_7145 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                            mem[_7145 + (11 * ceil32(return_data.size)) + 132] = 128
                            mem[_7145 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                            s = 0
                            t = 128
                            u = _7145 + (11 * ceil32(return_data.size)) + 260
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_7145 + (11 * ceil32(return_data.size)) + 164] = this.address
                            mem[_7145 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                            require ext_code.size(address(_7962))
                            call address(_7962).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                               value ext_call.return_data[0] wei
                                 gas gas_remaining wei
                                args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_7145 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_7145 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _7145 + (12 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _9021 = mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                            require mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                            require _7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _7145 + (11 * ceil32(return_data.size)) + return_data.size + 96
                            _9041 = mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                            if mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _7145 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                                revert with 0, 65
                            mem[64] = _7145 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7145 + (11 * ceil32(return_data.size)) + mem[_7145 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                            mem[_7145 + (12 * ceil32(return_data.size)) + 96] = _9041
                            require _9021 + (32 * _9041) + 32 <= return_data.size
                            t = _7145 + (12 * ceil32(return_data.size)) + 128
                            s = _7145 + (11 * ceil32(return_data.size)) + _9021 + 128
                            while s < _7145 + (11 * ceil32(return_data.size)) + _9021 + (32 * _9041) + 128:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _10526 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_10526]
                    else:
                        if 1 >= mem[_7145]:
                            revert with 0, 50
                        mem[_7145 + 64] = address(_7135)
                        mem[_7145 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[_7145 + 100] = eth.balance(this.address) / 2
                        mem[_7145 + 132] = 64
                        mem[_7145 + 164] = mem[_7145]
                        s = 0
                        t = _7145 + 32
                        u = _7145 + 196
                        while s < mem[_7145]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        require ext_code.size(address(_7133))
                        staticcall address(_7133).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _7145 + (32 * mem[_7145]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _9008 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _9030 = mem[_9008]
                        require mem[_9008] <= test266151307()
                        require _9008 + mem[_9008] + 31 < _9008 + return_data.size
                        _9050 = mem[_9008 + mem[_9008]]
                        if mem[_9008 + mem[_9008]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_9008 + mem[_9008]]) + 1 < 0 or _9008 + ceil32(return_data.size) + ceil32(32 * mem[_9008 + mem[_9008]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _9008 + ceil32(return_data.size) + ceil32(32 * mem[_9008 + mem[_9008]]) + 1
                        mem[_9008 + ceil32(return_data.size)] = _9050
                        require _9030 + (32 * _9050) + 32 <= return_data.size
                        t = _9008 + ceil32(return_data.size) + 32
                        s = _9008 + _9030 + 32
                        while s < _9008 + _9030 + (32 * _9050) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        if 1 >= _9050:
                            revert with 0, 50
                        _10493 = mem[_9008 + ceil32(return_data.size) + 64]
                        if mem[_9008 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_9008 + ceil32(return_data.size) + 64]:
                            revert with 0, 17
                        if mem[_9008 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if 1 >= _9050:
                            revert with 0, 50
                        _10562 = mem[_9008 + ceil32(return_data.size) + 64]
                        if mem[_9008 + ceil32(return_data.size) + 64] < 100 * mem[_9008 + ceil32(return_data.size) + 64] / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _10562 - (100 * _10493 / 10000)
                        mem[mem[64] + 36] = 128
                        _10597 = mem[_7145]
                        mem[mem[64] + 132] = mem[_7145]
                        s = 0
                        t = _7145 + 32
                        u = mem[64] + 164
                        while s < _10597:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[mem[64] + 100] = block.timestamp + 60
                        require ext_code.size(address(_7133))
                        call address(_7133).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value _10562 - (100 * _10493 / 10000) wei
                             gas gas_remaining wei
                            args _10562 - (100 * _10493 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _10597) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _11950 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _11959 = mem[_11950]
                        require mem[_11950] <= test266151307()
                        require _11950 + mem[_11950] + 31 < _11950 + return_data.size
                        _11968 = mem[_11950 + mem[_11950]]
                        if mem[_11950 + mem[_11950]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_11950 + mem[_11950]]) + 1 < 0 or _11950 + ceil32(return_data.size) + ceil32(32 * mem[_11950 + mem[_11950]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _11950 + ceil32(return_data.size) + ceil32(32 * mem[_11950 + mem[_11950]]) + 1
                        mem[_11950 + ceil32(return_data.size)] = _11968
                        require _11959 + (32 * _11968) + 32 <= return_data.size
                        t = _11950 + ceil32(return_data.size) + 32
                        s = _11950 + _11959 + 32
                        while s < _11950 + _11959 + (32 * _11968) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_7134))
                        staticcall address(_7134).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13257 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13267 = mem[_13257]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_7135))
                        staticcall address(_7135).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13303 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13313 = mem[_13303]
                        if not _13267:
                            revert with 0, 'Desired value is zero'
                        if not mem[_13303]:
                            revert with 0, 'Desired value is zero'
                        mem[mem[64] + 4] = address(_7133)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_7134))
                        call address(_7134).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_7133), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13387 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_13387] == bool(mem[_13387])
                        mem[mem[64] + 4] = address(_7133)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_7135))
                        call address(_7135).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_7133), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13430 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_13430] == bool(mem[_13430])
                        if _13267 and 1 > -1 / _13267:
                            revert with 0, 17
                        if _13267 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _13267 < 100 * _13267 / 10000:
                            revert with 0, 17
                        if _13313 and 1 > -1 / _13313:
                            revert with 0, 17
                        if _13313 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _13313 < 100 * _13313 / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64] + 68] = _13267
                        mem[mem[64] + 100] = _13313
                        mem[mem[64] + 132] = _13267 - (100 * _13267 / 10000)
                        mem[mem[64] + 164] = _13313 - (100 * _13313 / 10000)
                        mem[mem[64] + 196] = this.address
                        mem[mem[64] + 228] = block.timestamp + 60
                        require ext_code.size(address(_7133))
                        call address(_7133).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args address(_7134), address(_7135), _13267, _13313, _13267 - (100 * _13267 / 10000), _13313 - (100 * _13313 / 10000), address(this.address), block.timestamp + 60
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _13571 = mem[_742 + 160]
                        _13572 = mem[_742 + 64]
                        _13573 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13573))
                        staticcall address(_13573).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13616 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13628 = mem[_13616]
                        if _13572 >= 999999:
                            mem[mem[64] + 4] = mem[_13616]
                            require ext_code.size(address(_13571))
                            call address(_13571).deposit(uint256 arg1) with:
                                 gas gas_remaining wei
                                args _13628
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _13628
                            emit Earn(_13628);
                            _13712 = mem[_742 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_13712))
                            staticcall address(_13712).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13770 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_742 + 96] = mem[_13770]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13902 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _13924 = mem[_13902]
                            _13944 = mem[_742]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _13964 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _13924
                            mem[mem[64] + 36] = 128
                            _13981 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < mem[96]:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[mem[64] + 68] = this.address
                            mem[_13964 + 100] = block.timestamp + 60
                            require ext_code.size(address(_13944))
                            call address(_13944).mem[mem[64] len 4] with:
                               value _13924 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _13964 + (32 * _13981) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _14549 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _14570 = mem[_14549]
                            require mem[_14549] <= test266151307()
                            require _14549 + mem[_14549] + 31 < _14549 + return_data.size
                            _14591 = mem[_14549 + mem[_14549]]
                            if mem[_14549 + mem[_14549]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_14549 + mem[_14549]]) + 1 < 0 or _14549 + ceil32(return_data.size) + ceil32(32 * mem[_14549 + mem[_14549]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _14549 + ceil32(return_data.size) + ceil32(32 * mem[_14549 + mem[_14549]]) + 1
                            mem[_14549 + ceil32(return_data.size)] = _14591
                            require _14570 + (32 * _14591) + 32 <= return_data.size
                            t = _14549 + ceil32(return_data.size) + 32
                            s = _14549 + _14570 + 32
                            while s < _14549 + _14570 + (32 * _14591) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15265 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_15265]
                        else:
                            mem[mem[64] + 4] = _13572
                            mem[mem[64] + 36] = _13628
                            require ext_code.size(address(_13571))
                            call address(_13571).0xe2bbb158 with:
                                 gas gas_remaining wei
                                args _13572, _13628
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _13628
                            emit Earn(_13628);
                            _13713 = mem[_742 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_13713))
                            staticcall address(_13713).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13771 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_742 + 96] = mem[_13771]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13903 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _13925 = mem[_13903]
                            _13945 = mem[_742]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _13965 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _13925
                            mem[mem[64] + 36] = 128
                            _13982 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < _13982:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_13965 + 68] = this.address
                            mem[_13965 + 100] = block.timestamp + 60
                            require ext_code.size(address(_13945))
                            call address(_13945).mem[mem[64] len 4] with:
                               value _13925 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _13965 + (32 * _13982) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _14550 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _14571 = mem[_14550]
                            require mem[_14550] <= test266151307()
                            require _14550 + mem[_14550] + 31 < _14550 + return_data.size
                            _14592 = mem[_14550 + mem[_14550]]
                            if mem[_14550 + mem[_14550]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_14550 + mem[_14550]]) + 1 < 0 or _14550 + ceil32(return_data.size) + ceil32(32 * mem[_14550 + mem[_14550]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _14550 + ceil32(return_data.size) + ceil32(32 * mem[_14550 + mem[_14550]]) + 1
                            mem[_14550 + ceil32(return_data.size)] = _14592
                            require _14571 + (32 * _14592) + 32 <= return_data.size
                            t = _14550 + ceil32(return_data.size) + 32
                            s = _14550 + _14571 + 32
                            while s < _14550 + _14571 + (32 * _14592) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15266 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_15266]
                else:
                    if 1 >= mem[_7145]:
                        revert with 0, 50
                    mem[_7145 + 64] = address(_7134)
                    mem[_7145 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[_7145 + 100] = eth.balance(this.address) / 2
                    mem[_7145 + 132] = 64
                    mem[_7145 + 164] = mem[_7145]
                    s = 0
                    t = _7145 + 32
                    u = _7145 + 196
                    while s < mem[_7145]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_7133))
                    staticcall address(_7133).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _7145 + (32 * mem[_7145]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9009 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _9031 = mem[_9009]
                    require mem[_9009] <= test266151307()
                    require _9009 + mem[_9009] + 31 < _9009 + return_data.size
                    _9051 = mem[_9009 + mem[_9009]]
                    if mem[_9009 + mem[_9009]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_9009 + mem[_9009]]) + 1 < 0 or _9009 + ceil32(return_data.size) + ceil32(32 * mem[_9009 + mem[_9009]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _9009 + ceil32(return_data.size) + ceil32(32 * mem[_9009 + mem[_9009]]) + 1
                    mem[_9009 + ceil32(return_data.size)] = _9051
                    require _9031 + (32 * _9051) + 32 <= return_data.size
                    t = _9009 + ceil32(return_data.size) + 32
                    s = _9009 + _9031 + 32
                    while s < _9009 + _9031 + (32 * _9051) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _9051:
                        revert with 0, 50
                    _10494 = mem[_9009 + ceil32(return_data.size) + 64]
                    if mem[_9009 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_9009 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_9009 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _9051:
                        revert with 0, 50
                    _10563 = mem[_9009 + ceil32(return_data.size) + 64]
                    if mem[_9009 + ceil32(return_data.size) + 64] < 100 * mem[_9009 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _10581 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _10563 - (100 * _10494 / 10000)
                    mem[mem[64] + 36] = 128
                    _10598 = mem[_7145]
                    mem[mem[64] + 132] = mem[_7145]
                    s = 0
                    t = _7145 + 32
                    u = mem[64] + 164
                    while s < _10598:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_10581 + 68] = this.address
                    mem[_10581 + 100] = block.timestamp + 60
                    require ext_code.size(address(_7133))
                    call address(_7133).mem[mem[64] len 4] with:
                       value _10563 - (100 * _10494 / 10000) wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _10581 + (32 * _10598) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11951 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11960 = mem[_11951]
                    require mem[_11951] <= test266151307()
                    require _11951 + mem[_11951] + 31 < _11951 + return_data.size
                    _11969 = mem[_11951 + mem[_11951]]
                    if mem[_11951 + mem[_11951]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11951 + mem[_11951]]) + 1 < 0 or _11951 + ceil32(return_data.size) + ceil32(32 * mem[_11951 + mem[_11951]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11951 + ceil32(return_data.size) + ceil32(32 * mem[_11951 + mem[_11951]]) + 1
                    mem[_11951 + ceil32(return_data.size)] = _11969
                    require _11960 + (32 * _11969) + 32 <= return_data.size
                    t = _11951 + ceil32(return_data.size) + 32
                    s = _11951 + _11960 + 32
                    while s < _11951 + _11960 + (32 * _11969) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if stor21 == address(_7135):
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_7134))
                        staticcall address(_7134).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13261 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13273 = mem[_13261]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_7135))
                        staticcall address(_7135).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13307 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13319 = mem[_13307]
                        if not _13273:
                            revert with 0, 'Desired value is zero'
                        if not mem[_13307]:
                            revert with 0, 'Desired value is zero'
                        mem[mem[64] + 4] = address(_7133)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_7134))
                        call address(_7134).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_7133), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13394 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_13394] == bool(mem[_13394])
                        mem[mem[64] + 4] = address(_7133)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_7135))
                        call address(_7135).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_7133), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13439 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_13439] == bool(mem[_13439])
                        if _13273 and 1 > -1 / _13273:
                            revert with 0, 17
                        if _13273 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _13273 < 100 * _13273 / 10000:
                            revert with 0, 17
                        if _13319 and 1 > -1 / _13319:
                            revert with 0, 17
                        if _13319 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _13319 < 100 * _13319 / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64] + 68] = _13273
                        mem[mem[64] + 100] = _13319
                        mem[mem[64] + 132] = _13273 - (100 * _13273 / 10000)
                        mem[mem[64] + 164] = _13319 - (100 * _13319 / 10000)
                        mem[mem[64] + 196] = this.address
                        mem[mem[64] + 228] = block.timestamp + 60
                        require ext_code.size(address(_7133))
                        call address(_7133).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args address(_7134), address(_7135), _13273, _13319, _13273 - (100 * _13273 / 10000), _13319 - (100 * _13319 / 10000), address(this.address), block.timestamp + 60
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _13589 = mem[_742 + 160]
                        _13590 = mem[_742 + 64]
                        _13591 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13591))
                        staticcall address(_13591).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13622 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13634 = mem[_13622]
                        if _13590 >= 999999:
                            mem[mem[64] + 4] = mem[_13622]
                            require ext_code.size(address(_13589))
                            call address(_13589).deposit(uint256 arg1) with:
                                 gas gas_remaining wei
                                args _13634
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _13634
                            emit Earn(_13634);
                            _13742 = mem[_742 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_13742))
                            staticcall address(_13742).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13780 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_742 + 96] = mem[_13780]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13914 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _13934 = mem[_13914]
                            _13954 = mem[_742]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _13973 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _13934
                            mem[mem[64] + 36] = 128
                            _13992 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < _13992:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_13973 + 68] = this.address
                            mem[_13973 + 100] = block.timestamp + 60
                            require ext_code.size(address(_13954))
                            call address(_13954).mem[mem[64] len 4] with:
                               value _13934 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _13973 + (32 * _13992) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _14551 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _14572 = mem[_14551]
                            require mem[_14551] <= test266151307()
                            require _14551 + mem[_14551] + 31 < _14551 + return_data.size
                            _14593 = mem[_14551 + mem[_14551]]
                            if mem[_14551 + mem[_14551]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_14551 + mem[_14551]]) + 1 < 0 or _14551 + ceil32(return_data.size) + ceil32(32 * mem[_14551 + mem[_14551]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _14551 + ceil32(return_data.size) + ceil32(32 * mem[_14551 + mem[_14551]]) + 1
                            mem[_14551 + ceil32(return_data.size)] = _14593
                            require _14572 + (32 * _14593) + 32 <= return_data.size
                            t = _14551 + ceil32(return_data.size) + 32
                            s = _14551 + _14572 + 32
                            while s < _14551 + _14572 + (32 * _14593) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15267 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_15267]
                        else:
                            mem[mem[64] + 4] = _13590
                            mem[mem[64] + 36] = _13634
                            require ext_code.size(address(_13589))
                            call address(_13589).0xe2bbb158 with:
                                 gas gas_remaining wei
                                args _13590, _13634
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _13634
                            emit Earn(_13634);
                            _13743 = mem[_742 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_13743))
                            staticcall address(_13743).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13781 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_742 + 96] = mem[_13781]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _13915 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _13935 = mem[_13915]
                            _13955 = mem[_742]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _13974 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _13935
                            mem[mem[64] + 36] = 128
                            _13993 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < _13993:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_13974 + 68] = this.address
                            mem[_13974 + 100] = block.timestamp + 60
                            require ext_code.size(address(_13955))
                            call address(_13955).mem[mem[64] len 4] with:
                               value _13935 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _13974 + (32 * _13993) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _14552 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _14573 = mem[_14552]
                            require mem[_14552] <= test266151307()
                            require _14552 + mem[_14552] + 31 < _14552 + return_data.size
                            _14594 = mem[_14552 + mem[_14552]]
                            if mem[_14552 + mem[_14552]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_14552 + mem[_14552]]) + 1 < 0 or _14552 + ceil32(return_data.size) + ceil32(32 * mem[_14552 + mem[_14552]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _14552 + ceil32(return_data.size) + ceil32(32 * mem[_14552 + mem[_14552]]) + 1
                            mem[_14552 + ceil32(return_data.size)] = _14594
                            require _14573 + (32 * _14594) + 32 <= return_data.size
                            t = _14552 + ceil32(return_data.size) + 32
                            s = _14552 + _14573 + 32
                            while s < _14552 + _14573 + (32 * _14594) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _15268 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_15268]
                    else:
                        if 1 >= mem[_7145]:
                            revert with 0, 50
                        mem[_7145 + 64] = address(_7135)
                        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = eth.balance(this.address) / 2
                        mem[mem[64] + 36] = 64
                        _13277 = mem[_7145]
                        mem[mem[64] + 68] = mem[_7145]
                        s = 0
                        t = _7145 + 32
                        u = mem[64] + 100
                        while s < _13277:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        require ext_code.size(address(_7133))
                        staticcall address(_7133).getAmountsOut(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args Mask(255, 1, eth.balance(this.address)), 64, mem[mem[64] + 68 len (32 * _13277) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14559 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14580 = mem[_14559]
                        require mem[_14559] <= test266151307()
                        require _14559 + mem[_14559] + 31 < _14559 + return_data.size
                        _14601 = mem[_14559 + mem[_14559]]
                        if mem[_14559 + mem[_14559]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14559 + mem[_14559]]) + 1 < 0 or _14559 + ceil32(return_data.size) + ceil32(32 * mem[_14559 + mem[_14559]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14559 + ceil32(return_data.size) + ceil32(32 * mem[_14559 + mem[_14559]]) + 1
                        mem[_14559 + ceil32(return_data.size)] = _14601
                        require _14580 + (32 * _14601) + 32 <= return_data.size
                        t = _14559 + ceil32(return_data.size) + 32
                        s = _14559 + _14580 + 32
                        while s < _14559 + _14580 + (32 * _14601) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        if 1 >= _14601:
                            revert with 0, 50
                        _15220 = mem[_14559 + ceil32(return_data.size) + 64]
                        if mem[_14559 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_14559 + ceil32(return_data.size) + 64]:
                            revert with 0, 17
                        if mem[_14559 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if 1 >= _14601:
                            revert with 0, 50
                        _15299 = mem[_14559 + ceil32(return_data.size) + 64]
                        if mem[_14559 + ceil32(return_data.size) + 64] < 100 * mem[_14559 + ceil32(return_data.size) + 64] / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _15299 - (100 * _15220 / 10000)
                        mem[mem[64] + 36] = 128
                        _15314 = mem[_7145]
                        mem[mem[64] + 132] = mem[_7145]
                        s = 0
                        t = _7145 + 32
                        u = mem[64] + 164
                        while s < _15314:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[mem[64] + 100] = block.timestamp + 60
                        require ext_code.size(address(_7133))
                        call address(_7133).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value _15299 - (100 * _15220 / 10000) wei
                             gas gas_remaining wei
                            args _15299 - (100 * _15220 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _15314) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15772 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _15776 = mem[_15772]
                        require mem[_15772] <= test266151307()
                        require _15772 + mem[_15772] + 31 < _15772 + return_data.size
                        _15780 = mem[_15772 + mem[_15772]]
                        if mem[_15772 + mem[_15772]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_15772 + mem[_15772]]) + 1 < 0 or _15772 + ceil32(return_data.size) + ceil32(32 * mem[_15772 + mem[_15772]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _15772 + ceil32(return_data.size) + ceil32(32 * mem[_15772 + mem[_15772]]) + 1
                        mem[_15772 + ceil32(return_data.size)] = _15780
                        require _15776 + (32 * _15780) + 32 <= return_data.size
                        t = _15772 + ceil32(return_data.size) + 32
                        s = _15772 + _15776 + 32
                        while s < _15772 + _15776 + (32 * _15780) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_7134))
                        staticcall address(_7134).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16168 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16172 = mem[_16168]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_7135))
                        staticcall address(_7135).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16184 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16188 = mem[_16184]
                        if not _16172:
                            revert with 0, 'Desired value is zero'
                        if not mem[_16184]:
                            revert with 0, 'Desired value is zero'
                        mem[mem[64] + 4] = address(_7133)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_7134))
                        call address(_7134).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_7133), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16216 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_16216] == bool(mem[_16216])
                        mem[mem[64] + 4] = address(_7133)
                        mem[mem[64] + 36] = -1
                        require ext_code.size(address(_7135))
                        call address(_7135).approve(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args address(_7133), -1
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16232 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        require mem[_16232] == bool(mem[_16232])
                        if _16172 and 1 > -1 / _16172:
                            revert with 0, 17
                        if _16172 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _16172 < 100 * _16172 / 10000:
                            revert with 0, 17
                        if _16188 and 1 > -1 / _16188:
                            revert with 0, 17
                        if _16188 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                            revert with 0, 17
                        if _16188 < 100 * _16188 / 10000:
                            revert with 0, 17
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[mem[64] + 68] = _16172
                        mem[mem[64] + 100] = _16188
                        mem[mem[64] + 132] = _16172 - (100 * _16172 / 10000)
                        mem[mem[64] + 164] = _16188 - (100 * _16188 / 10000)
                        mem[mem[64] + 196] = this.address
                        mem[mem[64] + 228] = block.timestamp + 60
                        require ext_code.size(address(_7133))
                        call address(_7133).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                             gas gas_remaining wei
                            args address(_7134), address(_7135), _16172, _16188, _16172 - (100 * _16172 / 10000), _16188 - (100 * _16188 / 10000), address(this.address), block.timestamp + 60
                        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 96
                        _16268 = mem[_742 + 160]
                        _16269 = mem[_742 + 64]
                        _16270 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_16270))
                        staticcall address(_16270).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16284 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16288 = mem[_16284]
                        if _16269 >= 999999:
                            mem[mem[64] + 4] = mem[_16284]
                            require ext_code.size(address(_16268))
                            call address(_16268).deposit(uint256 arg1) with:
                                 gas gas_remaining wei
                                args _16288
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _16288
                            emit Earn(_16288);
                            _16326 = mem[_742 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_16326))
                            staticcall address(_16326).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16350 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_742 + 96] = mem[_16350]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16398 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16406 = mem[_16398]
                            _16414 = mem[_742]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _16422 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _16406
                            mem[mem[64] + 36] = 128
                            _16430 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < _16430:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_16422 + 68] = this.address
                            mem[_16422 + 100] = block.timestamp + 60
                            require ext_code.size(address(_16414))
                            call address(_16414).mem[mem[64] len 4] with:
                               value _16406 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _16422 + (32 * _16430) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16542 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16550 = mem[_16542]
                            require mem[_16542] <= test266151307()
                            require _16542 + mem[_16542] + 31 < _16542 + return_data.size
                            _16558 = mem[_16542 + mem[_16542]]
                            if mem[_16542 + mem[_16542]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_16542 + mem[_16542]]) + 1 < 0 or _16542 + ceil32(return_data.size) + ceil32(32 * mem[_16542 + mem[_16542]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _16542 + ceil32(return_data.size) + ceil32(32 * mem[_16542 + mem[_16542]]) + 1
                            mem[_16542 + ceil32(return_data.size)] = _16558
                            require _16550 + (32 * _16558) + 32 <= return_data.size
                            t = _16542 + ceil32(return_data.size) + 32
                            s = _16542 + _16550 + 32
                            while s < _16542 + _16550 + (32 * _16558) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16638 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_16638]
                        else:
                            mem[mem[64] + 4] = _16269
                            mem[mem[64] + 36] = _16288
                            require ext_code.size(address(_16268))
                            call address(_16268).0xe2bbb158 with:
                                 gas gas_remaining wei
                                args _16269, _16288
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[mem[64]] = _16288
                            emit Earn(_16288);
                            _16327 = mem[_742 + 32]
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(address(_16327))
                            staticcall address(_16327).0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16351 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_742 + 96] = mem[_16351]
                            if not mem[96]:
                                revert with 0, 50
                            mem[128] = stor21
                            if 1 >= mem[96]:
                                revert with 0, 50
                            mem[160] = USDTAddress
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(stor21)
                            staticcall stor21.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16399 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16407 = mem[_16399]
                            _16415 = mem[_742]
                            if 60 > !block.timestamp:
                                revert with 0, 17
                            _16423 = mem[64]
                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = _16407
                            mem[mem[64] + 36] = 128
                            _16431 = mem[96]
                            mem[mem[64] + 132] = mem[96]
                            s = 0
                            t = 128
                            u = mem[64] + 164
                            while s < _16431:
                                mem[u] = mem[t + 12 len 20]
                                s = s + 1
                                t = t + 32
                                u = u + 32
                                continue 
                            mem[_16423 + 68] = this.address
                            mem[_16423 + 100] = block.timestamp + 60
                            require ext_code.size(address(_16415))
                            call address(_16415).mem[mem[64] len 4] with:
                               value _16407 wei
                                 gas gas_remaining wei
                                args mem[mem[64] + 4 len _16423 + (32 * _16431) + -mem[64] + 160]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16543 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _16551 = mem[_16543]
                            require mem[_16543] <= test266151307()
                            require _16543 + mem[_16543] + 31 < _16543 + return_data.size
                            _16559 = mem[_16543 + mem[_16543]]
                            if mem[_16543 + mem[_16543]] > test266151307():
                                revert with 0, 65
                            if ceil32(32 * mem[_16543 + mem[_16543]]) + 1 < 0 or _16543 + ceil32(return_data.size) + ceil32(32 * mem[_16543 + mem[_16543]]) + 1 > test266151307():
                                revert with 0, 65
                            mem[64] = _16543 + ceil32(return_data.size) + ceil32(32 * mem[_16543 + mem[_16543]]) + 1
                            mem[_16543 + ceil32(return_data.size)] = _16559
                            require _16551 + (32 * _16559) + 32 <= return_data.size
                            t = _16543 + ceil32(return_data.size) + 32
                            s = _16543 + _16551 + 32
                            while s < _16543 + _16551 + (32 * _16559) + 32:
                                mem[t] = mem[s]
                                t = t + 32
                                s = s + 32
                                continue 
                            mem[mem[64] + 4] = this.address
                            require ext_code.size(USDTAddress)
                            staticcall USDTAddress.0x70a08231 with:
                                    gas gas_remaining wei
                                   args this.address
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _16639 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            sub_5e8f09aa = mem[_16639]
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _742
                s = _3456 - (100 * _3456 / 10000)
                s = stor9[idx].field_0
                continue 
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_512
            mem[mem[64] + 36] = _762
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            call strategyInfo[stor9[idx].field_0].field_1280.0x441a3e70 with:
                 gas gas_remaining wei
                args strategyInfo[stor9[idx].field_0].field_512, _762
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.SUSHI() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _828 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _841 = mem[_828]
            require mem[_828] == mem[_828 + 12 len 20]
            if 0 >= mem[96]:
                revert with 0, 50
            mem[128] = mem[_828 + 12 len 20]
            if 1 >= mem[96]:
                revert with 0, 50
            mem[160] = stor21
            require ext_code.size(address(_841))
            staticcall address(_841).0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _890 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _901 = mem[_890]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_841))
            staticcall address(_841).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _918 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _931 = mem[_918]
            if mem[_918] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _901:
                revert with 0, 18
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_0
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _957 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _962 = mem[_957]
            if 10^12 * _931 / _901 and mem[_957] > -1 / 10^12 * _931 / _901:
                revert with 0, 17
            _983 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _931 / _901 * _962 / 10^12
            mem[mem[64] + 36] = 64
            _996 = mem[96]
            mem[mem[64] + 68] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 100
            while s < _996:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _983 + (32 * _996) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1765 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1772 = mem[_1765]
            require mem[_1765] <= test266151307()
            require _1765 + mem[_1765] + 31 < _1765 + return_data.size
            _1787 = mem[_1765 + mem[_1765]]
            if mem[_1765 + mem[_1765]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_1765 + mem[_1765]]) + 1 < 0 or _1765 + ceil32(return_data.size) + ceil32(32 * mem[_1765 + mem[_1765]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1765 + ceil32(return_data.size) + ceil32(32 * mem[_1765 + mem[_1765]]) + 1
            mem[_1765 + ceil32(return_data.size)] = _1787
            require _1772 + (32 * _1787) + 32 <= return_data.size
            t = _1765 + ceil32(return_data.size) + 32
            s = _1765 + _1772 + 32
            while s < _1765 + _1772 + (32 * _1787) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _1787:
                revert with 0, 50
            _3457 = mem[_1765 + ceil32(return_data.size) + 64]
            if mem[_1765 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_1765 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_1765 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if mem[_1765 + ceil32(return_data.size) + 64] < 100 * mem[_1765 + ceil32(return_data.size) + 64] / 10000:
                revert with 0, 17
            _3539 = mem[_742]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_841))
            staticcall address(_841).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3571 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3587 = mem[_3571]
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _3587
            mem[mem[64] + 36] = _3457 - (100 * _3457 / 10000)
            mem[mem[64] + 68] = 160
            _3625 = mem[96]
            mem[mem[64] + 164] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 196
            while s < mem[96]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp + 60
            require ext_code.size(address(_3539))
            call address(_3539).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len 96], address(this.address), block.timestamp + 60, mem[mem[64] + 164 len (32 * _3625) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5306 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5322 = mem[_5306]
            require mem[_5306] <= test266151307()
            require _5306 + mem[_5306] + 31 < _5306 + return_data.size
            _5342 = mem[_5306 + mem[_5306]]
            if mem[_5306 + mem[_5306]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_5306 + mem[_5306]]) + 1 < 0 or _5306 + ceil32(return_data.size) + ceil32(32 * mem[_5306 + mem[_5306]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _5306 + ceil32(return_data.size) + ceil32(32 * mem[_5306 + mem[_5306]]) + 1
            mem[_5306 + ceil32(return_data.size)] = _5342
            require _5322 + (32 * _5342) + 32 <= return_data.size
            t = _5306 + ceil32(return_data.size) + 32
            s = _5306 + _5322 + 32
            while s < _5306 + _5322 + (32 * _5342) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            _7136 = mem[_742]
            _7137 = mem[_742 + 192]
            _7138 = mem[_742 + 224]
            _7147 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            mem[_7147 + 32 len 64] = call.data[calldata.size len 64]
            if not mem[_7147]:
                revert with 0, 50
            mem[_7147 + 32] = stor21
            if stor21 == address(_7137):
                if stor21 == address(_7138):
                    mem[_7147 + 100] = this.address
                    require ext_code.size(address(_7137))
                    staticcall address(_7137).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7147 + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_7147 + ceil32(return_data.size) + 100] = this.address
                    require ext_code.size(address(_7138))
                    staticcall address(_7138).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7147 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 'Desired value is zero'
                    if not ext_call.return_data[0]:
                        revert with 0, 'Desired value is zero'
                    mem[_7147 + (2 * ceil32(return_data.size)) + 100] = address(_7136)
                    mem[_7147 + (2 * ceil32(return_data.size)) + 132] = -1
                    require ext_code.size(address(_7137))
                    call address(_7137).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7136), -1
                    mem[_7147 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    mem[_7147 + (4 * ceil32(return_data.size)) + 100] = address(_7136)
                    mem[_7147 + (4 * ceil32(return_data.size)) + 132] = -1
                    require ext_code.size(address(_7138))
                    call address(_7138).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7136), -1
                    mem[_7147 + (4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                        revert with 0, 17
                    if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                        revert with 0, 17
                    if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                        revert with 0, 17
                    if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[_7147 + (6 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
                    mem[_7147 + (6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                    mem[_7147 + (6 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                    mem[_7147 + (6 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                    mem[_7147 + (6 * ceil32(return_data.size)) + 292] = this.address
                    mem[_7147 + (6 * ceil32(return_data.size)) + 324] = block.timestamp + 60
                    require ext_code.size(address(_7136))
                    call address(_7136).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_7137), address(_7138), ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
                    mem[_7147 + (6 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _7147 + (7 * ceil32(return_data.size)) + 96
                    require return_data.size >= 96
                    _7599 = mem[_742 + 160]
                    _7600 = mem[_742 + 64]
                    _7601 = mem[_742 + 32]
                    mem[_7147 + (7 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(address(_7601))
                    staticcall address(_7601).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7147 + (7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _7147 + (8 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    if _7600 >= 999999:
                        mem[_7147 + (8 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        require ext_code.size(address(_7599))
                        call address(_7599).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_7147 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        emit Earn(ext_call.return_data[0]);
                        _7742 = mem[_742 + 32]
                        mem[_7147 + (8 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_7742))
                        staticcall address(_7742).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7147 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_742 + 96] = ext_call.return_data[0]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[_7147 + (10 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7147 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _7147 + (11 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _7963 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_7147 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[_7147 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        mem[_7147 + (11 * ceil32(return_data.size)) + 132] = 128
                        mem[_7147 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                        s = 0
                        t = 128
                        u = _7147 + (11 * ceil32(return_data.size)) + 260
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_7147 + (11 * ceil32(return_data.size)) + 164] = this.address
                        mem[_7147 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                        require ext_code.size(address(_7963))
                        call address(_7963).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value ext_call.return_data[0] wei
                             gas gas_remaining wei
                            args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_7147 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_7147 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _7147 + (12 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _9022 = mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                        require mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                        require _7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _7147 + (11 * ceil32(return_data.size)) + return_data.size + 96
                        _9042 = mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        if mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _7147 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                            revert with 0, 65
                        mem[64] = _7147 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                        mem[_7147 + (12 * ceil32(return_data.size)) + 96] = mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        require _9022 + (32 * _9042) + 32 <= return_data.size
                        t = _7147 + (12 * ceil32(return_data.size)) + 128
                        s = _7147 + (11 * ceil32(return_data.size)) + _9022 + 128
                        while s < _7147 + (11 * ceil32(return_data.size)) + _9022 + (32 * _9042) + 128:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10527 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_10527]
                    else:
                        mem[_7147 + (8 * ceil32(return_data.size)) + 100] = _7600
                        mem[_7147 + (8 * ceil32(return_data.size)) + 132] = ext_call.return_data[0]
                        require ext_code.size(address(_7599))
                        call address(_7599).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _7600, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_7147 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        emit Earn(ext_call.return_data[0]);
                        _7743 = mem[_742 + 32]
                        mem[_7147 + (8 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_7743))
                        staticcall address(_7743).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7147 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_742 + 96] = ext_call.return_data[0]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[_7147 + (10 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7147 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _7147 + (11 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _7964 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_7147 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[_7147 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        mem[_7147 + (11 * ceil32(return_data.size)) + 132] = 128
                        mem[_7147 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                        s = 0
                        t = 128
                        u = _7147 + (11 * ceil32(return_data.size)) + 260
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_7147 + (11 * ceil32(return_data.size)) + 164] = this.address
                        mem[_7147 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                        require ext_code.size(address(_7964))
                        call address(_7964).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value ext_call.return_data[0] wei
                             gas gas_remaining wei
                            args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_7147 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_7147 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _7147 + (12 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _9023 = mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                        require mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                        require _7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _7147 + (11 * ceil32(return_data.size)) + return_data.size + 96
                        _9043 = mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        if mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _7147 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                            revert with 0, 65
                        mem[64] = _7147 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                        mem[_7147 + (12 * ceil32(return_data.size)) + 96] = mem[_7147 + (11 * ceil32(return_data.size)) + mem[_7147 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        require _9023 + (32 * _9043) + 32 <= return_data.size
                        t = _7147 + (12 * ceil32(return_data.size)) + 128
                        s = _7147 + (11 * ceil32(return_data.size)) + _9023 + 128
                        while s < _7147 + (11 * ceil32(return_data.size)) + _9023 + (32 * _9043) + 128:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10528 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_10528]
                else:
                    if 1 >= mem[_7147]:
                        revert with 0, 50
                    mem[_7147 + 64] = address(_7138)
                    mem[_7147 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[_7147 + 100] = eth.balance(this.address) / 2
                    mem[_7147 + 132] = 64
                    mem[_7147 + 164] = mem[_7147]
                    s = 0
                    t = _7147 + 32
                    u = _7147 + 196
                    while s < mem[_7147]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_7136))
                    staticcall address(_7136).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _7147 + (32 * mem[_7147]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9010 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _9032 = mem[_9010]
                    require mem[_9010] <= test266151307()
                    require _9010 + mem[_9010] + 31 < _9010 + return_data.size
                    _9052 = mem[_9010 + mem[_9010]]
                    if mem[_9010 + mem[_9010]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_9010 + mem[_9010]]) + 1 < 0 or _9010 + ceil32(return_data.size) + ceil32(32 * mem[_9010 + mem[_9010]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _9010 + ceil32(return_data.size) + ceil32(32 * mem[_9010 + mem[_9010]]) + 1
                    mem[_9010 + ceil32(return_data.size)] = _9052
                    require _9032 + (32 * _9052) + 32 <= return_data.size
                    t = _9010 + ceil32(return_data.size) + 32
                    s = _9010 + _9032 + 32
                    while s < _9010 + _9032 + (32 * _9052) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _9052:
                        revert with 0, 50
                    _10495 = mem[_9010 + ceil32(return_data.size) + 64]
                    if mem[_9010 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_9010 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_9010 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _9052:
                        revert with 0, 50
                    _10564 = mem[_9010 + ceil32(return_data.size) + 64]
                    if mem[_9010 + ceil32(return_data.size) + 64] < 100 * mem[_9010 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _10582 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _10564 - (100 * _10495 / 10000)
                    mem[mem[64] + 36] = 128
                    _10599 = mem[_7147]
                    mem[mem[64] + 132] = mem[_7147]
                    s = 0
                    t = _7147 + 32
                    u = mem[64] + 164
                    while s < _10599:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_10582 + 68] = this.address
                    mem[_10582 + 100] = block.timestamp + 60
                    require ext_code.size(address(_7136))
                    call address(_7136).mem[mem[64] len 4] with:
                       value _10564 - (100 * _10495 / 10000) wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _10582 + (32 * _10599) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11952 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11961 = mem[_11952]
                    require mem[_11952] <= test266151307()
                    require _11952 + mem[_11952] + 31 < _11952 + return_data.size
                    _11970 = mem[_11952 + mem[_11952]]
                    if mem[_11952 + mem[_11952]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11952 + mem[_11952]]) + 1 < 0 or _11952 + ceil32(return_data.size) + ceil32(32 * mem[_11952 + mem[_11952]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11952 + ceil32(return_data.size) + ceil32(32 * mem[_11952 + mem[_11952]]) + 1
                    mem[_11952 + ceil32(return_data.size)] = _11970
                    require _11961 + (32 * _11970) + 32 <= return_data.size
                    t = _11952 + ceil32(return_data.size) + 32
                    s = _11952 + _11961 + 32
                    while s < _11952 + _11961 + (32 * _11970) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7137))
                    staticcall address(_7137).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13258 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13269 = mem[_13258]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7138))
                    staticcall address(_7138).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13304 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13315 = mem[_13304]
                    if not _13269:
                        revert with 0, 'Desired value is zero'
                    if not mem[_13304]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_7136)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7137))
                    call address(_7137).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7136), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13389 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13389] == bool(mem[_13389])
                    mem[mem[64] + 4] = address(_7136)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7138))
                    call address(_7138).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7136), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13432 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13432] == bool(mem[_13432])
                    if _13269 and 1 > -1 / _13269:
                        revert with 0, 17
                    if _13269 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13269 < 100 * _13269 / 10000:
                        revert with 0, 17
                    if _13315 and 1 > -1 / _13315:
                        revert with 0, 17
                    if _13315 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13315 < 100 * _13315 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _13269
                    mem[mem[64] + 100] = _13315
                    mem[mem[64] + 132] = _13269 - (100 * _13269 / 10000)
                    mem[mem[64] + 164] = _13315 - (100 * _13315 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_7136))
                    call address(_7136).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_7137), address(_7138), _13269, _13315, _13269 - (100 * _13269 / 10000), _13315 - (100 * _13315 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13574 = mem[_742 + 160]
                    _13575 = mem[_742 + 64]
                    _13576 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13576))
                    staticcall address(_13576).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13617 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13629 = mem[_13617]
                    if _13575 >= 999999:
                        mem[mem[64] + 4] = mem[_13617]
                        require ext_code.size(address(_13574))
                        call address(_13574).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _13629
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13629
                        emit Earn(_13629);
                        _13719 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13719))
                        staticcall address(_13719).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13772 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_13772]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13906 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13927 = mem[_13906]
                        _13947 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13966 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13927
                        mem[mem[64] + 36] = 128
                        _13983 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < _13983:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_13966 + 68] = this.address
                        mem[_13966 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13947))
                        call address(_13947).mem[mem[64] len 4] with:
                           value _13927 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13966 + (32 * _13983) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14553 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14574 = mem[_14553]
                        require mem[_14553] <= test266151307()
                        require _14553 + mem[_14553] + 31 < _14553 + return_data.size
                        _14595 = mem[_14553 + mem[_14553]]
                        if mem[_14553 + mem[_14553]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14553 + mem[_14553]]) + 1 < 0 or _14553 + ceil32(return_data.size) + ceil32(32 * mem[_14553 + mem[_14553]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14553 + ceil32(return_data.size) + ceil32(32 * mem[_14553 + mem[_14553]]) + 1
                        mem[_14553 + ceil32(return_data.size)] = _14595
                        require _14574 + (32 * _14595) + 32 <= return_data.size
                        t = _14553 + ceil32(return_data.size) + 32
                        s = _14553 + _14574 + 32
                        while s < _14553 + _14574 + (32 * _14595) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15269 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_15269]
                    else:
                        mem[mem[64] + 4] = _13575
                        mem[mem[64] + 36] = _13629
                        require ext_code.size(address(_13574))
                        call address(_13574).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _13575, _13629
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13629
                        emit Earn(_13629);
                        _13720 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13720))
                        staticcall address(_13720).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13773 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_13773]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13907 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13928 = mem[_13907]
                        _13948 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13967 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13928
                        mem[mem[64] + 36] = 128
                        _13984 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13967 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13948))
                        call address(_13948).mem[mem[64] len 4] with:
                           value _13928 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13967 + (32 * _13984) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14554 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14575 = mem[_14554]
                        require mem[_14554] <= test266151307()
                        require _14554 + mem[_14554] + 31 < _14554 + return_data.size
                        _14596 = mem[_14554 + mem[_14554]]
                        if mem[_14554 + mem[_14554]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14554 + mem[_14554]]) + 1 < 0 or _14554 + ceil32(return_data.size) + ceil32(32 * mem[_14554 + mem[_14554]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14554 + ceil32(return_data.size) + ceil32(32 * mem[_14554 + mem[_14554]]) + 1
                        mem[_14554 + ceil32(return_data.size)] = _14596
                        require _14575 + (32 * _14596) + 32 <= return_data.size
                        t = _14554 + ceil32(return_data.size) + 32
                        s = _14554 + _14575 + 32
                        while s < _14554 + _14575 + (32 * _14596) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15270 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_15270]
            else:
                if 1 >= mem[_7147]:
                    revert with 0, 50
                mem[_7147 + 64] = address(_7137)
                mem[_7147 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[_7147 + 100] = eth.balance(this.address) / 2
                mem[_7147 + 132] = 64
                mem[_7147 + 164] = mem[_7147]
                s = 0
                t = _7147 + 32
                u = _7147 + 196
                while s < mem[_7147]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(_7136))
                staticcall address(_7136).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _7147 + (32 * mem[_7147]) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9011 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _9033 = mem[_9011]
                require mem[_9011] <= test266151307()
                require _9011 + mem[_9011] + 31 < _9011 + return_data.size
                _9053 = mem[_9011 + mem[_9011]]
                if mem[_9011 + mem[_9011]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_9011 + mem[_9011]]) + 1 < 0 or _9011 + ceil32(return_data.size) + ceil32(32 * mem[_9011 + mem[_9011]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _9011 + ceil32(return_data.size) + ceil32(32 * mem[_9011 + mem[_9011]]) + 1
                mem[_9011 + ceil32(return_data.size)] = _9053
                require _9033 + (32 * _9053) + 32 <= return_data.size
                t = _9011 + ceil32(return_data.size) + 32
                s = _9011 + _9033 + 32
                while s < _9011 + _9033 + (32 * _9053) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _9053:
                    revert with 0, 50
                _10496 = mem[_9011 + ceil32(return_data.size) + 64]
                if mem[_9011 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_9011 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_9011 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 1 >= _9053:
                    revert with 0, 50
                _10565 = mem[_9011 + ceil32(return_data.size) + 64]
                if mem[_9011 + ceil32(return_data.size) + 64] < 100 * mem[_9011 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _10565 - (100 * _10496 / 10000)
                mem[mem[64] + 36] = 128
                _10600 = mem[_7147]
                mem[mem[64] + 132] = mem[_7147]
                s = 0
                t = _7147 + 32
                u = mem[64] + 164
                while s < _10600:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 68] = this.address
                mem[mem[64] + 100] = block.timestamp + 60
                require ext_code.size(address(_7136))
                call address(_7136).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value _10565 - (100 * _10496 / 10000) wei
                     gas gas_remaining wei
                    args _10565 - (100 * _10496 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _10600) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _11953 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _11962 = mem[_11953]
                require mem[_11953] <= test266151307()
                require _11953 + mem[_11953] + 31 < _11953 + return_data.size
                _11971 = mem[_11953 + mem[_11953]]
                if mem[_11953 + mem[_11953]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_11953 + mem[_11953]]) + 1 < 0 or _11953 + ceil32(return_data.size) + ceil32(32 * mem[_11953 + mem[_11953]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _11953 + ceil32(return_data.size) + ceil32(32 * mem[_11953 + mem[_11953]]) + 1
                mem[_11953 + ceil32(return_data.size)] = _11971
                require _11962 + (32 * _11971) + 32 <= return_data.size
                t = _11953 + ceil32(return_data.size) + 32
                s = _11953 + _11962 + 32
                while s < _11953 + _11962 + (32 * _11971) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if stor21 == address(_7138):
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7137))
                    staticcall address(_7137).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13262 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13274 = mem[_13262]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7138))
                    staticcall address(_7138).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13308 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13320 = mem[_13308]
                    if not _13274:
                        revert with 0, 'Desired value is zero'
                    if not mem[_13308]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_7136)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7137))
                    call address(_7137).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7136), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13395 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13395] == bool(mem[_13395])
                    mem[mem[64] + 4] = address(_7136)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7138))
                    call address(_7138).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7136), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13441 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13441] == bool(mem[_13441])
                    if _13274 and 1 > -1 / _13274:
                        revert with 0, 17
                    if _13274 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13274 < 100 * _13274 / 10000:
                        revert with 0, 17
                    if _13320 and 1 > -1 / _13320:
                        revert with 0, 17
                    if _13320 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13320 < 100 * _13320 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _13274
                    mem[mem[64] + 100] = _13320
                    mem[mem[64] + 132] = _13274 - (100 * _13274 / 10000)
                    mem[mem[64] + 164] = _13320 - (100 * _13320 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_7136))
                    call address(_7136).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_7137), address(_7138), _13274, _13320, _13274 - (100 * _13274 / 10000), _13320 - (100 * _13320 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13594 = mem[_742 + 160]
                    _13595 = mem[_742 + 64]
                    _13596 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13596))
                    staticcall address(_13596).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13624 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13636 = mem[_13624]
                    if _13595 >= 999999:
                        mem[mem[64] + 4] = mem[_13624]
                        require ext_code.size(address(_13594))
                        call address(_13594).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _13636
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13636
                        emit Earn(_13636);
                        _13748 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13748))
                        staticcall address(_13748).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13783 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_13783]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13916 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13936 = mem[_13916]
                        _13956 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13975 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13936
                        mem[mem[64] + 36] = 128
                        _13994 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13975 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13956))
                        call address(_13956).mem[mem[64] len 4] with:
                           value _13936 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13975 + (32 * _13994) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14555 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14576 = mem[_14555]
                        require mem[_14555] <= test266151307()
                        require _14555 + mem[_14555] + 31 < _14555 + return_data.size
                        _14597 = mem[_14555 + mem[_14555]]
                        if mem[_14555 + mem[_14555]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14555 + mem[_14555]]) + 1 < 0 or _14555 + ceil32(return_data.size) + ceil32(32 * mem[_14555 + mem[_14555]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14555 + ceil32(return_data.size) + ceil32(32 * mem[_14555 + mem[_14555]]) + 1
                        mem[_14555 + ceil32(return_data.size)] = _14597
                        require _14576 + (32 * _14597) + 32 <= return_data.size
                        t = _14555 + ceil32(return_data.size) + 32
                        s = _14555 + _14576 + 32
                        while s < _14555 + _14576 + (32 * _14597) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15271 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_15271]
                    else:
                        mem[mem[64] + 4] = _13595
                        mem[mem[64] + 36] = _13636
                        require ext_code.size(address(_13594))
                        call address(_13594).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _13595, _13636
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13636
                        emit Earn(_13636);
                        _13749 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13749))
                        staticcall address(_13749).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13784 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_13784]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13917 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13937 = mem[_13917]
                        _13957 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13976 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13937
                        mem[mem[64] + 36] = 128
                        _13995 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13976 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13957))
                        call address(_13957).mem[mem[64] len 4] with:
                           value _13937 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13976 + (32 * _13995) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14556 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14577 = mem[_14556]
                        require mem[_14556] <= test266151307()
                        require _14556 + mem[_14556] + 31 < _14556 + return_data.size
                        _14598 = mem[_14556 + mem[_14556]]
                        if mem[_14556 + mem[_14556]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14556 + mem[_14556]]) + 1 < 0 or _14556 + ceil32(return_data.size) + ceil32(32 * mem[_14556 + mem[_14556]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14556 + ceil32(return_data.size) + ceil32(32 * mem[_14556 + mem[_14556]]) + 1
                        mem[_14556 + ceil32(return_data.size)] = _14598
                        require _14577 + (32 * _14598) + 32 <= return_data.size
                        t = _14556 + ceil32(return_data.size) + 32
                        s = _14556 + _14577 + 32
                        while s < _14556 + _14577 + (32 * _14598) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15272 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_15272]
                else:
                    if 1 >= mem[_7147]:
                        revert with 0, 50
                    mem[_7147 + 64] = address(_7138)
                    _13270 = mem[64]
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = eth.balance(this.address) / 2
                    mem[mem[64] + 36] = 64
                    _13278 = mem[_7147]
                    mem[mem[64] + 68] = mem[_7147]
                    s = 0
                    t = _7147 + 32
                    u = mem[64] + 100
                    while s < _13278:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_7136))
                    staticcall address(_7136).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _13270 + (32 * _13278) + -mem[64] + 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14560 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _14581 = mem[_14560]
                    require mem[_14560] <= test266151307()
                    require _14560 + mem[_14560] + 31 < _14560 + return_data.size
                    _14602 = mem[_14560 + mem[_14560]]
                    if mem[_14560 + mem[_14560]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_14560 + mem[_14560]]) + 1 < 0 or _14560 + ceil32(return_data.size) + ceil32(32 * mem[_14560 + mem[_14560]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _14560 + ceil32(return_data.size) + ceil32(32 * mem[_14560 + mem[_14560]]) + 1
                    mem[_14560 + ceil32(return_data.size)] = _14602
                    require _14581 + (32 * _14602) + 32 <= return_data.size
                    t = _14560 + ceil32(return_data.size) + 32
                    s = _14560 + _14581 + 32
                    while s < _14560 + _14581 + (32 * _14602) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _14602:
                        revert with 0, 50
                    _15221 = mem[_14560 + ceil32(return_data.size) + 64]
                    if mem[_14560 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_14560 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_14560 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _14602:
                        revert with 0, 50
                    _15300 = mem[_14560 + ceil32(return_data.size) + 64]
                    if mem[_14560 + ceil32(return_data.size) + 64] < 100 * mem[_14560 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _15308 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _15300 - (100 * _15221 / 10000)
                    mem[mem[64] + 36] = 128
                    _15315 = mem[_7147]
                    mem[mem[64] + 132] = mem[_7147]
                    s = 0
                    t = _7147 + 32
                    u = mem[64] + 164
                    while s < _15315:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_15308 + 68] = this.address
                    mem[_15308 + 100] = block.timestamp + 60
                    require ext_code.size(address(_7136))
                    call address(_7136).mem[mem[64] len 4] with:
                       value _15300 - (100 * _15221 / 10000) wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _15308 + (32 * _15315) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _15773 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15777 = mem[_15773]
                    require mem[_15773] <= test266151307()
                    require _15773 + mem[_15773] + 31 < _15773 + return_data.size
                    _15781 = mem[_15773 + mem[_15773]]
                    if mem[_15773 + mem[_15773]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15773 + mem[_15773]]) + 1 < 0 or _15773 + ceil32(return_data.size) + ceil32(32 * mem[_15773 + mem[_15773]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15773 + ceil32(return_data.size) + ceil32(32 * mem[_15773 + mem[_15773]]) + 1
                    mem[_15773 + ceil32(return_data.size)] = _15781
                    require _15777 + (32 * _15781) + 32 <= return_data.size
                    t = _15773 + ceil32(return_data.size) + 32
                    s = _15773 + _15777 + 32
                    while s < _15773 + _15777 + (32 * _15781) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7137))
                    staticcall address(_7137).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16169 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16173 = mem[_16169]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7138))
                    staticcall address(_7138).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16185 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16189 = mem[_16185]
                    if not _16173:
                        revert with 0, 'Desired value is zero'
                    if not mem[_16185]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_7136)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7137))
                    call address(_7137).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7136), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16217 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_16217] == bool(mem[_16217])
                    mem[mem[64] + 4] = address(_7136)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7138))
                    call address(_7138).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7136), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16233 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_16233] == bool(mem[_16233])
                    if _16173 and 1 > -1 / _16173:
                        revert with 0, 17
                    if _16173 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _16173 < 100 * _16173 / 10000:
                        revert with 0, 17
                    if _16189 and 1 > -1 / _16189:
                        revert with 0, 17
                    if _16189 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _16189 < 100 * _16189 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _16173
                    mem[mem[64] + 100] = _16189
                    mem[mem[64] + 132] = _16173 - (100 * _16173 / 10000)
                    mem[mem[64] + 164] = _16189 - (100 * _16189 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_7136))
                    call address(_7136).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_7137), address(_7138), _16173, _16189, _16173 - (100 * _16173 / 10000), _16189 - (100 * _16189 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _16271 = mem[_742 + 160]
                    _16272 = mem[_742 + 64]
                    _16273 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_16273))
                    staticcall address(_16273).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16285 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16289 = mem[_16285]
                    if _16272 >= 999999:
                        mem[mem[64] + 4] = mem[_16285]
                        require ext_code.size(address(_16271))
                        call address(_16271).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _16289
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _16289
                        emit Earn(_16289);
                        _16328 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_16328))
                        staticcall address(_16328).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16352 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_16352]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16400 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16408 = mem[_16400]
                        _16416 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _16424 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _16408
                        mem[mem[64] + 36] = 128
                        _16432 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_16424 + 100] = block.timestamp + 60
                        require ext_code.size(address(_16416))
                        call address(_16416).mem[mem[64] len 4] with:
                           value _16408 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _16424 + (32 * _16432) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16544 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16552 = mem[_16544]
                        require mem[_16544] <= test266151307()
                        require _16544 + mem[_16544] + 31 < _16544 + return_data.size
                        _16560 = mem[_16544 + mem[_16544]]
                        if mem[_16544 + mem[_16544]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_16544 + mem[_16544]]) + 1 < 0 or _16544 + ceil32(return_data.size) + ceil32(32 * mem[_16544 + mem[_16544]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _16544 + ceil32(return_data.size) + ceil32(32 * mem[_16544 + mem[_16544]]) + 1
                        mem[_16544 + ceil32(return_data.size)] = _16560
                        require _16552 + (32 * _16560) + 32 <= return_data.size
                        t = _16544 + ceil32(return_data.size) + 32
                        s = _16544 + _16552 + 32
                        while s < _16544 + _16552 + (32 * _16560) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16640 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_16640]
                    else:
                        mem[mem[64] + 4] = _16272
                        mem[mem[64] + 36] = _16289
                        require ext_code.size(address(_16271))
                        call address(_16271).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _16272, _16289
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _16289
                        emit Earn(_16289);
                        _16329 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_16329))
                        staticcall address(_16329).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16353 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_16353]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16401 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16409 = mem[_16401]
                        _16417 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _16425 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _16409
                        mem[mem[64] + 36] = 128
                        _16433 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_16425 + 100] = block.timestamp + 60
                        require ext_code.size(address(_16417))
                        call address(_16417).mem[mem[64] len 4] with:
                           value _16409 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _16425 + (32 * _16433) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16545 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16553 = mem[_16545]
                        require mem[_16545] <= test266151307()
                        require _16545 + mem[_16545] + 31 < _16545 + return_data.size
                        _16561 = mem[_16545 + mem[_16545]]
                        if mem[_16545 + mem[_16545]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_16545 + mem[_16545]]) + 1 < 0 or _16545 + ceil32(return_data.size) + ceil32(32 * mem[_16545 + mem[_16545]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _16545 + ceil32(return_data.size) + ceil32(32 * mem[_16545 + mem[_16545]]) + 1
                        mem[_16545 + ceil32(return_data.size)] = _16561
                        require _16553 + (32 * _16561) + 32 <= return_data.size
                        t = _16545 + ceil32(return_data.size) + 32
                        s = _16545 + _16553 + 32
                        while s < _16545 + _16553 + (32 * _16561) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16641 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_16641]
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _742
            s = _3457 - (100 * _3457 / 10000)
            s = stor9[idx].field_0
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        staticcall strategyInfo[stor9[idx].field_0].field_1280.info(address arg1) with:
                gas gas_remaining wei
               args this.address
        mem[mem[64] len 320] = ext_call.return_data[0 len 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _752 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 320
        _761 = mem[64]
        if mem[64] + 192 > test266151307() or mem[64] + 192 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 192
        mem[_761] = mem[_752]
        mem[_761 + 32] = mem[_752 + 32]
        mem[_761 + 64] = mem[_752 + 64]
        require return_data.size - 96 >= 96
        _775 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_775] = mem[_752 + 96]
        mem[_775 + 32] = mem[_752 + 128]
        mem[_775 + 64] = mem[_752 + 160]
        mem[_761 + 96] = _775
        mem[_761 + 128] = mem[_752 + 192]
        require return_data.size - 224 >= 96
        _795 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_795] = mem[_752 + 224]
        mem[_795 + 32] = mem[_752 + 256]
        mem[_795 + 64] = mem[_752 + 288]
        mem[_761 + 160] = _795
        _809 = mem[_761 + 64]
        if not mem[_761 + 64]:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _742
            s = mem[_761 + 64]
            s = stor9[idx].field_0
            continue 
        mem[0] = stor9[idx].field_0
        mem[32] = 6
        _831 = mem[64]
        mem[64] = mem[64] + 256
        mem[_831] = strategyInfo[stor9[idx].field_0].field_0
        mem[_831 + 32] = strategyInfo[stor9[idx].field_0].field_256
        mem[_831 + 64] = strategyInfo[stor9[idx].field_0].field_512
        mem[_831 + 96] = strategyInfo[stor9[idx].field_0].field_768
        mem[_831 + 128] = strategyInfo[stor9[idx].field_0].field_1024
        mem[_831 + 160] = strategyInfo[stor9[idx].field_0].field_1280
        mem[_831 + 192] = strategyInfo[stor9[idx].field_0].field_1536
        mem[_831 + 224] = strategyInfo[stor9[idx].field_0].field_1792
        if 999999 > strategyInfo[stor9[idx].field_0].field_512:
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_512
            mem[mem[64] + 36] = _809
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            call strategyInfo[stor9[idx].field_0].field_1280.0x441a3e70 with:
                 gas gas_remaining wei
                args strategyInfo[stor9[idx].field_0].field_512, _809
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.SUSHI() with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _872 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _878 = mem[_872]
            require mem[_872] == mem[_872 + 12 len 20]
            if 0 >= mem[96]:
                revert with 0, 50
            mem[128] = mem[_872 + 12 len 20]
            if 1 >= mem[96]:
                revert with 0, 50
            mem[160] = stor21
            require ext_code.size(address(_878))
            staticcall address(_878).0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _935 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _940 = mem[_935]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_878))
            staticcall address(_878).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _948 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _954 = mem[_948]
            if mem[_948] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _940:
                revert with 0, 18
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_0
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _981 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _994 = mem[_981]
            if 10^12 * _954 / _940 and mem[_981] > -1 / 10^12 * _954 / _940:
                revert with 0, 17
            _1030 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _954 / _940 * _994 / 10^12
            mem[mem[64] + 36] = 64
            _1046 = mem[96]
            mem[mem[64] + 68] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 100
            while s < _1046:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _1030 + (32 * _1046) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1763 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1770 = mem[_1763]
            require mem[_1763] <= test266151307()
            require _1763 + mem[_1763] + 31 < _1763 + return_data.size
            _1785 = mem[_1763 + mem[_1763]]
            if mem[_1763 + mem[_1763]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_1763 + mem[_1763]]) + 1 < 0 or _1763 + ceil32(return_data.size) + ceil32(32 * mem[_1763 + mem[_1763]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _1763 + ceil32(return_data.size) + ceil32(32 * mem[_1763 + mem[_1763]]) + 1
            mem[_1763 + ceil32(return_data.size)] = _1785
            require _1770 + (32 * _1785) + 32 <= return_data.size
            t = _1763 + ceil32(return_data.size) + 32
            s = _1763 + _1770 + 32
            while s < _1763 + _1770 + (32 * _1785) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _1785:
                revert with 0, 50
            _3455 = mem[_1763 + ceil32(return_data.size) + 64]
            if mem[_1763 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_1763 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_1763 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if mem[_1763 + ceil32(return_data.size) + 64] < 100 * mem[_1763 + ceil32(return_data.size) + 64] / 10000:
                revert with 0, 17
            _3537 = mem[_742]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_878))
            staticcall address(_878).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3569 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3585 = mem[_3569]
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _3585
            mem[mem[64] + 36] = _3455 - (100 * _3455 / 10000)
            mem[mem[64] + 68] = 160
            _3623 = mem[96]
            mem[mem[64] + 164] = mem[96]
            s = 0
            t = 128
            u = mem[64] + 196
            while s < mem[96]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            mem[mem[64] + 100] = this.address
            mem[mem[64] + 132] = block.timestamp + 60
            require ext_code.size(address(_3537))
            call address(_3537).mem[mem[64] len 4] with:
                 gas gas_remaining wei
                args mem[mem[64] + 4 len 96], address(this.address), block.timestamp + 60, mem[mem[64] + 164 len (32 * _3623) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5304 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5320 = mem[_5304]
            require mem[_5304] <= test266151307()
            require _5304 + mem[_5304] + 31 < _5304 + return_data.size
            _5340 = mem[_5304 + mem[_5304]]
            if mem[_5304 + mem[_5304]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_5304 + mem[_5304]]) + 1 < 0 or _5304 + ceil32(return_data.size) + ceil32(32 * mem[_5304 + mem[_5304]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _5304 + ceil32(return_data.size) + ceil32(32 * mem[_5304 + mem[_5304]]) + 1
            mem[_5304 + ceil32(return_data.size)] = _5340
            require _5320 + (32 * _5340) + 32 <= return_data.size
            t = _5304 + ceil32(return_data.size) + 32
            s = _5304 + _5320 + 32
            while s < _5304 + _5320 + (32 * _5340) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            _7130 = mem[_742]
            _7131 = mem[_742 + 192]
            _7132 = mem[_742 + 224]
            _7143 = mem[64]
            mem[mem[64]] = 2
            mem[64] = mem[64] + 96
            mem[_7143 + 32 len 64] = call.data[calldata.size len 64]
            if not mem[_7143]:
                revert with 0, 50
            mem[_7143 + 32] = stor21
            if stor21 == address(_7131):
                if stor21 == address(_7132):
                    mem[_7143 + 100] = this.address
                    require ext_code.size(address(_7131))
                    staticcall address(_7131).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7143 + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_7143 + ceil32(return_data.size) + 100] = this.address
                    require ext_code.size(address(_7132))
                    staticcall address(_7132).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7143 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        revert with 0, 'Desired value is zero'
                    if not ext_call.return_data[0]:
                        revert with 0, 'Desired value is zero'
                    mem[_7143 + (2 * ceil32(return_data.size)) + 100] = address(_7130)
                    mem[_7143 + (2 * ceil32(return_data.size)) + 132] = -1
                    require ext_code.size(address(_7131))
                    call address(_7131).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7130), -1
                    mem[_7143 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    mem[_7143 + (4 * ceil32(return_data.size)) + 100] = address(_7130)
                    mem[_7143 + (4 * ceil32(return_data.size)) + 132] = -1
                    require ext_code.size(address(_7132))
                    call address(_7132).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7130), -1
                    mem[_7143 + (4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == bool(ext_call.return_data[0])
                    if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                        revert with 0, 17
                    if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                        revert with 0, 17
                    if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                        revert with 0, 17
                    if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[_7143 + (6 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
                    mem[_7143 + (6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                    mem[_7143 + (6 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                    mem[_7143 + (6 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                    mem[_7143 + (6 * ceil32(return_data.size)) + 292] = this.address
                    mem[_7143 + (6 * ceil32(return_data.size)) + 324] = block.timestamp + 60
                    require ext_code.size(address(_7130))
                    call address(_7130).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_7131), address(_7132), ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
                    mem[_7143 + (6 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _7143 + (7 * ceil32(return_data.size)) + 96
                    require return_data.size >= 96
                    _7591 = mem[_742 + 160]
                    _7592 = mem[_742 + 64]
                    _7593 = mem[_742 + 32]
                    mem[_7143 + (7 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(address(_7593))
                    staticcall address(_7593).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7143 + (7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _7143 + (8 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    if _7592 >= 999999:
                        mem[_7143 + (8 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        require ext_code.size(address(_7591))
                        call address(_7591).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_7143 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        emit Earn(ext_call.return_data[0]);
                        _7736 = mem[_742 + 32]
                        mem[_7143 + (8 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_7736))
                        staticcall address(_7736).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7143 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_742 + 96] = ext_call.return_data[0]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[_7143 + (10 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7143 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _7143 + (11 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _7959 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_7143 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[_7143 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        mem[_7143 + (11 * ceil32(return_data.size)) + 132] = 128
                        mem[_7143 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                        s = 0
                        t = 128
                        u = _7143 + (11 * ceil32(return_data.size)) + 260
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_7143 + (11 * ceil32(return_data.size)) + 164] = this.address
                        mem[_7143 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                        require ext_code.size(address(_7959))
                        call address(_7959).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value ext_call.return_data[0] wei
                             gas gas_remaining wei
                            args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_7143 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_7143 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _7143 + (12 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _9018 = mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                        require mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                        require _7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _7143 + (11 * ceil32(return_data.size)) + return_data.size + 96
                        _9038 = mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        if mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _7143 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                            revert with 0, 65
                        mem[64] = _7143 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                        mem[_7143 + (12 * ceil32(return_data.size)) + 96] = _9038
                        require _9018 + (32 * _9038) + 32 <= return_data.size
                        t = _7143 + (12 * ceil32(return_data.size)) + 128
                        s = _7143 + (11 * ceil32(return_data.size)) + _9018 + 128
                        while s < _7143 + (11 * ceil32(return_data.size)) + _9018 + (32 * _9038) + 128:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10523 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_10523]
                    else:
                        mem[_7143 + (8 * ceil32(return_data.size)) + 100] = _7592
                        mem[_7143 + (8 * ceil32(return_data.size)) + 132] = ext_call.return_data[0]
                        require ext_code.size(address(_7591))
                        call address(_7591).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _7592, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_7143 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        emit Earn(ext_call.return_data[0]);
                        _7737 = mem[_742 + 32]
                        mem[_7143 + (8 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(address(_7737))
                        staticcall address(_7737).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7143 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[_742 + 96] = ext_call.return_data[0]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[_7143 + (10 * ceil32(return_data.size)) + 100] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[_7143 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _7143 + (11 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _7960 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        mem[_7143 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[_7143 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                        mem[_7143 + (11 * ceil32(return_data.size)) + 132] = 128
                        mem[_7143 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                        s = 0
                        t = 128
                        u = _7143 + (11 * ceil32(return_data.size)) + 260
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[_7143 + (11 * ceil32(return_data.size)) + 164] = this.address
                        mem[_7143 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                        require ext_code.size(address(_7960))
                        call address(_7960).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                           value ext_call.return_data[0] wei
                             gas gas_remaining wei
                            args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_7143 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_7143 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _7143 + (12 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _9019 = mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                        require mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                        require _7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _7143 + (11 * ceil32(return_data.size)) + return_data.size + 96
                        _9039 = mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                        if mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _7143 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                            revert with 0, 65
                        mem[64] = _7143 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7143 + (11 * ceil32(return_data.size)) + mem[_7143 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                        mem[_7143 + (12 * ceil32(return_data.size)) + 96] = _9039
                        require _9019 + (32 * _9039) + 32 <= return_data.size
                        t = _7143 + (12 * ceil32(return_data.size)) + 128
                        s = _7143 + (11 * ceil32(return_data.size)) + _9019 + 128
                        while s < _7143 + (11 * ceil32(return_data.size)) + _9019 + (32 * _9039) + 128:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _10524 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_10524]
                else:
                    if 1 >= mem[_7143]:
                        revert with 0, 50
                    mem[_7143 + 64] = address(_7132)
                    mem[_7143 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[_7143 + 100] = eth.balance(this.address) / 2
                    mem[_7143 + 132] = 64
                    mem[_7143 + 164] = mem[_7143]
                    s = 0
                    t = _7143 + 32
                    u = _7143 + 196
                    while s < mem[_7143]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_7130))
                    staticcall address(_7130).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _7143 + (32 * mem[_7143]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _9006 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _9028 = mem[_9006]
                    require mem[_9006] <= test266151307()
                    require _9006 + mem[_9006] + 31 < _9006 + return_data.size
                    _9048 = mem[_9006 + mem[_9006]]
                    if mem[_9006 + mem[_9006]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_9006 + mem[_9006]]) + 1 < 0 or _9006 + ceil32(return_data.size) + ceil32(32 * mem[_9006 + mem[_9006]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _9006 + ceil32(return_data.size) + ceil32(32 * mem[_9006 + mem[_9006]]) + 1
                    mem[_9006 + ceil32(return_data.size)] = _9048
                    require _9028 + (32 * _9048) + 32 <= return_data.size
                    t = _9006 + ceil32(return_data.size) + 32
                    s = _9006 + _9028 + 32
                    while s < _9006 + _9028 + (32 * _9048) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _9048:
                        revert with 0, 50
                    _10491 = mem[_9006 + ceil32(return_data.size) + 64]
                    if mem[_9006 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_9006 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_9006 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _9048:
                        revert with 0, 50
                    _10560 = mem[_9006 + ceil32(return_data.size) + 64]
                    if mem[_9006 + ceil32(return_data.size) + 64] < 100 * mem[_9006 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _10560 - (100 * _10491 / 10000)
                    mem[mem[64] + 36] = 128
                    _10595 = mem[_7143]
                    mem[mem[64] + 132] = mem[_7143]
                    s = 0
                    t = _7143 + 32
                    u = mem[64] + 164
                    while s < _10595:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[mem[64] + 100] = block.timestamp + 60
                    require ext_code.size(address(_7130))
                    call address(_7130).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                       value _10560 - (100 * _10491 / 10000) wei
                         gas gas_remaining wei
                        args _10560 - (100 * _10491 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _10595) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _11948 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _11957 = mem[_11948]
                    require mem[_11948] <= test266151307()
                    require _11948 + mem[_11948] + 31 < _11948 + return_data.size
                    _11966 = mem[_11948 + mem[_11948]]
                    if mem[_11948 + mem[_11948]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_11948 + mem[_11948]]) + 1 < 0 or _11948 + ceil32(return_data.size) + ceil32(32 * mem[_11948 + mem[_11948]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _11948 + ceil32(return_data.size) + ceil32(32 * mem[_11948 + mem[_11948]]) + 1
                    mem[_11948 + ceil32(return_data.size)] = _11966
                    require _11957 + (32 * _11966) + 32 <= return_data.size
                    t = _11948 + ceil32(return_data.size) + 32
                    s = _11948 + _11957 + 32
                    while s < _11948 + _11957 + (32 * _11966) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7131))
                    staticcall address(_7131).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13256 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13265 = mem[_13256]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7132))
                    staticcall address(_7132).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13302 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13311 = mem[_13302]
                    if not _13265:
                        revert with 0, 'Desired value is zero'
                    if not mem[_13302]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_7130)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7131))
                    call address(_7131).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7130), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13385 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13385] == bool(mem[_13385])
                    mem[mem[64] + 4] = address(_7130)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7132))
                    call address(_7132).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7130), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13428 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13428] == bool(mem[_13428])
                    if _13265 and 1 > -1 / _13265:
                        revert with 0, 17
                    if _13265 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13265 < 100 * _13265 / 10000:
                        revert with 0, 17
                    if _13311 and 1 > -1 / _13311:
                        revert with 0, 17
                    if _13311 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13311 < 100 * _13311 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _13265
                    mem[mem[64] + 100] = _13311
                    mem[mem[64] + 132] = _13265 - (100 * _13265 / 10000)
                    mem[mem[64] + 164] = _13311 - (100 * _13311 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_7130))
                    call address(_7130).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_7131), address(_7132), _13265, _13311, _13265 - (100 * _13265 / 10000), _13311 - (100 * _13311 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13568 = mem[_742 + 160]
                    _13569 = mem[_742 + 64]
                    _13570 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13570))
                    staticcall address(_13570).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13615 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13627 = mem[_13615]
                    if _13569 >= 999999:
                        mem[mem[64] + 4] = mem[_13615]
                        require ext_code.size(address(_13568))
                        call address(_13568).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _13627
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13627
                        emit Earn(_13627);
                        _13705 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13705))
                        staticcall address(_13705).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13768 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_13768]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13898 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13921 = mem[_13898]
                        _13941 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13962 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13921
                        mem[mem[64] + 36] = 128
                        _13979 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13962 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13941))
                        call address(_13941).mem[mem[64] len 4] with:
                           value _13921 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13962 + (32 * _13979) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14545 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14566 = mem[_14545]
                        require mem[_14545] <= test266151307()
                        require _14545 + mem[_14545] + 31 < _14545 + return_data.size
                        _14587 = mem[_14545 + mem[_14545]]
                        if mem[_14545 + mem[_14545]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14545 + mem[_14545]]) + 1 < 0 or _14545 + ceil32(return_data.size) + ceil32(32 * mem[_14545 + mem[_14545]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14545 + ceil32(return_data.size) + ceil32(32 * mem[_14545 + mem[_14545]]) + 1
                        mem[_14545 + ceil32(return_data.size)] = _14587
                        require _14566 + (32 * _14587) + 32 <= return_data.size
                        t = _14545 + ceil32(return_data.size) + 32
                        s = _14545 + _14566 + 32
                        while s < _14545 + _14566 + (32 * _14587) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15261 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_15261]
                    else:
                        mem[mem[64] + 4] = _13569
                        mem[mem[64] + 36] = _13627
                        require ext_code.size(address(_13568))
                        call address(_13568).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _13569, _13627
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13627
                        emit Earn(_13627);
                        _13706 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13706))
                        staticcall address(_13706).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13769 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_13769]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13899 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13922 = mem[_13899]
                        _13942 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13963 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13922
                        mem[mem[64] + 36] = 128
                        _13980 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13963 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13942))
                        call address(_13942).mem[mem[64] len 4] with:
                           value _13922 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13963 + (32 * _13980) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14546 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14567 = mem[_14546]
                        require mem[_14546] <= test266151307()
                        require _14546 + mem[_14546] + 31 < _14546 + return_data.size
                        _14588 = mem[_14546 + mem[_14546]]
                        if mem[_14546 + mem[_14546]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14546 + mem[_14546]]) + 1 < 0 or _14546 + ceil32(return_data.size) + ceil32(32 * mem[_14546 + mem[_14546]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14546 + ceil32(return_data.size) + ceil32(32 * mem[_14546 + mem[_14546]]) + 1
                        mem[_14546 + ceil32(return_data.size)] = _14588
                        require _14567 + (32 * _14588) + 32 <= return_data.size
                        t = _14546 + ceil32(return_data.size) + 32
                        s = _14546 + _14567 + 32
                        while s < _14546 + _14567 + (32 * _14588) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15262 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_15262]
            else:
                if 1 >= mem[_7143]:
                    revert with 0, 50
                mem[_7143 + 64] = address(_7131)
                mem[_7143 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[_7143 + 100] = eth.balance(this.address) / 2
                mem[_7143 + 132] = 64
                mem[_7143 + 164] = mem[_7143]
                s = 0
                t = _7143 + 32
                u = _7143 + 196
                while s < mem[_7143]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(_7130))
                staticcall address(_7130).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _7143 + (32 * mem[_7143]) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9007 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _9029 = mem[_9007]
                require mem[_9007] <= test266151307()
                require _9007 + mem[_9007] + 31 < _9007 + return_data.size
                _9049 = mem[_9007 + mem[_9007]]
                if mem[_9007 + mem[_9007]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_9007 + mem[_9007]]) + 1 < 0 or _9007 + ceil32(return_data.size) + ceil32(32 * mem[_9007 + mem[_9007]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _9007 + ceil32(return_data.size) + ceil32(32 * mem[_9007 + mem[_9007]]) + 1
                mem[_9007 + ceil32(return_data.size)] = _9049
                require _9029 + (32 * _9049) + 32 <= return_data.size
                t = _9007 + ceil32(return_data.size) + 32
                s = _9007 + _9029 + 32
                while s < _9007 + _9029 + (32 * _9049) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _9049:
                    revert with 0, 50
                _10492 = mem[_9007 + ceil32(return_data.size) + 64]
                if mem[_9007 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_9007 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_9007 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 1 >= _9049:
                    revert with 0, 50
                _10561 = mem[_9007 + ceil32(return_data.size) + 64]
                if mem[_9007 + ceil32(return_data.size) + 64] < 100 * mem[_9007 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _10561 - (100 * _10492 / 10000)
                mem[mem[64] + 36] = 128
                _10596 = mem[_7143]
                mem[mem[64] + 132] = mem[_7143]
                s = 0
                t = _7143 + 32
                u = mem[64] + 164
                while s < _10596:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 68] = this.address
                mem[mem[64] + 100] = block.timestamp + 60
                require ext_code.size(address(_7130))
                call address(_7130).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value _10561 - (100 * _10492 / 10000) wei
                     gas gas_remaining wei
                    args _10561 - (100 * _10492 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _10596) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _11949 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _11958 = mem[_11949]
                require mem[_11949] <= test266151307()
                require _11949 + mem[_11949] + 31 < _11949 + return_data.size
                _11967 = mem[_11949 + mem[_11949]]
                if mem[_11949 + mem[_11949]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_11949 + mem[_11949]]) + 1 < 0 or _11949 + ceil32(return_data.size) + ceil32(32 * mem[_11949 + mem[_11949]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _11949 + ceil32(return_data.size) + ceil32(32 * mem[_11949 + mem[_11949]]) + 1
                mem[_11949 + ceil32(return_data.size)] = _11967
                require _11958 + (32 * _11967) + 32 <= return_data.size
                t = _11949 + ceil32(return_data.size) + 32
                s = _11949 + _11958 + 32
                while s < _11949 + _11958 + (32 * _11967) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if stor21 == address(_7132):
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7131))
                    staticcall address(_7131).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13260 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13272 = mem[_13260]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7132))
                    staticcall address(_7132).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13306 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13318 = mem[_13306]
                    if not _13272:
                        revert with 0, 'Desired value is zero'
                    if not mem[_13306]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_7130)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7131))
                    call address(_7131).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7130), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13393 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13393] == bool(mem[_13393])
                    mem[mem[64] + 4] = address(_7130)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7132))
                    call address(_7132).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7130), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13437 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_13437] == bool(mem[_13437])
                    if _13272 and 1 > -1 / _13272:
                        revert with 0, 17
                    if _13272 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13272 < 100 * _13272 / 10000:
                        revert with 0, 17
                    if _13318 and 1 > -1 / _13318:
                        revert with 0, 17
                    if _13318 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _13318 < 100 * _13318 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _13272
                    mem[mem[64] + 100] = _13318
                    mem[mem[64] + 132] = _13272 - (100 * _13272 / 10000)
                    mem[mem[64] + 164] = _13318 - (100 * _13318 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_7130))
                    call address(_7130).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_7131), address(_7132), _13272, _13318, _13272 - (100 * _13272 / 10000), _13318 - (100 * _13318 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _13584 = mem[_742 + 160]
                    _13585 = mem[_742 + 64]
                    _13586 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13586))
                    staticcall address(_13586).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13620 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13632 = mem[_13620]
                    if _13585 >= 999999:
                        mem[mem[64] + 4] = mem[_13620]
                        require ext_code.size(address(_13584))
                        call address(_13584).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _13632
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13632
                        emit Earn(_13632);
                        _13736 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13736))
                        staticcall address(_13736).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13777 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_13777]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13912 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13932 = mem[_13912]
                        _13952 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13971 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13932
                        mem[mem[64] + 36] = 128
                        _13990 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13971 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13952))
                        call address(_13952).mem[mem[64] len 4] with:
                           value _13932 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13971 + (32 * _13990) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14547 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14568 = mem[_14547]
                        require mem[_14547] <= test266151307()
                        require _14547 + mem[_14547] + 31 < _14547 + return_data.size
                        _14589 = mem[_14547 + mem[_14547]]
                        if mem[_14547 + mem[_14547]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14547 + mem[_14547]]) + 1 < 0 or _14547 + ceil32(return_data.size) + ceil32(32 * mem[_14547 + mem[_14547]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14547 + ceil32(return_data.size) + ceil32(32 * mem[_14547 + mem[_14547]]) + 1
                        mem[_14547 + ceil32(return_data.size)] = _14589
                        require _14568 + (32 * _14589) + 32 <= return_data.size
                        t = _14547 + ceil32(return_data.size) + 32
                        s = _14547 + _14568 + 32
                        while s < _14547 + _14568 + (32 * _14589) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15263 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_15263]
                    else:
                        mem[mem[64] + 4] = _13585
                        mem[mem[64] + 36] = _13632
                        require ext_code.size(address(_13584))
                        call address(_13584).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _13585, _13632
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _13632
                        emit Earn(_13632);
                        _13737 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_13737))
                        staticcall address(_13737).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13778 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_13778]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _13913 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _13933 = mem[_13913]
                        _13953 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _13972 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _13933
                        mem[mem[64] + 36] = 128
                        _13991 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_13972 + 100] = block.timestamp + 60
                        require ext_code.size(address(_13953))
                        call address(_13953).mem[mem[64] len 4] with:
                           value _13933 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _13972 + (32 * _13991) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _14548 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _14569 = mem[_14548]
                        require mem[_14548] <= test266151307()
                        require _14548 + mem[_14548] + 31 < _14548 + return_data.size
                        _14590 = mem[_14548 + mem[_14548]]
                        if mem[_14548 + mem[_14548]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_14548 + mem[_14548]]) + 1 < 0 or _14548 + ceil32(return_data.size) + ceil32(32 * mem[_14548 + mem[_14548]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _14548 + ceil32(return_data.size) + ceil32(32 * mem[_14548 + mem[_14548]]) + 1
                        mem[_14548 + ceil32(return_data.size)] = _14590
                        require _14569 + (32 * _14590) + 32 <= return_data.size
                        t = _14548 + ceil32(return_data.size) + 32
                        s = _14548 + _14569 + 32
                        while s < _14548 + _14569 + (32 * _14590) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _15264 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_15264]
                else:
                    if 1 >= mem[_7143]:
                        revert with 0, 50
                    mem[_7143 + 64] = address(_7132)
                    mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = eth.balance(this.address) / 2
                    mem[mem[64] + 36] = 64
                    _13276 = mem[_7143]
                    mem[mem[64] + 68] = mem[_7143]
                    s = 0
                    t = _7143 + 32
                    u = mem[64] + 100
                    while s < _13276:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    require ext_code.size(address(_7130))
                    staticcall address(_7130).getAmountsOut(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args Mask(255, 1, eth.balance(this.address)), 64, mem[mem[64] + 68 len (32 * _13276) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14558 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _14579 = mem[_14558]
                    require mem[_14558] <= test266151307()
                    require _14558 + mem[_14558] + 31 < _14558 + return_data.size
                    _14600 = mem[_14558 + mem[_14558]]
                    if mem[_14558 + mem[_14558]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_14558 + mem[_14558]]) + 1 < 0 or _14558 + ceil32(return_data.size) + ceil32(32 * mem[_14558 + mem[_14558]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _14558 + ceil32(return_data.size) + ceil32(32 * mem[_14558 + mem[_14558]]) + 1
                    mem[_14558 + ceil32(return_data.size)] = _14600
                    require _14579 + (32 * _14600) + 32 <= return_data.size
                    t = _14558 + ceil32(return_data.size) + 32
                    s = _14558 + _14579 + 32
                    while s < _14558 + _14579 + (32 * _14600) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    if 1 >= _14600:
                        revert with 0, 50
                    _15219 = mem[_14558 + ceil32(return_data.size) + 64]
                    if mem[_14558 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_14558 + ceil32(return_data.size) + 64]:
                        revert with 0, 17
                    if mem[_14558 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if 1 >= _14600:
                        revert with 0, 50
                    _15298 = mem[_14558 + ceil32(return_data.size) + 64]
                    if mem[_14558 + ceil32(return_data.size) + 64] < 100 * mem[_14558 + ceil32(return_data.size) + 64] / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _15298 - (100 * _15219 / 10000)
                    mem[mem[64] + 36] = 128
                    _15313 = mem[_7143]
                    mem[mem[64] + 132] = mem[_7143]
                    s = 0
                    t = _7143 + 32
                    u = mem[64] + 164
                    while s < _15313:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[mem[64] + 100] = block.timestamp + 60
                    require ext_code.size(address(_7130))
                    call address(_7130).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                       value _15298 - (100 * _15219 / 10000) wei
                         gas gas_remaining wei
                        args _15298 - (100 * _15219 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _15313) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _15771 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _15775 = mem[_15771]
                    require mem[_15771] <= test266151307()
                    require _15771 + mem[_15771] + 31 < _15771 + return_data.size
                    _15779 = mem[_15771 + mem[_15771]]
                    if mem[_15771 + mem[_15771]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_15771 + mem[_15771]]) + 1 < 0 or _15771 + ceil32(return_data.size) + ceil32(32 * mem[_15771 + mem[_15771]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _15771 + ceil32(return_data.size) + ceil32(32 * mem[_15771 + mem[_15771]]) + 1
                    mem[_15771 + ceil32(return_data.size)] = _15779
                    require _15775 + (32 * _15779) + 32 <= return_data.size
                    t = _15771 + ceil32(return_data.size) + 32
                    s = _15771 + _15775 + 32
                    while s < _15771 + _15775 + (32 * _15779) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7131))
                    staticcall address(_7131).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16167 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16171 = mem[_16167]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_7132))
                    staticcall address(_7132).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16183 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16187 = mem[_16183]
                    if not _16171:
                        revert with 0, 'Desired value is zero'
                    if not mem[_16183]:
                        revert with 0, 'Desired value is zero'
                    mem[mem[64] + 4] = address(_7130)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7131))
                    call address(_7131).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7130), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16215 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_16215] == bool(mem[_16215])
                    mem[mem[64] + 4] = address(_7130)
                    mem[mem[64] + 36] = -1
                    require ext_code.size(address(_7132))
                    call address(_7132).approve(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args address(_7130), -1
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16231 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    require mem[_16231] == bool(mem[_16231])
                    if _16171 and 1 > -1 / _16171:
                        revert with 0, 17
                    if _16171 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _16171 < 100 * _16171 / 10000:
                        revert with 0, 17
                    if _16187 and 1 > -1 / _16187:
                        revert with 0, 17
                    if _16187 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                        revert with 0, 17
                    if _16187 < 100 * _16187 / 10000:
                        revert with 0, 17
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[mem[64] + 68] = _16171
                    mem[mem[64] + 100] = _16187
                    mem[mem[64] + 132] = _16171 - (100 * _16171 / 10000)
                    mem[mem[64] + 164] = _16187 - (100 * _16187 / 10000)
                    mem[mem[64] + 196] = this.address
                    mem[mem[64] + 228] = block.timestamp + 60
                    require ext_code.size(address(_7130))
                    call address(_7130).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                         gas gas_remaining wei
                        args address(_7131), address(_7132), _16171, _16187, _16171 - (100 * _16171 / 10000), _16187 - (100 * _16187 / 10000), address(this.address), block.timestamp + 60
                    mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 96
                    _16265 = mem[_742 + 160]
                    _16266 = mem[_742 + 64]
                    _16267 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_16267))
                    staticcall address(_16267).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16283 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16287 = mem[_16283]
                    if _16266 >= 999999:
                        mem[mem[64] + 4] = mem[_16283]
                        require ext_code.size(address(_16265))
                        call address(_16265).deposit(uint256 arg1) with:
                             gas gas_remaining wei
                            args _16287
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _16287
                        emit Earn(_16287);
                        _16324 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_16324))
                        staticcall address(_16324).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16348 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_16348]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16396 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16404 = mem[_16396]
                        _16412 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _16420 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _16404
                        mem[mem[64] + 36] = 128
                        _16428 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_16420 + 100] = block.timestamp + 60
                        require ext_code.size(address(_16412))
                        call address(_16412).mem[mem[64] len 4] with:
                           value _16404 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _16420 + (32 * _16428) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16540 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16548 = mem[_16540]
                        require mem[_16540] <= test266151307()
                        require _16540 + mem[_16540] + 31 < _16540 + return_data.size
                        _16556 = mem[_16540 + mem[_16540]]
                        if mem[_16540 + mem[_16540]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_16540 + mem[_16540]]) + 1 < 0 or _16540 + ceil32(return_data.size) + ceil32(32 * mem[_16540 + mem[_16540]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _16540 + ceil32(return_data.size) + ceil32(32 * mem[_16540 + mem[_16540]]) + 1
                        mem[_16540 + ceil32(return_data.size)] = _16556
                        require _16548 + (32 * _16556) + 32 <= return_data.size
                        t = _16540 + ceil32(return_data.size) + 32
                        s = _16540 + _16548 + 32
                        while s < _16540 + _16548 + (32 * _16556) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16636 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_16636]
                    else:
                        mem[mem[64] + 4] = _16266
                        mem[mem[64] + 36] = _16287
                        require ext_code.size(address(_16265))
                        call address(_16265).0xe2bbb158 with:
                             gas gas_remaining wei
                            args _16266, _16287
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[mem[64]] = _16287
                        emit Earn(_16287);
                        _16325 = mem[_742 + 32]
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(address(_16325))
                        staticcall address(_16325).0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16349 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        mem[_742 + 96] = mem[_16349]
                        if not mem[96]:
                            revert with 0, 50
                        mem[128] = stor21
                        if 1 >= mem[96]:
                            revert with 0, 50
                        mem[160] = USDTAddress
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(stor21)
                        staticcall stor21.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16397 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16405 = mem[_16397]
                        _16413 = mem[_742]
                        if 60 > !block.timestamp:
                            revert with 0, 17
                        _16421 = mem[64]
                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = _16405
                        mem[mem[64] + 36] = 128
                        _16429 = mem[96]
                        mem[mem[64] + 132] = mem[96]
                        s = 0
                        t = 128
                        u = mem[64] + 164
                        while s < mem[96]:
                            mem[u] = mem[t + 12 len 20]
                            s = s + 1
                            t = t + 32
                            u = u + 32
                            continue 
                        mem[mem[64] + 68] = this.address
                        mem[_16421 + 100] = block.timestamp + 60
                        require ext_code.size(address(_16413))
                        call address(_16413).mem[mem[64] len 4] with:
                           value _16405 wei
                             gas gas_remaining wei
                            args mem[mem[64] + 4 len _16421 + (32 * _16429) + -mem[64] + 160]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16541 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _16549 = mem[_16541]
                        require mem[_16541] <= test266151307()
                        require _16541 + mem[_16541] + 31 < _16541 + return_data.size
                        _16557 = mem[_16541 + mem[_16541]]
                        if mem[_16541 + mem[_16541]] > test266151307():
                            revert with 0, 65
                        if ceil32(32 * mem[_16541 + mem[_16541]]) + 1 < 0 or _16541 + ceil32(return_data.size) + ceil32(32 * mem[_16541 + mem[_16541]]) + 1 > test266151307():
                            revert with 0, 65
                        mem[64] = _16541 + ceil32(return_data.size) + ceil32(32 * mem[_16541 + mem[_16541]]) + 1
                        mem[_16541 + ceil32(return_data.size)] = _16557
                        require _16549 + (32 * _16557) + 32 <= return_data.size
                        t = _16541 + ceil32(return_data.size) + 32
                        s = _16541 + _16549 + 32
                        while s < _16541 + _16549 + (32 * _16557) + 32:
                            mem[t] = mem[s]
                            t = t + 32
                            s = s + 32
                            continue 
                        mem[mem[64] + 4] = this.address
                        require ext_code.size(USDTAddress)
                        staticcall USDTAddress.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _16637 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        sub_5e8f09aa = mem[_16637]
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _742
            s = _3455 - (100 * _3455 / 10000)
            s = stor9[idx].field_0
            continue 
        mem[mem[64] + 4] = _809
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        call strategyInfo[stor9[idx].field_0].field_1280.0x2e1a7d4d with:
             gas gas_remaining wei
            args _809
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        staticcall strategyInfo[stor9[idx].field_0].field_1280.SUSHI() with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _871 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _877 = mem[_871]
        require mem[_871] == mem[_871 + 12 len 20]
        if 0 >= mem[96]:
            revert with 0, 50
        mem[128] = mem[_871 + 12 len 20]
        if 1 >= mem[96]:
            revert with 0, 50
        mem[160] = stor21
        require ext_code.size(address(_877))
        staticcall address(_877).0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _934 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _939 = mem[_934]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_877))
        staticcall address(_877).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _947 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _953 = mem[_947]
        if mem[_947] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _939:
            revert with 0, 18
        mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args strategyInfo[stor9[idx].field_0].field_0
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _980 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _993 = mem[_980]
        if 10^12 * _953 / _939 and mem[_980] > -1 / 10^12 * _953 / _939:
            revert with 0, 17
        _1029 = mem[64]
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _953 / _939 * _993 / 10^12
        mem[mem[64] + 36] = 64
        _1045 = mem[96]
        mem[mem[64] + 68] = mem[96]
        s = 0
        t = 128
        u = mem[64] + 100
        while s < _1045:
            mem[u] = mem[t + 12 len 20]
            s = s + 1
            t = t + 32
            u = u + 32
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
        staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _1029 + (32 * _1045) + -mem[64] + 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1762 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1769 = mem[_1762]
        require mem[_1762] <= test266151307()
        require _1762 + mem[_1762] + 31 < _1762 + return_data.size
        _1784 = mem[_1762 + mem[_1762]]
        if mem[_1762 + mem[_1762]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_1762 + mem[_1762]]) + 1 < 0 or _1762 + ceil32(return_data.size) + ceil32(32 * mem[_1762 + mem[_1762]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _1762 + ceil32(return_data.size) + ceil32(32 * mem[_1762 + mem[_1762]]) + 1
        mem[_1762 + ceil32(return_data.size)] = _1784
        require _1769 + (32 * _1784) + 32 <= return_data.size
        t = _1762 + ceil32(return_data.size) + 32
        s = _1762 + _1769 + 32
        while s < _1762 + _1769 + (32 * _1784) + 32:
            mem[t] = mem[s]
            t = t + 32
            s = s + 32
            continue 
        if 1 >= _1784:
            revert with 0, 50
        _3454 = mem[_1762 + ceil32(return_data.size) + 64]
        if mem[_1762 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_1762 + ceil32(return_data.size) + 64]:
            revert with 0, 17
        if mem[_1762 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if mem[_1762 + ceil32(return_data.size) + 64] < 100 * mem[_1762 + ceil32(return_data.size) + 64] / 10000:
            revert with 0, 17
        _3536 = mem[_742]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_877))
        staticcall address(_877).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3568 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3584 = mem[_3568]
        if 60 > !block.timestamp:
            revert with 0, 17
        _3610 = mem[64]
        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _3584
        mem[mem[64] + 36] = _3454 - (100 * _3454 / 10000)
        mem[mem[64] + 68] = 160
        _3622 = mem[96]
        mem[mem[64] + 164] = mem[96]
        s = 0
        t = 128
        u = mem[64] + 196
        while s < _3622:
            mem[u] = mem[t + 12 len 20]
            s = s + 1
            t = t + 32
            u = u + 32
            continue 
        mem[_3610 + 100] = this.address
        mem[_3610 + 132] = block.timestamp + 60
        require ext_code.size(address(_3536))
        call address(_3536).mem[mem[64] len 4] with:
             gas gas_remaining wei
            args mem[mem[64] + 4 len _3610 + (32 * _3622) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5303 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _5319 = mem[_5303]
        require mem[_5303] <= test266151307()
        require _5303 + mem[_5303] + 31 < _5303 + return_data.size
        _5339 = mem[_5303 + mem[_5303]]
        if mem[_5303 + mem[_5303]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_5303 + mem[_5303]]) + 1 < 0 or _5303 + ceil32(return_data.size) + ceil32(32 * mem[_5303 + mem[_5303]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _5303 + ceil32(return_data.size) + ceil32(32 * mem[_5303 + mem[_5303]]) + 1
        mem[_5303 + ceil32(return_data.size)] = _5339
        require _5319 + (32 * _5339) + 32 <= return_data.size
        t = _5303 + ceil32(return_data.size) + 32
        s = _5303 + _5319 + 32
        while s < _5303 + _5319 + (32 * _5339) + 32:
            mem[t] = mem[s]
            t = t + 32
            s = s + 32
            continue 
        _7127 = mem[_742]
        _7128 = mem[_742 + 192]
        _7129 = mem[_742 + 224]
        _7141 = mem[64]
        mem[mem[64]] = 2
        mem[64] = mem[64] + 96
        mem[_7141 + 32 len 64] = call.data[calldata.size len 64]
        if not mem[_7141]:
            revert with 0, 50
        mem[_7141 + 32] = stor21
        if stor21 == address(_7128):
            if stor21 == address(_7129):
                mem[_7141 + 100] = this.address
                require ext_code.size(address(_7128))
                staticcall address(_7128).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[_7141 + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                mem[_7141 + ceil32(return_data.size) + 100] = this.address
                require ext_code.size(address(_7129))
                staticcall address(_7129).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[_7141 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 'Desired value is zero'
                if not ext_call.return_data[0]:
                    revert with 0, 'Desired value is zero'
                mem[_7141 + (2 * ceil32(return_data.size)) + 100] = address(_7127)
                mem[_7141 + (2 * ceil32(return_data.size)) + 132] = -1
                require ext_code.size(address(_7128))
                call address(_7128).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_7127), -1
                mem[_7141 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                mem[_7141 + (4 * ceil32(return_data.size)) + 100] = address(_7127)
                mem[_7141 + (4 * ceil32(return_data.size)) + 132] = -1
                require ext_code.size(address(_7129))
                call address(_7129).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_7127), -1
                mem[_7141 + (4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == bool(ext_call.return_data[0])
                if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                    revert with 0, 17
                if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                    revert with 0, 17
                if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[_7141 + (6 * ceil32(return_data.size)) + 164] = ext_call.return_data[0]
                mem[_7141 + (6 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
                mem[_7141 + (6 * ceil32(return_data.size)) + 228] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                mem[_7141 + (6 * ceil32(return_data.size)) + 260] = ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000)
                mem[_7141 + (6 * ceil32(return_data.size)) + 292] = this.address
                mem[_7141 + (6 * ceil32(return_data.size)) + 324] = block.timestamp + 60
                require ext_code.size(address(_7127))
                call address(_7127).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                     gas gas_remaining wei
                    args address(_7128), address(_7129), ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
                mem[_7141 + (6 * ceil32(return_data.size)) + 96 len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _7141 + (7 * ceil32(return_data.size)) + 96
                require return_data.size >= 96
                _7587 = mem[_742 + 160]
                _7588 = mem[_742 + 64]
                _7589 = mem[_742 + 32]
                mem[_7141 + (7 * ceil32(return_data.size)) + 100] = this.address
                require ext_code.size(address(_7589))
                staticcall address(_7589).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[_7141 + (7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = _7141 + (8 * ceil32(return_data.size)) + 96
                require return_data.size >= 32
                if _7588 >= 999999:
                    mem[_7141 + (8 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                    require ext_code.size(address(_7587))
                    call address(_7587).deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_7141 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    emit Earn(ext_call.return_data[0]);
                    _7733 = mem[_742 + 32]
                    mem[_7141 + (8 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(address(_7733))
                    staticcall address(_7733).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7141 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_742 + 96] = ext_call.return_data[0]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[_7141 + (10 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7141 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _7141 + (11 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _7957 = mem[_742]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[_7141 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[_7141 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                    mem[_7141 + (11 * ceil32(return_data.size)) + 132] = 128
                    mem[_7141 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                    s = 0
                    t = 128
                    u = _7141 + (11 * ceil32(return_data.size)) + 260
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_7141 + (11 * ceil32(return_data.size)) + 164] = this.address
                    mem[_7141 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                    require ext_code.size(address(_7957))
                    call address(_7957).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                       value ext_call.return_data[0] wei
                         gas gas_remaining wei
                        args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_7141 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_7141 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _7141 + (12 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _9016 = mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                    require mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                    require _7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _7141 + (11 * ceil32(return_data.size)) + return_data.size + 96
                    _9036 = mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                    if mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _7141 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = _7141 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                    mem[_7141 + (12 * ceil32(return_data.size)) + 96] = mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                    require _9016 + (32 * _9036) + 32 <= return_data.size
                    t = _7141 + (12 * ceil32(return_data.size)) + 128
                    s = _7141 + (11 * ceil32(return_data.size)) + _9016 + 128
                    while s < _7141 + (11 * ceil32(return_data.size)) + _9016 + (32 * _9036) + 128:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10521 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_10521]
                else:
                    mem[_7141 + (8 * ceil32(return_data.size)) + 100] = _7588
                    mem[_7141 + (8 * ceil32(return_data.size)) + 132] = ext_call.return_data[0]
                    require ext_code.size(address(_7587))
                    call address(_7587).0xe2bbb158 with:
                         gas gas_remaining wei
                        args _7588, ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_7141 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    emit Earn(ext_call.return_data[0]);
                    _7734 = mem[_742 + 32]
                    mem[_7141 + (8 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(address(_7734))
                    staticcall address(_7734).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7141 + (8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    mem[_742 + 96] = ext_call.return_data[0]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[_7141 + (10 * ceil32(return_data.size)) + 100] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[_7141 + (10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _7141 + (11 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _7958 = mem[_742]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    mem[_7141 + (11 * ceil32(return_data.size)) + 96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[_7141 + (11 * ceil32(return_data.size)) + 100] = ext_call.return_data[0]
                    mem[_7141 + (11 * ceil32(return_data.size)) + 132] = 128
                    mem[_7141 + (11 * ceil32(return_data.size)) + 228] = mem[96]
                    s = 0
                    t = 128
                    u = _7141 + (11 * ceil32(return_data.size)) + 260
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_7141 + (11 * ceil32(return_data.size)) + 164] = this.address
                    mem[_7141 + (11 * ceil32(return_data.size)) + 196] = block.timestamp + 60
                    require ext_code.size(address(_7958))
                    call address(_7958).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                       value ext_call.return_data[0] wei
                         gas gas_remaining wei
                        args ext_call.return_data[0], 128, address(this.address), block.timestamp + 60, mem[_7141 + (11 * ceil32(return_data.size)) + 228 len (32 * mem[96]) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_7141 + (11 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _7141 + (12 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _9017 = mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28]
                    require mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] <= test266151307()
                    require _7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 127 < _7141 + (11 * ceil32(return_data.size)) + return_data.size + 96
                    _9037 = mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                    if mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 1 < 0 or _7141 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97 > test266151307():
                        revert with 0, 65
                    mem[64] = _7141 + (12 * ceil32(return_data.size)) + ceil32(32 * mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]) + 97
                    mem[_7141 + (12 * ceil32(return_data.size)) + 96] = mem[_7141 + (11 * ceil32(return_data.size)) + mem[_7141 + (11 * ceil32(return_data.size)) + 96 len 4], ext_call.return_data[0 len 28] + 96]
                    require _9017 + (32 * _9037) + 32 <= return_data.size
                    t = _7141 + (12 * ceil32(return_data.size)) + 128
                    s = _7141 + (11 * ceil32(return_data.size)) + _9017 + 128
                    while s < _7141 + (11 * ceil32(return_data.size)) + _9017 + (32 * _9037) + 128:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _10522 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_10522]
            else:
                if 1 >= mem[_7141]:
                    revert with 0, 50
                mem[_7141 + 64] = address(_7129)
                mem[_7141 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[_7141 + 100] = eth.balance(this.address) / 2
                mem[_7141 + 132] = 64
                mem[_7141 + 164] = mem[_7141]
                s = 0
                t = _7141 + 32
                u = _7141 + 196
                while s < mem[_7141]:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(_7127))
                staticcall address(_7127).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _7141 + (32 * mem[_7141]) + -mem[64] + 192]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _9004 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _9026 = mem[_9004]
                require mem[_9004] <= test266151307()
                require _9004 + mem[_9004] + 31 < _9004 + return_data.size
                _9046 = mem[_9004 + mem[_9004]]
                if mem[_9004 + mem[_9004]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_9004 + mem[_9004]]) + 1 < 0 or _9004 + ceil32(return_data.size) + ceil32(32 * mem[_9004 + mem[_9004]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _9004 + ceil32(return_data.size) + ceil32(32 * mem[_9004 + mem[_9004]]) + 1
                mem[_9004 + ceil32(return_data.size)] = _9046
                require _9026 + (32 * _9046) + 32 <= return_data.size
                t = _9004 + ceil32(return_data.size) + 32
                s = _9004 + _9026 + 32
                while s < _9004 + _9026 + (32 * _9046) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _9046:
                    revert with 0, 50
                _10489 = mem[_9004 + ceil32(return_data.size) + 64]
                if mem[_9004 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_9004 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_9004 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 1 >= _9046:
                    revert with 0, 50
                _10558 = mem[_9004 + ceil32(return_data.size) + 64]
                if mem[_9004 + ceil32(return_data.size) + 64] < 100 * mem[_9004 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _10558 - (100 * _10489 / 10000)
                mem[mem[64] + 36] = 128
                _10593 = mem[_7141]
                mem[mem[64] + 132] = mem[_7141]
                s = 0
                t = _7141 + 32
                u = mem[64] + 164
                while s < _10593:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[mem[64] + 68] = this.address
                mem[mem[64] + 100] = block.timestamp + 60
                require ext_code.size(address(_7127))
                call address(_7127).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value _10558 - (100 * _10489 / 10000) wei
                     gas gas_remaining wei
                    args _10558 - (100 * _10489 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _10593) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _11946 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _11955 = mem[_11946]
                require mem[_11946] <= test266151307()
                require _11946 + mem[_11946] + 31 < _11946 + return_data.size
                _11964 = mem[_11946 + mem[_11946]]
                if mem[_11946 + mem[_11946]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_11946 + mem[_11946]]) + 1 < 0 or _11946 + ceil32(return_data.size) + ceil32(32 * mem[_11946 + mem[_11946]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _11946 + ceil32(return_data.size) + ceil32(32 * mem[_11946 + mem[_11946]]) + 1
                mem[_11946 + ceil32(return_data.size)] = _11964
                require _11955 + (32 * _11964) + 32 <= return_data.size
                t = _11946 + ceil32(return_data.size) + 32
                s = _11946 + _11955 + 32
                while s < _11946 + _11955 + (32 * _11964) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_7128))
                staticcall address(_7128).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13255 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13263 = mem[_13255]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_7129))
                staticcall address(_7129).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13301 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13309 = mem[_13301]
                if not _13263:
                    revert with 0, 'Desired value is zero'
                if not mem[_13301]:
                    revert with 0, 'Desired value is zero'
                mem[mem[64] + 4] = address(_7127)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_7128))
                call address(_7128).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_7127), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13383 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_13383] == bool(mem[_13383])
                mem[mem[64] + 4] = address(_7127)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_7129))
                call address(_7129).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_7127), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13426 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_13426] == bool(mem[_13426])
                if _13263 and 1 > -1 / _13263:
                    revert with 0, 17
                if _13263 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _13263 < 100 * _13263 / 10000:
                    revert with 0, 17
                if _13309 and 1 > -1 / _13309:
                    revert with 0, 17
                if _13309 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _13309 < 100 * _13309 / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64] + 68] = _13263
                mem[mem[64] + 100] = _13309
                mem[mem[64] + 132] = _13263 - (100 * _13263 / 10000)
                mem[mem[64] + 164] = _13309 - (100 * _13309 / 10000)
                mem[mem[64] + 196] = this.address
                mem[mem[64] + 228] = block.timestamp + 60
                require ext_code.size(address(_7127))
                call address(_7127).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                     gas gas_remaining wei
                    args address(_7128), address(_7129), _13263, _13309, _13263 - (100 * _13263 / 10000), _13309 - (100 * _13309 / 10000), address(this.address), block.timestamp + 60
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                _13565 = mem[_742 + 160]
                _13566 = mem[_742 + 64]
                _13567 = mem[_742 + 32]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_13567))
                staticcall address(_13567).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13614 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13626 = mem[_13614]
                if _13566 >= 999999:
                    mem[mem[64] + 4] = mem[_13614]
                    require ext_code.size(address(_13565))
                    call address(_13565).deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args _13626
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _13626
                    emit Earn(_13626);
                    _13698 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13698))
                    staticcall address(_13698).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13766 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_742 + 96] = mem[_13766]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13894 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13918 = mem[_13894]
                    _13938 = mem[_742]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _13960 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _13918
                    mem[mem[64] + 36] = 128
                    _13977 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[_13960 + 100] = block.timestamp + 60
                    require ext_code.size(address(_13938))
                    call address(_13938).mem[mem[64] len 4] with:
                       value _13918 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _13960 + (32 * _13977) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14541 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _14562 = mem[_14541]
                    require mem[_14541] <= test266151307()
                    require _14541 + mem[_14541] + 31 < _14541 + return_data.size
                    _14583 = mem[_14541 + mem[_14541]]
                    if mem[_14541 + mem[_14541]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_14541 + mem[_14541]]) + 1 < 0 or _14541 + ceil32(return_data.size) + ceil32(32 * mem[_14541 + mem[_14541]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _14541 + ceil32(return_data.size) + ceil32(32 * mem[_14541 + mem[_14541]]) + 1
                    mem[_14541 + ceil32(return_data.size)] = _14583
                    require _14562 + (32 * _14583) + 32 <= return_data.size
                    t = _14541 + ceil32(return_data.size) + 32
                    s = _14541 + _14562 + 32
                    while s < _14541 + _14562 + (32 * _14583) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _15257 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_15257]
                else:
                    mem[mem[64] + 4] = _13566
                    mem[mem[64] + 36] = _13626
                    require ext_code.size(address(_13565))
                    call address(_13565).0xe2bbb158 with:
                         gas gas_remaining wei
                        args _13566, _13626
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _13626
                    emit Earn(_13626);
                    _13699 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13699))
                    staticcall address(_13699).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13767 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_742 + 96] = mem[_13767]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13895 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13919 = mem[_13895]
                    _13939 = mem[_742]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _13961 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _13919
                    mem[mem[64] + 36] = 128
                    _13978 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < _13978:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_13961 + 68] = this.address
                    mem[_13961 + 100] = block.timestamp + 60
                    require ext_code.size(address(_13939))
                    call address(_13939).mem[mem[64] len 4] with:
                       value _13919 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _13961 + (32 * _13978) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14542 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _14563 = mem[_14542]
                    require mem[_14542] <= test266151307()
                    require _14542 + mem[_14542] + 31 < _14542 + return_data.size
                    _14584 = mem[_14542 + mem[_14542]]
                    if mem[_14542 + mem[_14542]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_14542 + mem[_14542]]) + 1 < 0 or _14542 + ceil32(return_data.size) + ceil32(32 * mem[_14542 + mem[_14542]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _14542 + ceil32(return_data.size) + ceil32(32 * mem[_14542 + mem[_14542]]) + 1
                    mem[_14542 + ceil32(return_data.size)] = _14584
                    require _14563 + (32 * _14584) + 32 <= return_data.size
                    t = _14542 + ceil32(return_data.size) + 32
                    s = _14542 + _14563 + 32
                    while s < _14542 + _14563 + (32 * _14584) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _15258 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_15258]
        else:
            if 1 >= mem[_7141]:
                revert with 0, 50
            mem[_7141 + 64] = address(_7128)
            mem[_7141 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[_7141 + 100] = eth.balance(this.address) / 2
            mem[_7141 + 132] = 64
            mem[_7141 + 164] = mem[_7141]
            s = 0
            t = _7141 + 32
            u = _7141 + 196
            while s < mem[_7141]:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(address(_7127))
            staticcall address(_7127).mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _7141 + (32 * mem[_7141]) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9005 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _9027 = mem[_9005]
            require mem[_9005] <= test266151307()
            require _9005 + mem[_9005] + 31 < _9005 + return_data.size
            _9047 = mem[_9005 + mem[_9005]]
            if mem[_9005 + mem[_9005]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_9005 + mem[_9005]]) + 1 < 0 or _9005 + ceil32(return_data.size) + ceil32(32 * mem[_9005 + mem[_9005]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _9005 + ceil32(return_data.size) + ceil32(32 * mem[_9005 + mem[_9005]]) + 1
            mem[_9005 + ceil32(return_data.size)] = _9047
            require _9027 + (32 * _9047) + 32 <= return_data.size
            t = _9005 + ceil32(return_data.size) + 32
            s = _9005 + _9027 + 32
            while s < _9005 + _9027 + (32 * _9047) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _9047:
                revert with 0, 50
            _10490 = mem[_9005 + ceil32(return_data.size) + 64]
            if mem[_9005 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_9005 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_9005 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if 1 >= _9047:
                revert with 0, 50
            _10559 = mem[_9005 + ceil32(return_data.size) + 64]
            if mem[_9005 + ceil32(return_data.size) + 64] < 100 * mem[_9005 + ceil32(return_data.size) + 64] / 10000:
                revert with 0, 17
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _10559 - (100 * _10490 / 10000)
            mem[mem[64] + 36] = 128
            _10594 = mem[_7141]
            mem[mem[64] + 132] = mem[_7141]
            s = 0
            t = _7141 + 32
            u = mem[64] + 164
            while s < _10594:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            mem[mem[64] + 68] = this.address
            mem[mem[64] + 100] = block.timestamp + 60
            require ext_code.size(address(_7127))
            call address(_7127).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
               value _10559 - (100 * _10490 / 10000) wei
                 gas gas_remaining wei
                args _10559 - (100 * _10490 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _10594) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _11947 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _11956 = mem[_11947]
            require mem[_11947] <= test266151307()
            require _11947 + mem[_11947] + 31 < _11947 + return_data.size
            _11965 = mem[_11947 + mem[_11947]]
            if mem[_11947 + mem[_11947]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_11947 + mem[_11947]]) + 1 < 0 or _11947 + ceil32(return_data.size) + ceil32(32 * mem[_11947 + mem[_11947]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _11947 + ceil32(return_data.size) + ceil32(32 * mem[_11947 + mem[_11947]]) + 1
            mem[_11947 + ceil32(return_data.size)] = _11965
            require _11956 + (32 * _11965) + 32 <= return_data.size
            t = _11947 + ceil32(return_data.size) + 32
            s = _11947 + _11956 + 32
            while s < _11947 + _11956 + (32 * _11965) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if stor21 == address(_7129):
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_7128))
                staticcall address(_7128).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13259 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13271 = mem[_13259]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_7129))
                staticcall address(_7129).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13305 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13317 = mem[_13305]
                if not _13271:
                    revert with 0, 'Desired value is zero'
                if not mem[_13305]:
                    revert with 0, 'Desired value is zero'
                mem[mem[64] + 4] = address(_7127)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_7128))
                call address(_7128).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_7127), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13392 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_13392] == bool(mem[_13392])
                mem[mem[64] + 4] = address(_7127)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_7129))
                call address(_7129).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_7127), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13435 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_13435] == bool(mem[_13435])
                if _13271 and 1 > -1 / _13271:
                    revert with 0, 17
                if _13271 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _13271 < 100 * _13271 / 10000:
                    revert with 0, 17
                if _13317 and 1 > -1 / _13317:
                    revert with 0, 17
                if _13317 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _13317 < 100 * _13317 / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64] + 68] = _13271
                mem[mem[64] + 100] = _13317
                mem[mem[64] + 132] = _13271 - (100 * _13271 / 10000)
                mem[mem[64] + 164] = _13317 - (100 * _13317 / 10000)
                mem[mem[64] + 196] = this.address
                mem[mem[64] + 228] = block.timestamp + 60
                require ext_code.size(address(_7127))
                call address(_7127).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                     gas gas_remaining wei
                    args address(_7128), address(_7129), _13271, _13317, _13271 - (100 * _13271 / 10000), _13317 - (100 * _13317 / 10000), address(this.address), block.timestamp + 60
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                _13579 = mem[_742 + 160]
                _13580 = mem[_742 + 64]
                _13581 = mem[_742 + 32]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_13581))
                staticcall address(_13581).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _13618 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _13630 = mem[_13618]
                if _13580 >= 999999:
                    mem[mem[64] + 4] = mem[_13618]
                    require ext_code.size(address(_13579))
                    call address(_13579).deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args _13630
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _13630
                    emit Earn(_13630);
                    _13730 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13730))
                    staticcall address(_13730).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13774 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_742 + 96] = mem[_13774]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13910 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13930 = mem[_13910]
                    _13950 = mem[_742]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _13969 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _13930
                    mem[mem[64] + 36] = 128
                    _13988 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < mem[96]:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[mem[64] + 68] = this.address
                    mem[_13969 + 100] = block.timestamp + 60
                    require ext_code.size(address(_13950))
                    call address(_13950).mem[mem[64] len 4] with:
                       value _13930 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _13969 + (32 * _13988) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14543 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _14564 = mem[_14543]
                    require mem[_14543] <= test266151307()
                    require _14543 + mem[_14543] + 31 < _14543 + return_data.size
                    _14585 = mem[_14543 + mem[_14543]]
                    if mem[_14543 + mem[_14543]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_14543 + mem[_14543]]) + 1 < 0 or _14543 + ceil32(return_data.size) + ceil32(32 * mem[_14543 + mem[_14543]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _14543 + ceil32(return_data.size) + ceil32(32 * mem[_14543 + mem[_14543]]) + 1
                    mem[_14543 + ceil32(return_data.size)] = _14585
                    require _14564 + (32 * _14585) + 32 <= return_data.size
                    t = _14543 + ceil32(return_data.size) + 32
                    s = _14543 + _14564 + 32
                    while s < _14543 + _14564 + (32 * _14585) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _15259 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_15259]
                else:
                    mem[mem[64] + 4] = _13580
                    mem[mem[64] + 36] = _13630
                    require ext_code.size(address(_13579))
                    call address(_13579).0xe2bbb158 with:
                         gas gas_remaining wei
                        args _13580, _13630
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _13630
                    emit Earn(_13630);
                    _13731 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_13731))
                    staticcall address(_13731).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13775 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_742 + 96] = mem[_13775]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _13911 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _13931 = mem[_13911]
                    _13951 = mem[_742]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _13970 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _13931
                    mem[mem[64] + 36] = 128
                    _13989 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < _13989:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_13970 + 68] = this.address
                    mem[_13970 + 100] = block.timestamp + 60
                    require ext_code.size(address(_13951))
                    call address(_13951).mem[mem[64] len 4] with:
                       value _13931 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _13970 + (32 * _13989) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _14544 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _14565 = mem[_14544]
                    require mem[_14544] <= test266151307()
                    require _14544 + mem[_14544] + 31 < _14544 + return_data.size
                    _14586 = mem[_14544 + mem[_14544]]
                    if mem[_14544 + mem[_14544]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_14544 + mem[_14544]]) + 1 < 0 or _14544 + ceil32(return_data.size) + ceil32(32 * mem[_14544 + mem[_14544]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _14544 + ceil32(return_data.size) + ceil32(32 * mem[_14544 + mem[_14544]]) + 1
                    mem[_14544 + ceil32(return_data.size)] = _14586
                    require _14565 + (32 * _14586) + 32 <= return_data.size
                    t = _14544 + ceil32(return_data.size) + 32
                    s = _14544 + _14565 + 32
                    while s < _14544 + _14565 + (32 * _14586) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _15260 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_15260]
            else:
                if 1 >= mem[_7141]:
                    revert with 0, 50
                mem[_7141 + 64] = address(_7129)
                _13264 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = eth.balance(this.address) / 2
                mem[mem[64] + 36] = 64
                _13275 = mem[_7141]
                mem[mem[64] + 68] = mem[_7141]
                s = 0
                t = _7141 + 32
                u = mem[64] + 100
                while s < _13275:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(address(_7127))
                staticcall address(_7127).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _13264 + (32 * _13275) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _14557 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _14578 = mem[_14557]
                require mem[_14557] <= test266151307()
                require _14557 + mem[_14557] + 31 < _14557 + return_data.size
                _14599 = mem[_14557 + mem[_14557]]
                if mem[_14557 + mem[_14557]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_14557 + mem[_14557]]) + 1 < 0 or _14557 + ceil32(return_data.size) + ceil32(32 * mem[_14557 + mem[_14557]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _14557 + ceil32(return_data.size) + ceil32(32 * mem[_14557 + mem[_14557]]) + 1
                mem[_14557 + ceil32(return_data.size)] = _14599
                require _14578 + (32 * _14599) + 32 <= return_data.size
                t = _14557 + ceil32(return_data.size) + 32
                s = _14557 + _14578 + 32
                while s < _14557 + _14578 + (32 * _14599) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _14599:
                    revert with 0, 50
                _15218 = mem[_14557 + ceil32(return_data.size) + 64]
                if mem[_14557 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_14557 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                if mem[_14557 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 1 >= _14599:
                    revert with 0, 50
                _15297 = mem[_14557 + ceil32(return_data.size) + 64]
                if mem[_14557 + ceil32(return_data.size) + 64] < 100 * mem[_14557 + ceil32(return_data.size) + 64] / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                _15305 = mem[64]
                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = _15297 - (100 * _15218 / 10000)
                mem[mem[64] + 36] = 128
                _15312 = mem[_7141]
                mem[mem[64] + 132] = mem[_7141]
                s = 0
                t = _7141 + 32
                u = mem[64] + 164
                while s < _15312:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                mem[_15305 + 68] = this.address
                mem[_15305 + 100] = block.timestamp + 60
                require ext_code.size(address(_7127))
                call address(_7127).mem[mem[64] len 4] with:
                   value _15297 - (100 * _15218 / 10000) wei
                     gas gas_remaining wei
                    args mem[mem[64] + 4 len _15305 + (32 * _15312) + -mem[64] + 160]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _15770 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _15774 = mem[_15770]
                require mem[_15770] <= test266151307()
                require _15770 + mem[_15770] + 31 < _15770 + return_data.size
                _15778 = mem[_15770 + mem[_15770]]
                if mem[_15770 + mem[_15770]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_15770 + mem[_15770]]) + 1 < 0 or _15770 + ceil32(return_data.size) + ceil32(32 * mem[_15770 + mem[_15770]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _15770 + ceil32(return_data.size) + ceil32(32 * mem[_15770 + mem[_15770]]) + 1
                mem[_15770 + ceil32(return_data.size)] = _15778
                require _15774 + (32 * _15778) + 32 <= return_data.size
                t = _15770 + ceil32(return_data.size) + 32
                s = _15770 + _15774 + 32
                while s < _15770 + _15774 + (32 * _15778) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_7128))
                staticcall address(_7128).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _16166 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _16170 = mem[_16166]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_7129))
                staticcall address(_7129).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _16182 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _16186 = mem[_16182]
                if not _16170:
                    revert with 0, 'Desired value is zero'
                if not mem[_16182]:
                    revert with 0, 'Desired value is zero'
                mem[mem[64] + 4] = address(_7127)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_7128))
                call address(_7128).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_7127), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _16214 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_16214] == bool(mem[_16214])
                mem[mem[64] + 4] = address(_7127)
                mem[mem[64] + 36] = -1
                require ext_code.size(address(_7129))
                call address(_7129).approve(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args address(_7127), -1
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _16230 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require mem[_16230] == bool(mem[_16230])
                if _16170 and 1 > -1 / _16170:
                    revert with 0, 17
                if _16170 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _16170 < 100 * _16170 / 10000:
                    revert with 0, 17
                if _16186 and 1 > -1 / _16186:
                    revert with 0, 17
                if _16186 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if _16186 < 100 * _16186 / 10000:
                    revert with 0, 17
                if 60 > !block.timestamp:
                    revert with 0, 17
                mem[mem[64] + 68] = _16170
                mem[mem[64] + 100] = _16186
                mem[mem[64] + 132] = _16170 - (100 * _16170 / 10000)
                mem[mem[64] + 164] = _16186 - (100 * _16186 / 10000)
                mem[mem[64] + 196] = this.address
                mem[mem[64] + 228] = block.timestamp + 60
                require ext_code.size(address(_7127))
                call address(_7127).addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                     gas gas_remaining wei
                    args address(_7128), address(_7129), _16170, _16186, _16170 - (100 * _16170 / 10000), _16186 - (100 * _16186 / 10000), address(this.address), block.timestamp + 60
                mem[mem[64] len 96] = ext_call.return_data[0 len 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 96
                _16262 = mem[_742 + 160]
                _16263 = mem[_742 + 64]
                _16264 = mem[_742 + 32]
                mem[mem[64] + 4] = this.address
                require ext_code.size(address(_16264))
                staticcall address(_16264).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _16282 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _16286 = mem[_16282]
                if _16263 >= 999999:
                    mem[mem[64] + 4] = mem[_16282]
                    require ext_code.size(address(_16262))
                    call address(_16262).deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args _16286
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _16286
                    emit Earn(_16286);
                    _16322 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_16322))
                    staticcall address(_16322).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16346 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_742 + 96] = mem[_16346]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16394 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16402 = mem[_16394]
                    _16410 = mem[_742]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _16418 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _16402
                    mem[mem[64] + 36] = 128
                    _16426 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < _16426:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_16418 + 68] = this.address
                    mem[_16418 + 100] = block.timestamp + 60
                    require ext_code.size(address(_16410))
                    call address(_16410).mem[mem[64] len 4] with:
                       value _16402 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _16418 + (32 * _16426) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16538 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16546 = mem[_16538]
                    require mem[_16538] <= test266151307()
                    require _16538 + mem[_16538] + 31 < _16538 + return_data.size
                    _16554 = mem[_16538 + mem[_16538]]
                    if mem[_16538 + mem[_16538]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_16538 + mem[_16538]]) + 1 < 0 or _16538 + ceil32(return_data.size) + ceil32(32 * mem[_16538 + mem[_16538]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _16538 + ceil32(return_data.size) + ceil32(32 * mem[_16538 + mem[_16538]]) + 1
                    mem[_16538 + ceil32(return_data.size)] = _16554
                    require _16546 + (32 * _16554) + 32 <= return_data.size
                    t = _16538 + ceil32(return_data.size) + 32
                    s = _16538 + _16546 + 32
                    while s < _16538 + _16546 + (32 * _16554) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16634 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_16634]
                else:
                    mem[mem[64] + 4] = _16263
                    mem[mem[64] + 36] = _16286
                    require ext_code.size(address(_16262))
                    call address(_16262).0xe2bbb158 with:
                         gas gas_remaining wei
                        args _16263, _16286
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[mem[64]] = _16286
                    emit Earn(_16286);
                    _16323 = mem[_742 + 32]
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(address(_16323))
                    staticcall address(_16323).0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16347 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    mem[_742 + 96] = mem[_16347]
                    if not mem[96]:
                        revert with 0, 50
                    mem[128] = stor21
                    if 1 >= mem[96]:
                        revert with 0, 50
                    mem[160] = USDTAddress
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(stor21)
                    staticcall stor21.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16395 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16403 = mem[_16395]
                    _16411 = mem[_742]
                    if 60 > !block.timestamp:
                        revert with 0, 17
                    _16419 = mem[64]
                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = _16403
                    mem[mem[64] + 36] = 128
                    _16427 = mem[96]
                    mem[mem[64] + 132] = mem[96]
                    s = 0
                    t = 128
                    u = mem[64] + 164
                    while s < _16427:
                        mem[u] = mem[t + 12 len 20]
                        s = s + 1
                        t = t + 32
                        u = u + 32
                        continue 
                    mem[_16419 + 68] = this.address
                    mem[_16419 + 100] = block.timestamp + 60
                    require ext_code.size(address(_16411))
                    call address(_16411).mem[mem[64] len 4] with:
                       value _16403 wei
                         gas gas_remaining wei
                        args mem[mem[64] + 4 len _16419 + (32 * _16427) + -mem[64] + 160]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16539 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _16547 = mem[_16539]
                    require mem[_16539] <= test266151307()
                    require _16539 + mem[_16539] + 31 < _16539 + return_data.size
                    _16555 = mem[_16539 + mem[_16539]]
                    if mem[_16539 + mem[_16539]] > test266151307():
                        revert with 0, 65
                    if ceil32(32 * mem[_16539 + mem[_16539]]) + 1 < 0 or _16539 + ceil32(return_data.size) + ceil32(32 * mem[_16539 + mem[_16539]]) + 1 > test266151307():
                        revert with 0, 65
                    mem[64] = _16539 + ceil32(return_data.size) + ceil32(32 * mem[_16539 + mem[_16539]]) + 1
                    mem[_16539 + ceil32(return_data.size)] = _16555
                    require _16547 + (32 * _16555) + 32 <= return_data.size
                    t = _16539 + ceil32(return_data.size) + 32
                    s = _16539 + _16547 + 32
                    while s < _16539 + _16547 + (32 * _16555) + 32:
                        mem[t] = mem[s]
                        t = t + 32
                        s = s + 32
                        continue 
                    mem[mem[64] + 4] = this.address
                    require ext_code.size(USDTAddress)
                    staticcall USDTAddress.0x70a08231 with:
                            gas gas_remaining wei
                           args this.address
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _16635 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    sub_5e8f09aa = mem[_16635]
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = _742
        s = _3454 - (100 * _3454 / 10000)
        s = stor9[idx].field_0
        continue 
    _743 = mem[64]
    mem[64] = mem[64] + 256
    mem[_743] = 0
    mem[_743 + 32] = 0
    mem[_743 + 64] = 0
    mem[_743 + 96] = 0
    mem[_743 + 128] = 0
    mem[_743 + 160] = 0
    mem[_743 + 192] = 0
    mem[_743 + 224] = 0
    _747 = mem[64]
    mem[mem[64]] = 2
    mem[64] = mem[64] + 96
    mem[_747 + 32 len 64] = call.data[calldata.size len 64]
    idx = 0
    s = 96
    t = 0
    u = 0
    v = 0
    v = _743
    v = 0
    v = 0
    while idx < stor9.length:
        mem[0] = stor9[idx].field_0
        mem[32] = 6
        _1746 = mem[64]
        mem[64] = mem[64] + 256
        mem[_1746] = strategyInfo[stor9[idx].field_0].field_0
        mem[_1746 + 32] = strategyInfo[stor9[idx].field_0].field_256
        mem[_1746 + 64] = strategyInfo[stor9[idx].field_0].field_512
        mem[_1746 + 96] = strategyInfo[stor9[idx].field_0].field_768
        mem[_1746 + 128] = strategyInfo[stor9[idx].field_0].field_1024
        mem[_1746 + 160] = strategyInfo[stor9[idx].field_0].field_1280
        mem[_1746 + 192] = strategyInfo[stor9[idx].field_0].field_1536
        mem[_1746 + 224] = strategyInfo[stor9[idx].field_0].field_1792
        if 999999 > strategyInfo[stor9[idx].field_0].field_512:
            mem[mem[64] + 36] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.0x93f1a40b with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_512, this.address
            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1761 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 64
            _1767 = mem[_1761]
            if not mem[_1761]:
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s
                t = t
                u = u
                v = mem[_1761]
                v = _1746
                v = stor9[idx].field_0
                v = v
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
            staticcall strategyInfo[stor9[idx].field_0].field_256.getReserves() with:
                    gas gas_remaining wei
            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1822 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 96
            _1841 = mem[_1822]
            require mem[_1822] == mem[_1822 + 18 len 14]
            _1855 = mem[_1822 + 32]
            require mem[_1822 + 32] == mem[_1822 + 50 len 14]
            require mem[_1822 + 64] == mem[_1822 + 92 len 4]
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
            staticcall strategyInfo[stor9[idx].field_0].field_256.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _1886 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _1895 = mem[_1886]
            if _1767 > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not mem[_1886]:
                revert with 0, 18
            if 10^12 * _1767 / mem[_1886] and Mask(112, 0, _1841) > -1 / 10^12 * _1767 / mem[_1886]:
                revert with 0, 17
            if 10^12 * _1767 / mem[_1886] and Mask(112, 0, _1855) > -1 / 10^12 * _1767 / mem[_1886]:
                revert with 0, 17
            if 1 >= mem[_747]:
                revert with 0, 50
            mem[_747 + 64] = stor21
            if 0 >= mem[_747]:
                revert with 0, 50
            if stor21 == strategyInfo[stor9[idx].field_0].field_1536:
                mem[_747 + 32] = strategyInfo[stor9[idx].field_0].field_1792
                _1984 = mem[64]
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _1767 / _1895 * Mask(112, 0, _1855) / 10^12
                mem[mem[64] + 36] = 64
                _1997 = mem[_747]
                mem[mem[64] + 68] = mem[_747]
                s = 0
                t = _747 + 32
                u = mem[64] + 100
                while s < _1997:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len _1984 + (32 * _1997) + -mem[64] + 96]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3477 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3488 = mem[_3477]
                require mem[_3477] <= test266151307()
                require _3477 + mem[_3477] + 31 < _3477 + return_data.size
                _3500 = mem[_3477 + mem[_3477]]
                if mem[_3477 + mem[_3477]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_3477 + mem[_3477]]) + 1 < 0 or _3477 + ceil32(return_data.size) + ceil32(32 * mem[_3477 + mem[_3477]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _3477 + ceil32(return_data.size) + ceil32(32 * mem[_3477 + mem[_3477]]) + 1
                mem[_3477 + ceil32(return_data.size)] = _3500
                require _3488 + (32 * _3500) + 32 <= return_data.size
                t = _3477 + ceil32(return_data.size) + 32
                s = _3477 + _3488 + 32
                while s < _3477 + _3488 + (32 * _3500) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _3500:
                    revert with 0, 50
                _5290 = mem[_3477 + ceil32(return_data.size) + 64]
                if 10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12 > !mem[_3477 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                mem[_1746 + 128] = (10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12) + mem[_3477 + ceil32(return_data.size) + 64]
                if v > !((10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12) + _5290):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _3477 + ceil32(return_data.size)
                t = 10^12 * _1767 / _1895 * Mask(112, 0, _1855) / 10^12
                u = 10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12
                v = _1767
                v = _1746
                v = stor9[idx].field_0
                v = v + (10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12) + _5290
                continue 
            mem[_747 + 32] = strategyInfo[stor9[idx].field_0].field_1536
            if stor21 == strategyInfo[stor9[idx].field_0].field_1792:
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12
                mem[mem[64] + 36] = 64
                _2003 = mem[_747]
                mem[mem[64] + 68] = mem[_747]
                s = 0
                t = _747 + 32
                u = mem[64] + 100
                while s < _2003:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12, 64, mem[mem[64] + 68 len (32 * _2003) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _3476 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _3487 = mem[_3476]
                require mem[_3476] <= test266151307()
                require _3476 + mem[_3476] + 31 < _3476 + return_data.size
                _3499 = mem[_3476 + mem[_3476]]
                if mem[_3476 + mem[_3476]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_3476 + mem[_3476]]) + 1 < 0 or _3476 + ceil32(return_data.size) + ceil32(32 * mem[_3476 + mem[_3476]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _3476 + ceil32(return_data.size) + ceil32(32 * mem[_3476 + mem[_3476]]) + 1
                mem[_3476 + ceil32(return_data.size)] = _3499
                require _3487 + (32 * _3499) + 32 <= return_data.size
                t = _3476 + ceil32(return_data.size) + 32
                s = _3476 + _3487 + 32
                while s < _3476 + _3487 + (32 * _3499) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _3499:
                    revert with 0, 50
                _5289 = mem[_3476 + ceil32(return_data.size) + 64]
                if 10^12 * _1767 / _1895 * Mask(112, 0, _1855) / 10^12 > !mem[_3476 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                mem[_1746 + 128] = (10^12 * _1767 / _1895 * Mask(112, 0, _1855) / 10^12) + mem[_3476 + ceil32(return_data.size) + 64]
                if v > !((10^12 * _1767 / _1895 * Mask(112, 0, _1855) / 10^12) + _5289):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _3476 + ceil32(return_data.size)
                t = 10^12 * _1767 / _1895 * Mask(112, 0, _1855) / 10^12
                u = 10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12
                v = _1767
                v = _1746
                v = stor9[idx].field_0
                v = v + (10^12 * _1767 / _1895 * Mask(112, 0, _1855) / 10^12) + _5289
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
            staticcall strategyInfo[stor9[idx].field_0].field_1536.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2006 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2016 = mem[_2006]
            mem[mem[64] + 4] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
            staticcall strategyInfo[stor9[idx].field_0].field_1536.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2070 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2090 = mem[_2070]
            if mem[_2070] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _2016:
                revert with 0, 18
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_0
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _2224 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _2246 = mem[_2224]
            if 10^12 * _2090 / _2016 and mem[_2224] > -1 / 10^12 * _2090 / _2016:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _2090 / _2016 * _2246 / 10^12
            mem[mem[64] + 36] = 64
            _2363 = mem[_747]
            mem[mem[64] + 68] = mem[_747]
            t = 0
            u = _747 + 32
            w = mem[64] + 100
            while t < _2363:
                mem[w] = mem[u + 12 len 20]
                t = t + 1
                u = u + 32
                w = w + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _2090 / _2016 * _2246 / 10^12, 64, mem[mem[64] + 68 len (32 * _2363) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3475 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3486 = mem[_3475]
            require mem[_3475] <= test266151307()
            require _3475 + mem[_3475] + 31 < _3475 + return_data.size
            _3498 = mem[_3475 + mem[_3475]]
            if mem[_3475 + mem[_3475]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_3475 + mem[_3475]]) + 1 < 0 or _3475 + ceil32(return_data.size) + ceil32(32 * mem[_3475 + mem[_3475]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _3475 + ceil32(return_data.size) + ceil32(32 * mem[_3475 + mem[_3475]]) + 1
            mem[_3475 + ceil32(return_data.size)] = _3498
            require _3486 + (32 * _3498) + 32 <= return_data.size
            u = _3475 + ceil32(return_data.size) + 32
            t = _3475 + _3486 + 32
            while t < _3475 + _3486 + (32 * _3498) + 32:
                mem[u] = mem[t]
                u = u + 32
                t = t + 32
                continue 
            if 1 >= _3498:
                revert with 0, 50
            _5288 = mem[_3475 + ceil32(return_data.size) + 64]
            mem[_1746 + 128] = mem[_3475 + ceil32(return_data.size) + 64]
            if v > !_5288:
                revert with 0, 17
            if 0 >= mem[_747]:
                revert with 0, 50
            mem[_747 + 32] = mem[_1746 + 236 len 20]
            _5333 = mem[_1746 + 224]
            _5334 = mem[_1746]
            require ext_code.size(mem[_1746 + 236 len 20])
            staticcall mem[_1746 + 236 len 20].0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5352 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5366 = mem[_5352]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_5333))
            staticcall address(_5333).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5384 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5414 = mem[_5384]
            if mem[_5384] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _5366:
                revert with 0, 18
            mem[mem[64] + 4] = address(_5334)
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args address(_5334)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5488 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5510 = mem[_5488]
            if 10^12 * _5414 / _5366 and mem[_5488] > -1 / 10^12 * _5414 / _5366:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _5414 / _5366 * _5510 / 10^12
            mem[mem[64] + 36] = 64
            _5576 = mem[_747]
            mem[mem[64] + 68] = mem[_747]
            t = 0
            u = _747 + 32
            w = mem[64] + 100
            while t < _5576:
                mem[w] = mem[u + 12 len 20]
                t = t + 1
                u = u + 32
                w = w + 32
                continue 
            require ext_code.size(address(_5334))
            staticcall address(_5334).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _5414 / _5366 * _5510 / 10^12, 64, mem[mem[64] + 68 len (32 * _5576) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7150 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _7168 = mem[_7150]
            require mem[_7150] <= test266151307()
            require _7150 + mem[_7150] + 31 < _7150 + return_data.size
            _7182 = mem[_7150 + mem[_7150]]
            if mem[_7150 + mem[_7150]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_7150 + mem[_7150]]) + 1 < 0 or _7150 + ceil32(return_data.size) + ceil32(32 * mem[_7150 + mem[_7150]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _7150 + ceil32(return_data.size) + ceil32(32 * mem[_7150 + mem[_7150]]) + 1
            mem[_7150 + ceil32(return_data.size)] = _7182
            require _7168 + (32 * _7182) + 32 <= return_data.size
            u = _7150 + ceil32(return_data.size) + 32
            t = _7150 + _7168 + 32
            while t < _7150 + _7168 + (32 * _7182) + 32:
                mem[u] = mem[t]
                u = u + 32
                t = t + 32
                continue 
            if 1 >= _7182:
                revert with 0, 50
            if mem[_1746 + 128] > !mem[_7150 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_1746 + 128] = mem[_1746 + 128] + mem[_7150 + ceil32(return_data.size) + 64]
            if v + _5288 > !mem[_1746 + 128]:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            t = 10^12 * _1767 / _1895 * Mask(112, 0, _1855) / 10^12
            u = 10^12 * _1767 / _1895 * Mask(112, 0, _1841) / 10^12
            v = _1767
            v = _1746
            v = stor9[idx].field_0
            v = v + _5288 + mem[_1746 + 128]
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        staticcall strategyInfo[stor9[idx].field_0].field_1280.info(address arg1) with:
                gas gas_remaining wei
               args this.address
        mem[mem[64] len 320] = ext_call.return_data[0 len 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1760 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 320
        _1766 = mem[64]
        if mem[64] + 192 > test266151307() or mem[64] + 192 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 192
        mem[_1766] = mem[_1760]
        mem[_1766 + 32] = mem[_1760 + 32]
        mem[_1766 + 64] = mem[_1760 + 64]
        require return_data.size - 96 >= 96
        _1792 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_1792] = mem[_1760 + 96]
        mem[_1792 + 32] = mem[_1760 + 128]
        mem[_1792 + 64] = mem[_1760 + 160]
        mem[_1766 + 96] = _1792
        mem[_1766 + 128] = mem[_1760 + 192]
        require return_data.size - 224 >= 96
        _1813 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_1813] = mem[_1760 + 224]
        mem[_1813 + 32] = mem[_1760 + 256]
        mem[_1813 + 64] = mem[_1760 + 288]
        mem[_1766 + 160] = _1813
        _1831 = mem[_1766 + 64]
        if not mem[_1766 + 64]:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            t = t
            u = u
            v = mem[_1766 + 64]
            v = _1746
            v = stor9[idx].field_0
            v = v
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
        staticcall strategyInfo[stor9[idx].field_0].field_256.getReserves() with:
                gas gas_remaining wei
        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1869 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 96
        _1875 = mem[_1869]
        require mem[_1869] == mem[_1869 + 18 len 14]
        _1892 = mem[_1869 + 32]
        require mem[_1869 + 32] == mem[_1869 + 50 len 14]
        require mem[_1869 + 64] == mem[_1869 + 92 len 4]
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
        staticcall strategyInfo[stor9[idx].field_0].field_256.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _1932 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _1939 = mem[_1932]
        if _1831 > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not mem[_1932]:
            revert with 0, 18
        if 10^12 * _1831 / mem[_1932] and Mask(112, 0, _1875) > -1 / 10^12 * _1831 / mem[_1932]:
            revert with 0, 17
        if 10^12 * _1831 / mem[_1932] and Mask(112, 0, _1892) > -1 / 10^12 * _1831 / mem[_1932]:
            revert with 0, 17
        if 1 >= mem[_747]:
            revert with 0, 50
        mem[_747 + 64] = stor21
        if 0 >= mem[_747]:
            revert with 0, 50
        if stor21 == strategyInfo[stor9[idx].field_0].field_1536:
            mem[_747 + 32] = strategyInfo[stor9[idx].field_0].field_1792
            _2050 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _1831 / _1939 * Mask(112, 0, _1892) / 10^12
            mem[mem[64] + 36] = 64
            _2085 = mem[_747]
            mem[mem[64] + 68] = mem[_747]
            s = 0
            t = _747 + 32
            u = mem[64] + 100
            while s < _2085:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _2050 + (32 * _2085) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3474 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3485 = mem[_3474]
            require mem[_3474] <= test266151307()
            require _3474 + mem[_3474] + 31 < _3474 + return_data.size
            _3497 = mem[_3474 + mem[_3474]]
            if mem[_3474 + mem[_3474]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_3474 + mem[_3474]]) + 1 < 0 or _3474 + ceil32(return_data.size) + ceil32(32 * mem[_3474 + mem[_3474]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _3474 + ceil32(return_data.size) + ceil32(32 * mem[_3474 + mem[_3474]]) + 1
            mem[_3474 + ceil32(return_data.size)] = _3497
            require _3485 + (32 * _3497) + 32 <= return_data.size
            t = _3474 + ceil32(return_data.size) + 32
            s = _3474 + _3485 + 32
            while s < _3474 + _3485 + (32 * _3497) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _3497:
                revert with 0, 50
            _5287 = mem[_3474 + ceil32(return_data.size) + 64]
            if 10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12 > !mem[_3474 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_1746 + 128] = (10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12) + mem[_3474 + ceil32(return_data.size) + 64]
            if v > !((10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12) + _5287):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _3474 + ceil32(return_data.size)
            t = 10^12 * _1831 / _1939 * Mask(112, 0, _1892) / 10^12
            u = 10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12
            v = _1831
            v = _1746
            v = stor9[idx].field_0
            v = v + (10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12) + _5287
            continue 
        mem[_747 + 32] = strategyInfo[stor9[idx].field_0].field_1536
        if stor21 == strategyInfo[stor9[idx].field_0].field_1792:
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12
            mem[mem[64] + 36] = 64
            _2089 = mem[_747]
            mem[mem[64] + 68] = mem[_747]
            s = 0
            t = _747 + 32
            w = mem[64] + 100
            while s < _2089:
                mem[w] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                w = w + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12, 64, mem[mem[64] + 68 len (32 * _2089) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3473 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3484 = mem[_3473]
            require mem[_3473] <= test266151307()
            require _3473 + mem[_3473] + 31 < _3473 + return_data.size
            _3496 = mem[_3473 + mem[_3473]]
            if mem[_3473 + mem[_3473]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_3473 + mem[_3473]]) + 1 < 0 or _3473 + ceil32(return_data.size) + ceil32(32 * mem[_3473 + mem[_3473]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _3473 + ceil32(return_data.size) + ceil32(32 * mem[_3473 + mem[_3473]]) + 1
            mem[_3473 + ceil32(return_data.size)] = _3496
            require _3484 + (32 * _3496) + 32 <= return_data.size
            t = _3473 + ceil32(return_data.size) + 32
            s = _3473 + _3484 + 32
            while s < _3473 + _3484 + (32 * _3496) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _3496:
                revert with 0, 50
            _5286 = mem[_3473 + ceil32(return_data.size) + 64]
            if 10^12 * _1831 / _1939 * Mask(112, 0, _1892) / 10^12 > !mem[_3473 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_1746 + 128] = (10^12 * _1831 / _1939 * Mask(112, 0, _1892) / 10^12) + mem[_3473 + ceil32(return_data.size) + 64]
            if v > !((10^12 * _1831 / _1939 * Mask(112, 0, _1892) / 10^12) + _5286):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _3473 + ceil32(return_data.size)
            t = 10^12 * _1831 / _1939 * Mask(112, 0, _1892) / 10^12
            s = 10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12
            v = _1831
            v = _1746
            v = stor9[idx].field_0
            v = v + (10^12 * _1831 / _1939 * Mask(112, 0, _1892) / 10^12) + _5286
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
        staticcall strategyInfo[stor9[idx].field_0].field_1536.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2099 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2127 = mem[_2099]
        mem[mem[64] + 4] = this.address
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
        staticcall strategyInfo[stor9[idx].field_0].field_1536.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2181 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2201 = mem[_2181]
        if mem[_2181] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _2127:
            revert with 0, 18
        mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args strategyInfo[stor9[idx].field_0].field_0
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _2331 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _2362 = mem[_2331]
        if 10^12 * _2201 / _2127 and mem[_2331] > -1 / 10^12 * _2201 / _2127:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _2201 / _2127 * _2362 / 10^12
        mem[mem[64] + 36] = 64
        _2453 = mem[_747]
        mem[mem[64] + 68] = mem[_747]
        t = 0
        u = _747 + 32
        w = mem[64] + 100
        while t < _2453:
            mem[w] = mem[u + 12 len 20]
            t = t + 1
            u = u + 32
            w = w + 32
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
        staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 10^12 * _2201 / _2127 * _2362 / 10^12, 64, mem[mem[64] + 68 len (32 * _2453) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3472 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3483 = mem[_3472]
        require mem[_3472] <= test266151307()
        require _3472 + mem[_3472] + 31 < _3472 + return_data.size
        _3495 = mem[_3472 + mem[_3472]]
        if mem[_3472 + mem[_3472]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_3472 + mem[_3472]]) + 1 < 0 or _3472 + ceil32(return_data.size) + ceil32(32 * mem[_3472 + mem[_3472]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _3472 + ceil32(return_data.size) + ceil32(32 * mem[_3472 + mem[_3472]]) + 1
        mem[_3472 + ceil32(return_data.size)] = _3495
        require _3483 + (32 * _3495) + 32 <= return_data.size
        u = _3472 + ceil32(return_data.size) + 32
        t = _3472 + _3483 + 32
        while t < _3472 + _3483 + (32 * _3495) + 32:
            mem[u] = mem[t]
            u = u + 32
            t = t + 32
            continue 
        if 1 >= _3495:
            revert with 0, 50
        _5285 = mem[_3472 + ceil32(return_data.size) + 64]
        mem[_1746 + 128] = mem[_3472 + ceil32(return_data.size) + 64]
        if v > !_5285:
            revert with 0, 17
        if 0 >= mem[_747]:
            revert with 0, 50
        mem[_747 + 32] = mem[_1746 + 236 len 20]
        _5331 = mem[_1746 + 224]
        _5332 = mem[_1746]
        require ext_code.size(mem[_1746 + 236 len 20])
        staticcall mem[_1746 + 236 len 20].0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5351 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _5365 = mem[_5351]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_5331))
        staticcall address(_5331).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5383 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _5413 = mem[_5383]
        if mem[_5383] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _5365:
            revert with 0, 18
        mem[mem[64] + 4] = address(_5332)
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args address(_5332)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5487 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _5509 = mem[_5487]
        if 10^12 * _5413 / _5365 and mem[_5487] > -1 / 10^12 * _5413 / _5365:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _5413 / _5365 * _5509 / 10^12
        mem[mem[64] + 36] = 64
        _5575 = mem[_747]
        mem[mem[64] + 68] = mem[_747]
        t = 0
        u = _747 + 32
        w = mem[64] + 100
        while t < _5575:
            mem[w] = mem[u + 12 len 20]
            t = t + 1
            u = u + 32
            w = w + 32
            continue 
        require ext_code.size(address(_5332))
        staticcall address(_5332).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 10^12 * _5413 / _5365 * _5509 / 10^12, 64, mem[mem[64] + 68 len (32 * _5575) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7149 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _7167 = mem[_7149]
        require mem[_7149] <= test266151307()
        require _7149 + mem[_7149] + 31 < _7149 + return_data.size
        _7181 = mem[_7149 + mem[_7149]]
        if mem[_7149 + mem[_7149]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_7149 + mem[_7149]]) + 1 < 0 or _7149 + ceil32(return_data.size) + ceil32(32 * mem[_7149 + mem[_7149]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _7149 + ceil32(return_data.size) + ceil32(32 * mem[_7149 + mem[_7149]]) + 1
        mem[_7149 + ceil32(return_data.size)] = _7181
        require _7167 + (32 * _7181) + 32 <= return_data.size
        u = _7149 + ceil32(return_data.size) + 32
        t = _7149 + _7167 + 32
        while t < _7149 + _7167 + (32 * _7181) + 32:
            mem[u] = mem[t]
            u = u + 32
            t = t + 32
            continue 
        if 1 >= _7181:
            revert with 0, 50
        if mem[_1746 + 128] > !mem[_7149 + ceil32(return_data.size) + 64]:
            revert with 0, 17
        mem[_1746 + 128] = mem[_1746 + 128] + mem[_7149 + ceil32(return_data.size) + 64]
        if v + _5285 > !mem[_1746 + 128]:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s
        t = 10^12 * _1831 / _1939 * Mask(112, 0, _1892) / 10^12
        u = 10^12 * _1831 / _1939 * Mask(112, 0, _1875) / 10^12
        v = _1831
        v = _1746
        v = stor9[idx].field_0
        v = v + _5285 + mem[_1746 + 128]
        continue 
    emit 0xf9ede3d1 
    _1758 = mem[64]
    mem[64] = mem[64] + 256
    mem[_1758] = 0
    mem[_1758 + 32] = 0
    mem[_1758 + 64] = 0
    mem[_1758 + 96] = 0
    mem[_1758 + 128] = 0
    mem[_1758 + 160] = 0
    mem[_1758 + 192] = 0
    mem[_1758 + 224] = 0
    _1759 = mem[64]
    mem[mem[64]] = 2
    mem[64] = mem[64] + 96
    mem[_1759 + 32 len 64] = call.data[calldata.size len 64]
    idx = 0
    s = 96
    t = 0
    u = 0
    v = 0
    v = _1758
    v = 0
    v = 0
    while idx < stor9.length:
        mem[0] = stor9[idx].field_0
        mem[32] = 6
        _3444 = mem[64]
        mem[64] = mem[64] + 256
        mem[_3444] = strategyInfo[stor9[idx].field_0].field_0
        mem[_3444 + 32] = strategyInfo[stor9[idx].field_0].field_256
        mem[_3444 + 64] = strategyInfo[stor9[idx].field_0].field_512
        mem[_3444 + 96] = strategyInfo[stor9[idx].field_0].field_768
        mem[_3444 + 128] = strategyInfo[stor9[idx].field_0].field_1024
        mem[_3444 + 160] = strategyInfo[stor9[idx].field_0].field_1280
        mem[_3444 + 192] = strategyInfo[stor9[idx].field_0].field_1536
        mem[_3444 + 224] = strategyInfo[stor9[idx].field_0].field_1792
        if 999999 > strategyInfo[stor9[idx].field_0].field_512:
            mem[mem[64] + 36] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
            staticcall strategyInfo[stor9[idx].field_0].field_1280.0x93f1a40b with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_512, this.address
            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3471 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 64
            _3481 = mem[_3471]
            if not mem[_3471]:
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s
                t = t
                u = u
                v = mem[_3471]
                v = _3444
                v = stor9[idx].field_0
                v = v
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
            staticcall strategyInfo[stor9[idx].field_0].field_256.getReserves() with:
                    gas gas_remaining wei
            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3528 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 96
            _3550 = mem[_3528]
            require mem[_3528] == mem[_3528 + 18 len 14]
            _3574 = mem[_3528 + 32]
            require mem[_3528 + 32] == mem[_3528 + 50 len 14]
            require mem[_3528 + 64] == mem[_3528 + 92 len 4]
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
            staticcall strategyInfo[stor9[idx].field_0].field_256.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3621 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3635 = mem[_3621]
            if _3481 > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not mem[_3621]:
                revert with 0, 18
            if 10^12 * _3481 / mem[_3621] and Mask(112, 0, _3550) > -1 / 10^12 * _3481 / mem[_3621]:
                revert with 0, 17
            if 10^12 * _3481 / mem[_3621] and Mask(112, 0, _3574) > -1 / 10^12 * _3481 / mem[_3621]:
                revert with 0, 17
            if 1 >= mem[_1759]:
                revert with 0, 50
            mem[_1759 + 64] = stor21
            if 0 >= mem[_1759]:
                revert with 0, 50
            if stor21 == strategyInfo[stor9[idx].field_0].field_1536:
                mem[_1759 + 32] = strategyInfo[stor9[idx].field_0].field_1792
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12
                mem[mem[64] + 36] = 64
                _3766 = mem[_1759]
                mem[mem[64] + 68] = mem[_1759]
                s = 0
                t = _1759 + 32
                u = mem[64] + 100
                while s < _3766:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12, 64, mem[mem[64] + 68 len (32 * _3766) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5314 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _5330 = mem[_5314]
                require mem[_5314] <= test266151307()
                require _5314 + mem[_5314] + 31 < _5314 + return_data.size
                _5350 = mem[_5314 + mem[_5314]]
                if mem[_5314 + mem[_5314]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_5314 + mem[_5314]]) + 1 < 0 or _5314 + ceil32(return_data.size) + ceil32(32 * mem[_5314 + mem[_5314]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _5314 + ceil32(return_data.size) + ceil32(32 * mem[_5314 + mem[_5314]]) + 1
                mem[_5314 + ceil32(return_data.size)] = _5350
                require _5330 + (32 * _5350) + 32 <= return_data.size
                t = _5314 + ceil32(return_data.size) + 32
                s = _5314 + _5330 + 32
                while s < _5314 + _5330 + (32 * _5350) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _5350:
                    revert with 0, 50
                _7126 = mem[_5314 + ceil32(return_data.size) + 64]
                if 10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12 > !mem[_5314 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                mem[_3444 + 128] = (10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12) + mem[_5314 + ceil32(return_data.size) + 64]
                if v > !((10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12) + _7126):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _5314 + ceil32(return_data.size)
                t = 10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12
                u = 10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12
                v = _3481
                v = _3444
                v = stor9[idx].field_0
                v = v + (10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12) + _7126
                continue 
            mem[_1759 + 32] = strategyInfo[stor9[idx].field_0].field_1536
            if stor21 == strategyInfo[stor9[idx].field_0].field_1792:
                mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12
                mem[mem[64] + 36] = 64
                _3778 = mem[_1759]
                mem[mem[64] + 68] = mem[_1759]
                s = 0
                t = _1759 + 32
                u = mem[64] + 100
                while s < _3778:
                    mem[u] = mem[t + 12 len 20]
                    s = s + 1
                    t = t + 32
                    u = u + 32
                    continue 
                require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
                staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12, 64, mem[mem[64] + 68 len (32 * _3778) + 32]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _5313 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _5329 = mem[_5313]
                require mem[_5313] <= test266151307()
                require _5313 + mem[_5313] + 31 < _5313 + return_data.size
                _5349 = mem[_5313 + mem[_5313]]
                if mem[_5313 + mem[_5313]] > test266151307():
                    revert with 0, 65
                if ceil32(32 * mem[_5313 + mem[_5313]]) + 1 < 0 or _5313 + ceil32(return_data.size) + ceil32(32 * mem[_5313 + mem[_5313]]) + 1 > test266151307():
                    revert with 0, 65
                mem[64] = _5313 + ceil32(return_data.size) + ceil32(32 * mem[_5313 + mem[_5313]]) + 1
                mem[_5313 + ceil32(return_data.size)] = _5349
                require _5329 + (32 * _5349) + 32 <= return_data.size
                t = _5313 + ceil32(return_data.size) + 32
                s = _5313 + _5329 + 32
                while s < _5313 + _5329 + (32 * _5349) + 32:
                    mem[t] = mem[s]
                    t = t + 32
                    s = s + 32
                    continue 
                if 1 >= _5349:
                    revert with 0, 50
                _7125 = mem[_5313 + ceil32(return_data.size) + 64]
                if 10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12 > !mem[_5313 + ceil32(return_data.size) + 64]:
                    revert with 0, 17
                mem[_3444 + 128] = (10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12) + mem[_5313 + ceil32(return_data.size) + 64]
                if v > !((10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12) + _7125):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = _5313 + ceil32(return_data.size)
                t = 10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12
                u = 10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12
                v = _3481
                v = _3444
                v = stor9[idx].field_0
                v = v + (10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12) + _7125
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
            staticcall strategyInfo[stor9[idx].field_0].field_1536.0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3784 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3808 = mem[_3784]
            mem[mem[64] + 4] = this.address
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
            staticcall strategyInfo[stor9[idx].field_0].field_1536.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _3856 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _3878 = mem[_3856]
            if mem[_3856] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _3808:
                revert with 0, 18
            mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args strategyInfo[stor9[idx].field_0].field_0
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _4005 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _4031 = mem[_4005]
            if 10^12 * _3878 / _3808 and mem[_4005] > -1 / 10^12 * _3878 / _3808:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _3878 / _3808 * _4031 / 10^12
            mem[mem[64] + 36] = 64
            _4086 = mem[_1759]
            mem[mem[64] + 68] = mem[_1759]
            t = 0
            u = _1759 + 32
            w = mem[64] + 100
            while t < _4086:
                mem[w] = mem[u + 12 len 20]
                t = t + 1
                u = u + 32
                w = w + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _3878 / _3808 * _4031 / 10^12, 64, mem[mem[64] + 68 len (32 * _4086) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5312 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5328 = mem[_5312]
            require mem[_5312] <= test266151307()
            require _5312 + mem[_5312] + 31 < _5312 + return_data.size
            _5348 = mem[_5312 + mem[_5312]]
            if mem[_5312 + mem[_5312]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_5312 + mem[_5312]]) + 1 < 0 or _5312 + ceil32(return_data.size) + ceil32(32 * mem[_5312 + mem[_5312]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _5312 + ceil32(return_data.size) + ceil32(32 * mem[_5312 + mem[_5312]]) + 1
            mem[_5312 + ceil32(return_data.size)] = _5348
            require _5328 + (32 * _5348) + 32 <= return_data.size
            u = _5312 + ceil32(return_data.size) + 32
            t = _5312 + _5328 + 32
            while t < _5312 + _5328 + (32 * _5348) + 32:
                mem[u] = mem[t]
                u = u + 32
                t = t + 32
                continue 
            if 1 >= _5348:
                revert with 0, 50
            _7124 = mem[_5312 + ceil32(return_data.size) + 64]
            mem[_3444 + 128] = mem[_5312 + ceil32(return_data.size) + 64]
            if v > !_7124:
                revert with 0, 17
            if 0 >= mem[_1759]:
                revert with 0, 50
            mem[_1759 + 32] = mem[_3444 + 236 len 20]
            _7165 = mem[_3444 + 224]
            _7166 = mem[_3444]
            require ext_code.size(mem[_3444 + 236 len 20])
            staticcall mem[_3444 + 236 len 20].0x18160ddd with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7192 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _7212 = mem[_7192]
            mem[mem[64] + 4] = this.address
            require ext_code.size(address(_7165))
            staticcall address(_7165).0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7238 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _7256 = mem[_7238]
            if mem[_7238] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
                revert with 0, 17
            if not _7212:
                revert with 0, 18
            mem[mem[64] + 4] = address(_7166)
            require ext_code.size(stor21)
            staticcall stor21.0x70a08231 with:
                    gas gas_remaining wei
                   args address(_7166)
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _7342 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _7354 = mem[_7342]
            if 10^12 * _7256 / _7212 and mem[_7342] > -1 / 10^12 * _7256 / _7212:
                revert with 0, 17
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _7256 / _7212 * _7354 / 10^12
            mem[mem[64] + 36] = 64
            _7400 = mem[_1759]
            mem[mem[64] + 68] = mem[_1759]
            t = 0
            u = _1759 + 32
            w = mem[64] + 100
            while t < _7400:
                mem[w] = mem[u + 12 len 20]
                t = t + 1
                u = u + 32
                w = w + 32
                continue 
            require ext_code.size(address(_7166))
            staticcall address(_7166).getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _7256 / _7212 * _7354 / 10^12, 64, mem[mem[64] + 68 len (32 * _7400) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _9003 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _9025 = mem[_9003]
            require mem[_9003] <= test266151307()
            require _9003 + mem[_9003] + 31 < _9003 + return_data.size
            _9045 = mem[_9003 + mem[_9003]]
            if mem[_9003 + mem[_9003]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_9003 + mem[_9003]]) + 1 < 0 or _9003 + ceil32(return_data.size) + ceil32(32 * mem[_9003 + mem[_9003]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _9003 + ceil32(return_data.size) + ceil32(32 * mem[_9003 + mem[_9003]]) + 1
            mem[_9003 + ceil32(return_data.size)] = _9045
            require _9025 + (32 * _9045) + 32 <= return_data.size
            u = _9003 + ceil32(return_data.size) + 32
            t = _9003 + _9025 + 32
            while t < _9003 + _9025 + (32 * _9045) + 32:
                mem[u] = mem[t]
                u = u + 32
                t = t + 32
                continue 
            if 1 >= _9045:
                revert with 0, 50
            if mem[_3444 + 128] > !mem[_9003 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_3444 + 128] = mem[_3444 + 128] + mem[_9003 + ceil32(return_data.size) + 64]
            if v + _7124 > !mem[_3444 + 128]:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            t = 10^12 * _3481 / _3635 * Mask(112, 0, _3574) / 10^12
            u = 10^12 * _3481 / _3635 * Mask(112, 0, _3550) / 10^12
            v = _3481
            v = _3444
            v = stor9[idx].field_0
            v = v + _7124 + mem[_3444 + 128]
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1280)
        staticcall strategyInfo[stor9[idx].field_0].field_1280.info(address arg1) with:
                gas gas_remaining wei
               args this.address
        mem[mem[64] len 320] = ext_call.return_data[0 len 320]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3470 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 320
        _3480 = mem[64]
        if mem[64] + 192 > test266151307() or mem[64] + 192 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 192
        mem[_3480] = mem[_3470]
        mem[_3480 + 32] = mem[_3470 + 32]
        mem[_3480 + 64] = mem[_3470 + 64]
        require return_data.size - 96 >= 96
        _3503 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_3503] = mem[_3470 + 96]
        mem[_3503 + 32] = mem[_3470 + 128]
        mem[_3503 + 64] = mem[_3470 + 160]
        mem[_3480 + 96] = _3503
        mem[_3480 + 128] = mem[_3470 + 192]
        require return_data.size - 224 >= 96
        _3522 = mem[64]
        if mem[64] + 96 > test266151307() or mem[64] + 96 < mem[64]:
            revert with 0, 65
        mem[64] = mem[64] + 96
        mem[_3522] = mem[_3470 + 224]
        mem[_3522 + 32] = mem[_3470 + 256]
        mem[_3522 + 64] = mem[_3470 + 288]
        mem[_3480 + 160] = _3522
        _3542 = mem[_3480 + 64]
        if not mem[_3480 + 64]:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            t = t
            u = u
            v = mem[_3480 + 64]
            v = _3444
            v = stor9[idx].field_0
            v = v
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
        staticcall strategyInfo[stor9[idx].field_0].field_256.getReserves() with:
                gas gas_remaining wei
        mem[mem[64] len 96] = ext_call.return_data[0 len 96]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3598 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 96
        _3607 = mem[_3598]
        require mem[_3598] == mem[_3598 + 18 len 14]
        _3628 = mem[_3598 + 32]
        require mem[_3598 + 32] == mem[_3598 + 50 len 14]
        require mem[_3598 + 64] == mem[_3598 + 92 len 4]
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_256)
        staticcall strategyInfo[stor9[idx].field_0].field_256.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3660 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3668 = mem[_3660]
        if _3542 > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not mem[_3660]:
            revert with 0, 18
        if 10^12 * _3542 / mem[_3660] and Mask(112, 0, _3607) > -1 / 10^12 * _3542 / mem[_3660]:
            revert with 0, 17
        if 10^12 * _3542 / mem[_3660] and Mask(112, 0, _3628) > -1 / 10^12 * _3542 / mem[_3660]:
            revert with 0, 17
        if 1 >= mem[_1759]:
            revert with 0, 50
        mem[_1759 + 64] = stor21
        if 0 >= mem[_1759]:
            revert with 0, 50
        if stor21 == strategyInfo[stor9[idx].field_0].field_1536:
            mem[_1759 + 32] = strategyInfo[stor9[idx].field_0].field_1792
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12
            mem[mem[64] + 36] = 64
            _3865 = mem[_1759]
            mem[mem[64] + 68] = mem[_1759]
            s = 0
            t = _1759 + 32
            u = mem[64] + 100
            while s < _3865:
                mem[u] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                u = u + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12, 64, mem[mem[64] + 68 len (32 * _3865) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5311 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5327 = mem[_5311]
            require mem[_5311] <= test266151307()
            require _5311 + mem[_5311] + 31 < _5311 + return_data.size
            _5347 = mem[_5311 + mem[_5311]]
            if mem[_5311 + mem[_5311]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_5311 + mem[_5311]]) + 1 < 0 or _5311 + ceil32(return_data.size) + ceil32(32 * mem[_5311 + mem[_5311]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _5311 + ceil32(return_data.size) + ceil32(32 * mem[_5311 + mem[_5311]]) + 1
            mem[_5311 + ceil32(return_data.size)] = _5347
            require _5327 + (32 * _5347) + 32 <= return_data.size
            t = _5311 + ceil32(return_data.size) + 32
            s = _5311 + _5327 + 32
            while s < _5311 + _5327 + (32 * _5347) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _5347:
                revert with 0, 50
            _7123 = mem[_5311 + ceil32(return_data.size) + 64]
            if 10^12 * _3542 / _3668 * Mask(112, 0, _3607) / 10^12 > !mem[_5311 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_3444 + 128] = (10^12 * _3542 / _3668 * Mask(112, 0, _3607) / 10^12) + mem[_5311 + ceil32(return_data.size) + 64]
            if v > !((10^12 * _3542 / _3668 * Mask(112, 0, _3607) / 10^12) + _7123):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _5311 + ceil32(return_data.size)
            t = 10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12
            u = 10^12 * _3542 / _3668 * Mask(112, 0, _3607) / 10^12
            v = _3542
            v = _3444
            v = stor9[idx].field_0
            v = v + (10^12 * _3542 / _3668 * Mask(112, 0, _3607) / 10^12) + _7123
            continue 
        mem[_1759 + 32] = strategyInfo[stor9[idx].field_0].field_1536
        if stor21 == strategyInfo[stor9[idx].field_0].field_1792:
            _3855 = mem[64]
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 10^12 * _3542 / _3668 * Mask(112, 0, _3607) / 10^12
            mem[mem[64] + 36] = 64
            _3877 = mem[_1759]
            mem[mem[64] + 68] = mem[_1759]
            s = 0
            t = _1759 + 32
            w = mem[64] + 100
            while s < _3877:
                mem[w] = mem[t + 12 len 20]
                s = s + 1
                t = t + 32
                w = w + 32
                continue 
            require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
            staticcall strategyInfo[stor9[idx].field_0].field_0.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _3855 + (32 * _3877) + -mem[64] + 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5310 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5326 = mem[_5310]
            require mem[_5310] <= test266151307()
            require _5310 + mem[_5310] + 31 < _5310 + return_data.size
            _5346 = mem[_5310 + mem[_5310]]
            if mem[_5310 + mem[_5310]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_5310 + mem[_5310]]) + 1 < 0 or _5310 + ceil32(return_data.size) + ceil32(32 * mem[_5310 + mem[_5310]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _5310 + ceil32(return_data.size) + ceil32(32 * mem[_5310 + mem[_5310]]) + 1
            mem[_5310 + ceil32(return_data.size)] = _5346
            require _5326 + (32 * _5346) + 32 <= return_data.size
            t = _5310 + ceil32(return_data.size) + 32
            s = _5310 + _5326 + 32
            while s < _5310 + _5326 + (32 * _5346) + 32:
                mem[t] = mem[s]
                t = t + 32
                s = s + 32
                continue 
            if 1 >= _5346:
                revert with 0, 50
            _7122 = mem[_5310 + ceil32(return_data.size) + 64]
            if 10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12 > !mem[_5310 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            mem[_3444 + 128] = (10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12) + mem[_5310 + ceil32(return_data.size) + 64]
            if v > !((10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12) + _7122):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = _5310 + ceil32(return_data.size)
            t = 10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12
            s = 10^12 * _3542 / _3668 * Mask(112, 0, _3607) / 10^12
            v = _3542
            v = _3444
            v = stor9[idx].field_0
            v = v + (10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12) + _7122
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
        staticcall strategyInfo[stor9[idx].field_0].field_1536.0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3884 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3916 = mem[_3884]
        mem[mem[64] + 4] = this.address
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_1536)
        staticcall strategyInfo[stor9[idx].field_0].field_1536.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _3957 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _3977 = mem[_3957]
        if mem[_3957] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _3916:
            revert with 0, 18
        mem[mem[64] + 4] = strategyInfo[stor9[idx].field_0].field_0
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args strategyInfo[stor9[idx].field_0].field_0
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _4060 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _4085 = mem[_4060]
        if 10^12 * _3977 / _3916 and mem[_4060] > -1 / 10^12 * _3977 / _3916:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _3977 / _3916 * _4085 / 10^12
        mem[mem[64] + 36] = 64
        _4140 = mem[_1759]
        mem[mem[64] + 68] = mem[_1759]
        t = 0
        u = _1759 + 32
        w = mem[64] + 100
        while t < _4140:
            mem[w] = mem[u + 12 len 20]
            t = t + 1
            u = u + 32
            w = w + 32
            continue 
        require ext_code.size(strategyInfo[stor9[idx].field_0].field_0)
        staticcall strategyInfo[stor9[idx].field_0].field_0.getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 10^12 * _3977 / _3916 * _4085 / 10^12, 64, mem[mem[64] + 68 len (32 * _4140) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5309 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _5325 = mem[_5309]
        require mem[_5309] <= test266151307()
        require _5309 + mem[_5309] + 31 < _5309 + return_data.size
        _5345 = mem[_5309 + mem[_5309]]
        if mem[_5309 + mem[_5309]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_5309 + mem[_5309]]) + 1 < 0 or _5309 + ceil32(return_data.size) + ceil32(32 * mem[_5309 + mem[_5309]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _5309 + ceil32(return_data.size) + ceil32(32 * mem[_5309 + mem[_5309]]) + 1
        mem[_5309 + ceil32(return_data.size)] = _5345
        require _5325 + (32 * _5345) + 32 <= return_data.size
        u = _5309 + ceil32(return_data.size) + 32
        t = _5309 + _5325 + 32
        while t < _5309 + _5325 + (32 * _5345) + 32:
            mem[u] = mem[t]
            u = u + 32
            t = t + 32
            continue 
        if 1 >= _5345:
            revert with 0, 50
        _7121 = mem[_5309 + ceil32(return_data.size) + 64]
        mem[_3444 + 128] = mem[_5309 + ceil32(return_data.size) + 64]
        if v > !_7121:
            revert with 0, 17
        if 0 >= mem[_1759]:
            revert with 0, 50
        mem[_1759 + 32] = mem[_3444 + 236 len 20]
        _7163 = mem[_3444 + 224]
        _7164 = mem[_3444]
        require ext_code.size(mem[_3444 + 236 len 20])
        staticcall mem[_3444 + 236 len 20].0x18160ddd with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7191 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _7211 = mem[_7191]
        mem[mem[64] + 4] = this.address
        require ext_code.size(address(_7163))
        staticcall address(_7163).0x70a08231 with:
                gas gas_remaining wei
               args this.address
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7237 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _7255 = mem[_7237]
        if mem[_7237] > 0x119799812dea11197f27f0f6e885c8ba7eb31f476caf7411a863387:
            revert with 0, 17
        if not _7211:
            revert with 0, 18
        mem[mem[64] + 4] = address(_7164)
        require ext_code.size(stor21)
        staticcall stor21.0x70a08231 with:
                gas gas_remaining wei
               args address(_7164)
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _7341 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _7353 = mem[_7341]
        if 10^12 * _7255 / _7211 and mem[_7341] > -1 / 10^12 * _7255 / _7211:
            revert with 0, 17
        mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 10^12 * _7255 / _7211 * _7353 / 10^12
        mem[mem[64] + 36] = 64
        _7399 = mem[_1759]
        mem[mem[64] + 68] = mem[_1759]
        t = 0
        u = _1759 + 32
        w = mem[64] + 100
        while t < _7399:
            mem[w] = mem[u + 12 len 20]
            t = t + 1
            u = u + 32
            w = w + 32
            continue 
        require ext_code.size(address(_7164))
        staticcall address(_7164).getAmountsOut(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 10^12 * _7255 / _7211 * _7353 / 10^12, 64, mem[mem[64] + 68 len (32 * _7399) + 32]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _9002 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _9024 = mem[_9002]
        require mem[_9002] <= test266151307()
        require _9002 + mem[_9002] + 31 < _9002 + return_data.size
        _9044 = mem[_9002 + mem[_9002]]
        if mem[_9002 + mem[_9002]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_9002 + mem[_9002]]) + 1 < 0 or _9002 + ceil32(return_data.size) + ceil32(32 * mem[_9002 + mem[_9002]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _9002 + ceil32(return_data.size) + ceil32(32 * mem[_9002 + mem[_9002]]) + 1
        mem[_9002 + ceil32(return_data.size)] = _9044
        require _9024 + (32 * _9044) + 32 <= return_data.size
        u = _9002 + ceil32(return_data.size) + 32
        t = _9002 + _9024 + 32
        while t < _9002 + _9024 + (32 * _9044) + 32:
            mem[u] = mem[t]
            u = u + 32
            t = t + 32
            continue 
        if 1 >= _9044:
            revert with 0, 50
        if mem[_3444 + 128] > !mem[_9002 + ceil32(return_data.size) + 64]:
            revert with 0, 17
        mem[_3444 + 128] = mem[_3444 + 128] + mem[_9002 + ceil32(return_data.size) + 64]
        if v + _7121 > !mem[_3444 + 128]:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s
        t = 10^12 * _3542 / _3668 * Mask(112, 0, _3628) / 10^12
        u = 10^12 * _3542 / _3668 * Mask(112, 0, _3607) / 10^12
        v = _3542
        v = _3444
        v = stor9[idx].field_0
        v = v + _7121 + mem[_3444 + 128]
        continue 
    _3449 = mem[64]
    mem[mem[64]] = 2
    mem[64] = mem[64] + 96
    if not mem[_3449]:
        revert with 0, 50
    mem[_3449 + 32] = stor21
    if stor21 == stor19:
        if stor21 == stor20:
            require ext_code.size(stor19)
            staticcall stor19.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor20)
            staticcall stor20.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 'Desired value is zero'
            if not ext_call.return_data[0]:
                revert with 0, 'Desired value is zero'
            require ext_code.size(stor19)
            call stor19.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args stor22, -1
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            require ext_code.size(stor20)
            call stor20.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args stor22, -1
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                revert with 0, 17
            if ext_call.return_data[0] and 1 > -1 / ext_call.return_data[0]:
                revert with 0, 17
            if ext_call.return_data[0] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if ext_call.return_data[0] < 100 * ext_call.return_data[0] / 10000:
                revert with 0, 17
            if 60 > !block.timestamp:
                revert with 0, 17
            require ext_code.size(stor22)
            call stor22.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                 gas gas_remaining wei
                args stor19, stor20, ext_call.return_data[0], ext_call.return_data[0], ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), ext_call.return_data[0] - (100 * ext_call.return_data[0] / 10000), address(this.address), block.timestamp + 60
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if not v:
                if not msg.sender:
                    revert with 0, 'ERC20: mint to the zero address'
                if totalSupply > !msg.value:
                    revert with 0, 17
                totalSupply += msg.value
                if balanceOf[address(msg.sender)] > !msg.value:
                    revert with 0, 17
                balanceOf[address(msg.sender)] += msg.value
                emit Transfer(msg.value, 0, msg.sender);
            else:
                if v > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if msg.value > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 100 * msg.value > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not 100 * v:
                    revert with 0, 18
                if 10000 * msg.value / 100 * v and v > -1 / 10000 * msg.value / 100 * v:
                    revert with 0, 17
                if not msg.sender:
                    revert with 0, 'ERC20: mint to the zero address'
                if totalSupply > !(10000 * msg.value / 100 * v * v):
                    revert with 0, 17
                totalSupply += 10000 * msg.value / 100 * v * v
                if balanceOf[address(msg.sender)] > !(10000 * msg.value / 100 * v * v):
                    revert with 0, 17
                balanceOf[address(msg.sender)] += 10000 * msg.value / 100 * v * v
                emit Transfer((10000 * msg.value / 100 * v * v), 0, msg.sender);
            require ext_code.size(stor23)
            staticcall stor23.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor18)
            if stor16 >= 999999:
                call stor18.deposit(uint256 arg1) with:
                     gas gas_remaining wei
                    args ext_call.return_data[0]
            else:
                call stor18.0xe2bbb158 with:
                     gas gas_remaining wei
                    args stor16, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            emit Earn(ext_call.return_data[0]);
        else:
            if 1 >= mem[_3449]:
                revert with 0, 50
            mem[_3449 + 64] = stor20
            mem[_3449 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[_3449 + 100] = eth.balance(this.address) / 2
            mem[_3449 + 132] = 64
            mem[_3449 + 164] = mem[_3449]
            idx = 0
            s = _3449 + 32
            t = _3449 + 196
            while idx < mem[_3449]:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(stor22)
            staticcall stor22.mem[mem[64] len 4] with:
                    gas gas_remaining wei
                   args mem[mem[64] + 4 len _3449 + (32 * mem[_3449]) + -mem[64] + 192]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _5307 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _5323 = mem[_5307]
            require mem[_5307] <= test266151307()
            require _5307 + mem[_5307] + 31 < _5307 + return_data.size
            _5343 = mem[_5307 + mem[_5307]]
            if mem[_5307 + mem[_5307]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_5307 + mem[_5307]]) + 1 < 0 or _5307 + ceil32(return_data.size) + ceil32(32 * mem[_5307 + mem[_5307]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _5307 + ceil32(return_data.size) + ceil32(32 * mem[_5307 + mem[_5307]]) + 1
            mem[_5307 + ceil32(return_data.size)] = _5343
            require _5323 + (32 * _5343) + 32 <= return_data.size
            mem[_5307 + ceil32(return_data.size) + 32 len ceil32(32 * _5343)] = mem[_5307 + _5323 + 32 len ceil32(32 * _5343)]
            if 1 >= _5343:
                revert with 0, 50
            _7119 = mem[_5307 + ceil32(return_data.size) + 64]
            if mem[_5307 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_5307 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_5307 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if 1 >= _5343:
                revert with 0, 50
            _7209 = mem[_5307 + ceil32(return_data.size) + 64]
            if mem[_5307 + ceil32(return_data.size) + 64] < 100 * mem[_5307 + ceil32(return_data.size) + 64] / 10000:
                revert with 0, 17
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _7209 - (100 * _7119 / 10000)
            mem[mem[64] + 36] = 128
            _7279 = mem[_3449]
            mem[mem[64] + 132] = mem[_3449]
            idx = 0
            s = _3449 + 32
            t = mem[64] + 164
            while idx < _7279:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 68] = this.address
            mem[mem[64] + 100] = block.timestamp + 60
            require ext_code.size(stor22)
            call stor22.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
               value _7209 - (100 * _7119 / 10000) wei
                 gas gas_remaining wei
                args _7209 - (100 * _7119 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _7279) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _8992 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _9012 = mem[_8992]
            require mem[_8992] <= test266151307()
            require _8992 + mem[_8992] + 31 < _8992 + return_data.size
            _9034 = mem[_8992 + mem[_8992]]
            if mem[_8992 + mem[_8992]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_8992 + mem[_8992]]) + 1 < 0 or _8992 + ceil32(return_data.size) + ceil32(32 * mem[_8992 + mem[_8992]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _8992 + ceil32(return_data.size) + ceil32(32 * mem[_8992 + mem[_8992]]) + 1
            mem[_8992 + ceil32(return_data.size)] = _9034
            require _9012 + (32 * _9034) + 32 <= return_data.size
            mem[_8992 + ceil32(return_data.size) + 32 len ceil32(32 * _9034)] = mem[_8992 + _9012 + 32 len ceil32(32 * _9034)]
            mem[mem[64] + 4] = this.address
            require ext_code.size(stor19)
            staticcall stor19.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _10520 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _10532 = mem[_10520]
            mem[mem[64] + 4] = this.address
            require ext_code.size(stor20)
            staticcall stor20.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _10557 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _10567 = mem[_10557]
            if not _10532:
                revert with 0, 'Desired value is zero'
            if not mem[_10557]:
                revert with 0, 'Desired value is zero'
            mem[mem[64] + 4] = stor22
            mem[mem[64] + 36] = -1
            require ext_code.size(stor19)
            call stor19.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args stor22, -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _10601 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_10601] == bool(mem[_10601])
            mem[mem[64] + 4] = stor22
            mem[mem[64] + 36] = -1
            require ext_code.size(stor20)
            call stor20.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args stor22, -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _10635 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_10635] == bool(mem[_10635])
            if _10532 and 1 > -1 / _10532:
                revert with 0, 17
            if _10532 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if _10532 < 100 * _10532 / 10000:
                revert with 0, 17
            if _10567 and 1 > -1 / _10567:
                revert with 0, 17
            if _10567 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if _10567 < 100 * _10567 / 10000:
                revert with 0, 17
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64] + 68] = _10532
            mem[mem[64] + 100] = _10567
            mem[mem[64] + 132] = _10532 - (100 * _10532 / 10000)
            mem[mem[64] + 164] = _10567 - (100 * _10567 / 10000)
            mem[mem[64] + 196] = this.address
            mem[mem[64] + 228] = block.timestamp + 60
            require ext_code.size(stor22)
            call stor22.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                 gas gas_remaining wei
                args stor19, stor20, _10532, _10567, _10532 - (100 * _10532 / 10000), _10567 - (100 * _10567 / 10000), address(this.address), block.timestamp + 60
            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 96
            if not v:
                if not msg.sender:
                    revert with 0, 'ERC20: mint to the zero address'
                if totalSupply > !msg.value:
                    revert with 0, 17
                totalSupply += msg.value
                mem[0] = msg.sender
                mem[32] = 0
                if balanceOf[address(msg.sender)] > !msg.value:
                    revert with 0, 17
                balanceOf[address(msg.sender)] += msg.value
                emit Transfer(msg.value, 0, msg.sender);
                mem[mem[64] + 4] = this.address
                require ext_code.size(stor23)
                staticcall stor23.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10934 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require ext_code.size(stor18)
                if stor16 >= 999999:
                    call stor18.deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args mem[_10934]
                else:
                    call stor18.0xe2bbb158 with:
                         gas gas_remaining wei
                        args stor16, mem[_10934]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                emit Earn(mem[_10934]);
            else:
                if v > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if msg.value > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 100 * msg.value > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not 100 * v:
                    revert with 0, 18
                if 10000 * msg.value / 100 * v and v > -1 / 10000 * msg.value / 100 * v:
                    revert with 0, 17
                if not msg.sender:
                    revert with 0, 'ERC20: mint to the zero address'
                if totalSupply > !(10000 * msg.value / 100 * v * v):
                    revert with 0, 17
                totalSupply += 10000 * msg.value / 100 * v * v
                mem[0] = msg.sender
                mem[32] = 0
                if balanceOf[address(msg.sender)] > !(10000 * msg.value / 100 * v * v):
                    revert with 0, 17
                balanceOf[address(msg.sender)] += 10000 * msg.value / 100 * v * v
                emit Transfer((10000 * msg.value / 100 * v * v), 0, msg.sender);
                mem[mem[64] + 4] = this.address
                require ext_code.size(stor23)
                staticcall stor23.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _11012 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require ext_code.size(stor18)
                if stor16 >= 999999:
                    call stor18.deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args mem[_11012]
                else:
                    call stor18.0xe2bbb158 with:
                         gas gas_remaining wei
                        args stor16, mem[_11012]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                emit Earn(mem[_11012]);
    else:
        if 1 >= mem[_3449]:
            revert with 0, 50
        mem[_3449 + 64] = stor19
        mem[_3449 + 96] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
        mem[_3449 + 100] = eth.balance(this.address) / 2
        mem[_3449 + 132] = 64
        mem[_3449 + 164] = mem[_3449]
        idx = 0
        s = _3449 + 32
        t = _3449 + 196
        while idx < mem[_3449]:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(stor22)
        staticcall stor22.mem[mem[64] len 4] with:
                gas gas_remaining wei
               args mem[mem[64] + 4 len _3449 + (32 * mem[_3449]) + -mem[64] + 192]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _5308 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _5324 = mem[_5308]
        require mem[_5308] <= test266151307()
        require _5308 + mem[_5308] + 31 < _5308 + return_data.size
        _5344 = mem[_5308 + mem[_5308]]
        if mem[_5308 + mem[_5308]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_5308 + mem[_5308]]) + 1 < 0 or _5308 + ceil32(return_data.size) + ceil32(32 * mem[_5308 + mem[_5308]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _5308 + ceil32(return_data.size) + ceil32(32 * mem[_5308 + mem[_5308]]) + 1
        mem[_5308 + ceil32(return_data.size)] = _5344
        require _5324 + (32 * _5344) + 32 <= return_data.size
        mem[_5308 + ceil32(return_data.size) + 32 len ceil32(32 * _5344)] = mem[_5308 + _5324 + 32 len ceil32(32 * _5344)]
        if 1 >= _5344:
            revert with 0, 50
        _7120 = mem[_5308 + ceil32(return_data.size) + 64]
        if mem[_5308 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_5308 + ceil32(return_data.size) + 64]:
            revert with 0, 17
        if mem[_5308 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
            revert with 0, 17
        if 1 >= _5344:
            revert with 0, 50
        _7210 = mem[_5308 + ceil32(return_data.size) + 64]
        if mem[_5308 + ceil32(return_data.size) + 64] < 100 * mem[_5308 + ceil32(return_data.size) + 64] / 10000:
            revert with 0, 17
        if 60 > !block.timestamp:
            revert with 0, 17
        _7268 = mem[64]
        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = _7210 - (100 * _7120 / 10000)
        mem[mem[64] + 36] = 128
        _7280 = mem[_3449]
        mem[mem[64] + 132] = mem[_3449]
        idx = 0
        s = _3449 + 32
        t = mem[64] + 164
        while idx < _7280:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[_7268 + 68] = this.address
        mem[_7268 + 100] = block.timestamp + 60
        require ext_code.size(stor22)
        call stor22.mem[mem[64] len 4] with:
           value _7210 - (100 * _7120 / 10000) wei
             gas gas_remaining wei
            args mem[mem[64] + 4 len _7268 + (32 * _7280) + -mem[64] + 160]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _8993 = mem[64]
        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _9013 = mem[_8993]
        require mem[_8993] <= test266151307()
        require _8993 + mem[_8993] + 31 < _8993 + return_data.size
        _9035 = mem[_8993 + mem[_8993]]
        if mem[_8993 + mem[_8993]] > test266151307():
            revert with 0, 65
        if ceil32(32 * mem[_8993 + mem[_8993]]) + 1 < 0 or _8993 + ceil32(return_data.size) + ceil32(32 * mem[_8993 + mem[_8993]]) + 1 > test266151307():
            revert with 0, 65
        mem[64] = _8993 + ceil32(return_data.size) + ceil32(32 * mem[_8993 + mem[_8993]]) + 1
        mem[_8993 + ceil32(return_data.size)] = _9035
        require _9013 + (32 * _9035) + 32 <= return_data.size
        mem[_8993 + ceil32(return_data.size) + 32 len ceil32(32 * _9035)] = mem[_8993 + _9013 + 32 len ceil32(32 * _9035)]
        if stor21 == stor20:
            mem[mem[64] + 4] = this.address
            require ext_code.size(stor19)
            staticcall stor19.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _10529 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _10542 = mem[_10529]
            mem[mem[64] + 4] = this.address
            require ext_code.size(stor20)
            staticcall stor20.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _10566 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _10569 = mem[_10566]
            if not _10542:
                revert with 0, 'Desired value is zero'
            if not mem[_10566]:
                revert with 0, 'Desired value is zero'
            mem[mem[64] + 4] = stor22
            mem[mem[64] + 36] = -1
            require ext_code.size(stor19)
            call stor19.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args stor22, -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _10603 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_10603] == bool(mem[_10603])
            mem[mem[64] + 4] = stor22
            mem[mem[64] + 36] = -1
            require ext_code.size(stor20)
            call stor20.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args stor22, -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _10637 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_10637] == bool(mem[_10637])
            if _10542 and 1 > -1 / _10542:
                revert with 0, 17
            if _10542 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if _10542 < 100 * _10542 / 10000:
                revert with 0, 17
            if _10569 and 1 > -1 / _10569:
                revert with 0, 17
            if _10569 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if _10569 < 100 * _10569 / 10000:
                revert with 0, 17
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64] + 68] = _10542
            mem[mem[64] + 100] = _10569
            mem[mem[64] + 132] = _10542 - (100 * _10542 / 10000)
            mem[mem[64] + 164] = _10569 - (100 * _10569 / 10000)
            mem[mem[64] + 196] = this.address
            mem[mem[64] + 228] = block.timestamp + 60
            require ext_code.size(stor22)
            call stor22.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                 gas gas_remaining wei
                args stor19, stor20, _10542, _10569, _10542 - (100 * _10542 / 10000), _10569 - (100 * _10569 / 10000), address(this.address), block.timestamp + 60
            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 96
            if not v:
                if not msg.sender:
                    revert with 0, 'ERC20: mint to the zero address'
                if totalSupply > !msg.value:
                    revert with 0, 17
                totalSupply += msg.value
                mem[0] = msg.sender
                mem[32] = 0
                if balanceOf[address(msg.sender)] > !msg.value:
                    revert with 0, 17
                balanceOf[address(msg.sender)] += msg.value
                emit Transfer(msg.value, 0, msg.sender);
                mem[mem[64] + 4] = this.address
                require ext_code.size(stor23)
                staticcall stor23.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _10935 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require ext_code.size(stor18)
                if stor16 >= 999999:
                    call stor18.deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args mem[_10935]
                else:
                    call stor18.0xe2bbb158 with:
                         gas gas_remaining wei
                        args stor16, mem[_10935]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                emit Earn(mem[_10935]);
            else:
                if v > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if msg.value > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 100 * msg.value > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not 100 * v:
                    revert with 0, 18
                if 10000 * msg.value / 100 * v and v > -1 / 10000 * msg.value / 100 * v:
                    revert with 0, 17
                if not msg.sender:
                    revert with 0, 'ERC20: mint to the zero address'
                if totalSupply > !(10000 * msg.value / 100 * v * v):
                    revert with 0, 17
                totalSupply += 10000 * msg.value / 100 * v * v
                mem[0] = msg.sender
                mem[32] = 0
                if balanceOf[address(msg.sender)] > !(10000 * msg.value / 100 * v * v):
                    revert with 0, 17
                balanceOf[address(msg.sender)] += 10000 * msg.value / 100 * v * v
                emit Transfer((10000 * msg.value / 100 * v * v), 0, msg.sender);
                mem[mem[64] + 4] = this.address
                require ext_code.size(stor23)
                staticcall stor23.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _11017 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require ext_code.size(stor18)
                if stor16 >= 999999:
                    call stor18.deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args mem[_11017]
                else:
                    call stor18.0xe2bbb158 with:
                         gas gas_remaining wei
                        args stor16, mem[_11017]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                emit Earn(mem[_11017]);
        else:
            if 1 >= mem[_3449]:
                revert with 0, 50
            mem[_3449 + 64] = stor20
            mem[mem[64]] = 0xd06ca61f00000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = eth.balance(this.address) / 2
            mem[mem[64] + 36] = 64
            _10543 = mem[_3449]
            mem[mem[64] + 68] = mem[_3449]
            idx = 0
            s = _3449 + 32
            t = mem[64] + 100
            while idx < _10543:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(stor22)
            staticcall stor22.getAmountsOut(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args Mask(255, 1, eth.balance(this.address)), 64, mem[mem[64] + 68 len (32 * _10543) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _11954 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _11963 = mem[_11954]
            require mem[_11954] <= test266151307()
            require _11954 + mem[_11954] + 31 < _11954 + return_data.size
            _11972 = mem[_11954 + mem[_11954]]
            if mem[_11954 + mem[_11954]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_11954 + mem[_11954]]) + 1 < 0 or _11954 + ceil32(return_data.size) + ceil32(32 * mem[_11954 + mem[_11954]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _11954 + ceil32(return_data.size) + ceil32(32 * mem[_11954 + mem[_11954]]) + 1
            mem[_11954 + ceil32(return_data.size)] = _11972
            require _11963 + (32 * _11972) + 32 <= return_data.size
            mem[_11954 + ceil32(return_data.size) + 32 len ceil32(32 * _11972)] = mem[_11954 + _11963 + 32 len ceil32(32 * _11972)]
            if 1 >= _11972:
                revert with 0, 50
            _13234 = mem[_11954 + ceil32(return_data.size) + 64]
            if mem[_11954 + ceil32(return_data.size) + 64] and 1 > -1 / mem[_11954 + ceil32(return_data.size) + 64]:
                revert with 0, 17
            if mem[_11954 + ceil32(return_data.size) + 64] > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if 1 >= _11972:
                revert with 0, 50
            _13300 = mem[_11954 + ceil32(return_data.size) + 64]
            if mem[_11954 + ceil32(return_data.size) + 64] < 100 * mem[_11954 + ceil32(return_data.size) + 64] / 10000:
                revert with 0, 17
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = _13300 - (100 * _13234 / 10000)
            mem[mem[64] + 36] = 128
            _13370 = mem[_3449]
            mem[mem[64] + 132] = mem[_3449]
            idx = 0
            s = _3449 + 32
            t = mem[64] + 164
            while idx < _13370:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[mem[64] + 68] = this.address
            mem[mem[64] + 100] = block.timestamp + 60
            require ext_code.size(stor22)
            call stor22.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
               value _13300 - (100 * _13234 / 10000) wei
                 gas gas_remaining wei
                args _13300 - (100 * _13234 / 10000), 128, address(this.address), block.timestamp + 60, mem[mem[64] + 132 len (32 * _13370) + 32]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _14540 = mem[64]
            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _14561 = mem[_14540]
            require mem[_14540] <= test266151307()
            require _14540 + mem[_14540] + 31 < _14540 + return_data.size
            _14582 = mem[_14540 + mem[_14540]]
            if mem[_14540 + mem[_14540]] > test266151307():
                revert with 0, 65
            if ceil32(32 * mem[_14540 + mem[_14540]]) + 1 < 0 or _14540 + ceil32(return_data.size) + ceil32(32 * mem[_14540 + mem[_14540]]) + 1 > test266151307():
                revert with 0, 65
            mem[64] = _14540 + ceil32(return_data.size) + ceil32(32 * mem[_14540 + mem[_14540]]) + 1
            mem[_14540 + ceil32(return_data.size)] = _14582
            require _14561 + (32 * _14582) + 32 <= return_data.size
            mem[_14540 + ceil32(return_data.size) + 32 len ceil32(32 * _14582)] = mem[_14540 + _14561 + 32 len ceil32(32 * _14582)]
            mem[mem[64] + 4] = this.address
            require ext_code.size(stor19)
            staticcall stor19.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _15256 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15273 = mem[_15256]
            mem[mem[64] + 4] = this.address
            require ext_code.size(stor20)
            staticcall stor20.0x70a08231 with:
                    gas gas_remaining wei
                   args this.address
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _15296 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _15301 = mem[_15296]
            if not _15273:
                revert with 0, 'Desired value is zero'
            if not mem[_15296]:
                revert with 0, 'Desired value is zero'
            mem[mem[64] + 4] = stor22
            mem[mem[64] + 36] = -1
            require ext_code.size(stor19)
            call stor19.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args stor22, -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _15316 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_15316] == bool(mem[_15316])
            mem[mem[64] + 4] = stor22
            mem[mem[64] + 36] = -1
            require ext_code.size(stor20)
            call stor20.approve(address arg1, uint256 arg2) with:
                 gas gas_remaining wei
                args stor22, -1
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _15332 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            require mem[_15332] == bool(mem[_15332])
            if _15273 and 1 > -1 / _15273:
                revert with 0, 17
            if _15273 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if _15273 < 100 * _15273 / 10000:
                revert with 0, 17
            if _15301 and 1 > -1 / _15301:
                revert with 0, 17
            if _15301 > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                revert with 0, 17
            if _15301 < 100 * _15301 / 10000:
                revert with 0, 17
            if 60 > !block.timestamp:
                revert with 0, 17
            mem[mem[64] + 68] = _15273
            mem[mem[64] + 100] = _15301
            mem[mem[64] + 132] = _15273 - (100 * _15273 / 10000)
            mem[mem[64] + 164] = _15301 - (100 * _15301 / 10000)
            mem[mem[64] + 196] = this.address
            mem[mem[64] + 228] = block.timestamp + 60
            require ext_code.size(stor22)
            call stor22.addLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, address arg7, uint256 arg8) with:
                 gas gas_remaining wei
                args stor19, stor20, _15273, _15301, _15273 - (100 * _15273 / 10000), _15301 - (100 * _15301 / 10000), address(this.address), block.timestamp + 60
            mem[mem[64] len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 96
            if not v:
                if not msg.sender:
                    revert with 0, 'ERC20: mint to the zero address'
                if totalSupply > !msg.value:
                    revert with 0, 17
                totalSupply += msg.value
                mem[0] = msg.sender
                mem[32] = 0
                if balanceOf[address(msg.sender)] > !msg.value:
                    revert with 0, 17
                balanceOf[address(msg.sender)] += msg.value
                emit Transfer(msg.value, 0, msg.sender);
                mem[mem[64] + 4] = this.address
                require ext_code.size(stor23)
                staticcall stor23.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _15443 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require ext_code.size(stor18)
                if stor16 >= 999999:
                    call stor18.deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args mem[_15443]
                else:
                    call stor18.0xe2bbb158 with:
                         gas gas_remaining wei
                        args stor16, mem[_15443]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                emit Earn(mem[_15443]);
            else:
                if v > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if msg.value > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if 100 * msg.value > 0x28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f:
                    revert with 0, 17
                if not 100 * v:
                    revert with 0, 18
                if 10000 * msg.value / 100 * v and v > -1 / 10000 * msg.value / 100 * v:
                    revert with 0, 17
                if not msg.sender:
                    revert with 0, 'ERC20: mint to the zero address'
                if totalSupply > !(10000 * msg.value / 100 * v * v):
                    revert with 0, 17
                totalSupply += 10000 * msg.value / 100 * v * v
                mem[0] = msg.sender
                mem[32] = 0
                if balanceOf[address(msg.sender)] > !(10000 * msg.value / 100 * v * v):
                    revert with 0, 17
                balanceOf[address(msg.sender)] += 10000 * msg.value / 100 * v * v
                emit Transfer((10000 * msg.value / 100 * v * v), 0, msg.sender);
                mem[mem[64] + 4] = this.address
                require ext_code.size(stor23)
                staticcall stor23.0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _15464 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                require ext_code.size(stor18)
                if stor16 >= 999999:
                    call stor18.deposit(uint256 arg1) with:
                         gas gas_remaining wei
                        args mem[_15464]
                else:
                    call stor18.0xe2bbb158 with:
                         gas gas_remaining wei
                        args stor16, mem[_15464]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                emit Earn(mem[_15464]);
    emit 0x5c77db97: msg.value
}



}
